
pataTX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004a6  00800100  000050be  00005152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  008005a6  008005a6  000055f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000055f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00005668  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ff7  00000000  00000000  00005890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ea0  00000000  00000000  00009887  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004bf9  00000000  00000000  0000a727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  0000f320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9e  00000000  00000000  0000f728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020b5  00000000  00000000  000101c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0001227b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__ctors_end>
       4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_1>
       8:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
       c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      10:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      14:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      18:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      1c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      20:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      24:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      28:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      2c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      30:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      34:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      38:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      3c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      40:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__vector_16>
      44:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      48:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      4c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      50:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      54:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      58:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      5c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      60:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      64:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      68:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      6c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      70:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      74:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      78:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      7c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      80:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      84:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      88:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      8c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      90:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      94:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      98:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      9c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      a0:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      a4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      a8:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      ac:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      b0:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__bad_interrupt>
      b4:	e5 19       	sub	r30, r5
      b6:	f3 19       	sub	r31, r3
      b8:	fa 19       	sub	r31, r10
      ba:	14 1a       	sub	r1, r20
      bc:	01 1a       	sub	r0, r17
      be:	14 1a       	sub	r1, r20
      c0:	14 1a       	sub	r1, r20
      c2:	14 1a       	sub	r1, r20
      c4:	08 1a       	sub	r0, r24
      c6:	14 1a       	sub	r1, r20
      c8:	14 1a       	sub	r1, r20
      ca:	14 1a       	sub	r1, r20
      cc:	14 1a       	sub	r1, r20
      ce:	14 1a       	sub	r1, r20
      d0:	14 1a       	sub	r1, r20
      d2:	14 1a       	sub	r1, r20
      d4:	0e 1a       	sub	r0, r30
      d6:	14 1a       	sub	r1, r20
      d8:	14 1a       	sub	r1, r20
      da:	14 1a       	sub	r1, r20
      dc:	14 1a       	sub	r1, r20
      de:	14 1a       	sub	r1, r20
      e0:	14 1a       	sub	r1, r20
      e2:	14 1a       	sub	r1, r20
      e4:	14 1a       	sub	r1, r20
      e6:	14 1a       	sub	r1, r20
      e8:	14 1a       	sub	r1, r20
      ea:	14 1a       	sub	r1, r20
      ec:	14 1a       	sub	r1, r20
      ee:	14 1a       	sub	r1, r20
      f0:	14 1a       	sub	r1, r20
      f2:	14 1a       	sub	r1, r20
      f4:	eb 19       	sub	r30, r11
      f6:	1f 1a       	sub	r1, r31
      f8:	2d 1a       	sub	r2, r29
      fa:	34 1a       	sub	r3, r20
      fc:	4e 1a       	sub	r4, r30
      fe:	3b 1a       	sub	r3, r27
     100:	4e 1a       	sub	r4, r30
     102:	4e 1a       	sub	r4, r30
     104:	4e 1a       	sub	r4, r30
     106:	42 1a       	sub	r4, r18
     108:	4e 1a       	sub	r4, r30
     10a:	4e 1a       	sub	r4, r30
     10c:	4e 1a       	sub	r4, r30
     10e:	4e 1a       	sub	r4, r30
     110:	4e 1a       	sub	r4, r30
     112:	4e 1a       	sub	r4, r30
     114:	4e 1a       	sub	r4, r30
     116:	48 1a       	sub	r4, r24
     118:	4e 1a       	sub	r4, r30
     11a:	4e 1a       	sub	r4, r30
     11c:	4e 1a       	sub	r4, r30
     11e:	4e 1a       	sub	r4, r30
     120:	4e 1a       	sub	r4, r30
     122:	4e 1a       	sub	r4, r30
     124:	4e 1a       	sub	r4, r30
     126:	4e 1a       	sub	r4, r30
     128:	4e 1a       	sub	r4, r30
     12a:	4e 1a       	sub	r4, r30
     12c:	4e 1a       	sub	r4, r30
     12e:	4e 1a       	sub	r4, r30
     130:	4e 1a       	sub	r4, r30
     132:	4e 1a       	sub	r4, r30
     134:	4e 1a       	sub	r4, r30
     136:	25 1a       	sub	r2, r21
     138:	59 1a       	sub	r5, r25
     13a:	69 1a       	sub	r6, r25
     13c:	71 1a       	sub	r7, r17
     13e:	8f 1a       	sub	r8, r31
     140:	79 1a       	sub	r7, r25
     142:	8f 1a       	sub	r8, r31
     144:	8f 1a       	sub	r8, r31
     146:	8f 1a       	sub	r8, r31
     148:	81 1a       	sub	r8, r17
     14a:	8f 1a       	sub	r8, r31
     14c:	8f 1a       	sub	r8, r31
     14e:	8f 1a       	sub	r8, r31
     150:	8f 1a       	sub	r8, r31
     152:	8f 1a       	sub	r8, r31
     154:	8f 1a       	sub	r8, r31
     156:	8f 1a       	sub	r8, r31
     158:	88 1a       	sub	r8, r24
     15a:	8f 1a       	sub	r8, r31
     15c:	8f 1a       	sub	r8, r31
     15e:	8f 1a       	sub	r8, r31
     160:	8f 1a       	sub	r8, r31
     162:	8f 1a       	sub	r8, r31
     164:	8f 1a       	sub	r8, r31
     166:	8f 1a       	sub	r8, r31
     168:	8f 1a       	sub	r8, r31
     16a:	8f 1a       	sub	r8, r31
     16c:	8f 1a       	sub	r8, r31
     16e:	8f 1a       	sub	r8, r31
     170:	8f 1a       	sub	r8, r31
     172:	8f 1a       	sub	r8, r31
     174:	8f 1a       	sub	r8, r31
     176:	8f 1a       	sub	r8, r31
     178:	60 1a       	sub	r6, r16
     17a:	9b 1a       	sub	r9, r27
     17c:	bb 1a       	sub	r11, r27
     17e:	cb 1a       	sub	r12, r27
     180:	26 1c       	adc	r2, r6
     182:	db 1a       	sub	r13, r27
     184:	26 1c       	adc	r2, r6
     186:	26 1c       	adc	r2, r6
     188:	26 1c       	adc	r2, r6
     18a:	eb 1a       	sub	r14, r27
     18c:	26 1c       	adc	r2, r6
     18e:	26 1c       	adc	r2, r6
     190:	26 1c       	adc	r2, r6
     192:	26 1c       	adc	r2, r6
     194:	26 1c       	adc	r2, r6
     196:	26 1c       	adc	r2, r6
     198:	26 1c       	adc	r2, r6
     19a:	fa 1a       	sub	r15, r26
     19c:	26 1c       	adc	r2, r6
     19e:	26 1c       	adc	r2, r6
     1a0:	26 1c       	adc	r2, r6
     1a2:	26 1c       	adc	r2, r6
     1a4:	26 1c       	adc	r2, r6
     1a6:	26 1c       	adc	r2, r6
     1a8:	26 1c       	adc	r2, r6
     1aa:	26 1c       	adc	r2, r6
     1ac:	26 1c       	adc	r2, r6
     1ae:	26 1c       	adc	r2, r6
     1b0:	26 1c       	adc	r2, r6
     1b2:	26 1c       	adc	r2, r6
     1b4:	26 1c       	adc	r2, r6
     1b6:	26 1c       	adc	r2, r6
     1b8:	26 1c       	adc	r2, r6
     1ba:	aa 1a       	sub	r10, r26
     1bc:	18 1b       	sub	r17, r24
     1be:	26 1b       	sub	r18, r22
     1c0:	2d 1b       	sub	r18, r29
     1c2:	47 1b       	sub	r20, r23
     1c4:	34 1b       	sub	r19, r20
     1c6:	47 1b       	sub	r20, r23
     1c8:	47 1b       	sub	r20, r23
     1ca:	47 1b       	sub	r20, r23
     1cc:	3b 1b       	sub	r19, r27
     1ce:	47 1b       	sub	r20, r23
     1d0:	47 1b       	sub	r20, r23
     1d2:	47 1b       	sub	r20, r23
     1d4:	47 1b       	sub	r20, r23
     1d6:	47 1b       	sub	r20, r23
     1d8:	47 1b       	sub	r20, r23
     1da:	47 1b       	sub	r20, r23
     1dc:	41 1b       	sub	r20, r17
     1de:	47 1b       	sub	r20, r23
     1e0:	47 1b       	sub	r20, r23
     1e2:	47 1b       	sub	r20, r23
     1e4:	47 1b       	sub	r20, r23
     1e6:	47 1b       	sub	r20, r23
     1e8:	47 1b       	sub	r20, r23
     1ea:	47 1b       	sub	r20, r23
     1ec:	47 1b       	sub	r20, r23
     1ee:	47 1b       	sub	r20, r23
     1f0:	47 1b       	sub	r20, r23
     1f2:	47 1b       	sub	r20, r23
     1f4:	47 1b       	sub	r20, r23
     1f6:	47 1b       	sub	r20, r23
     1f8:	47 1b       	sub	r20, r23
     1fa:	47 1b       	sub	r20, r23
     1fc:	1e 1b       	sub	r17, r30
     1fe:	53 1b       	sub	r21, r19
     200:	67 1b       	sub	r22, r23
     202:	71 1b       	sub	r23, r17
     204:	2f 1c       	adc	r2, r15
     206:	7b 1b       	sub	r23, r27
     208:	2f 1c       	adc	r2, r15
     20a:	2f 1c       	adc	r2, r15
     20c:	2f 1c       	adc	r2, r15
     20e:	85 1b       	sub	r24, r21
     210:	2f 1c       	adc	r2, r15
     212:	2f 1c       	adc	r2, r15
     214:	2f 1c       	adc	r2, r15
     216:	2f 1c       	adc	r2, r15
     218:	2f 1c       	adc	r2, r15
     21a:	2f 1c       	adc	r2, r15
     21c:	2f 1c       	adc	r2, r15
     21e:	8e 1b       	sub	r24, r30
     220:	2f 1c       	adc	r2, r15
     222:	2f 1c       	adc	r2, r15
     224:	2f 1c       	adc	r2, r15
     226:	2f 1c       	adc	r2, r15
     228:	2f 1c       	adc	r2, r15
     22a:	2f 1c       	adc	r2, r15
     22c:	2f 1c       	adc	r2, r15
     22e:	2f 1c       	adc	r2, r15
     230:	2f 1c       	adc	r2, r15
     232:	2f 1c       	adc	r2, r15
     234:	2f 1c       	adc	r2, r15
     236:	2f 1c       	adc	r2, r15
     238:	2f 1c       	adc	r2, r15
     23a:	2f 1c       	adc	r2, r15
     23c:	2f 1c       	adc	r2, r15
     23e:	5c 1b       	sub	r21, r28
     240:	a6 1b       	sub	r26, r22
     242:	b4 1b       	sub	r27, r20
     244:	bb 1b       	sub	r27, r27
     246:	d5 1b       	sub	r29, r21
     248:	c2 1b       	sub	r28, r18
     24a:	d5 1b       	sub	r29, r21
     24c:	d5 1b       	sub	r29, r21
     24e:	d5 1b       	sub	r29, r21
     250:	c9 1b       	sub	r28, r25
     252:	d5 1b       	sub	r29, r21
     254:	d5 1b       	sub	r29, r21
     256:	d5 1b       	sub	r29, r21
     258:	d5 1b       	sub	r29, r21
     25a:	d5 1b       	sub	r29, r21
     25c:	d5 1b       	sub	r29, r21
     25e:	d5 1b       	sub	r29, r21
     260:	cf 1b       	sub	r28, r31
     262:	d5 1b       	sub	r29, r21
     264:	d5 1b       	sub	r29, r21
     266:	d5 1b       	sub	r29, r21
     268:	d5 1b       	sub	r29, r21
     26a:	d5 1b       	sub	r29, r21
     26c:	d5 1b       	sub	r29, r21
     26e:	d5 1b       	sub	r29, r21
     270:	d5 1b       	sub	r29, r21
     272:	d5 1b       	sub	r29, r21
     274:	d5 1b       	sub	r29, r21
     276:	d5 1b       	sub	r29, r21
     278:	d5 1b       	sub	r29, r21
     27a:	d5 1b       	sub	r29, r21
     27c:	d5 1b       	sub	r29, r21
     27e:	d5 1b       	sub	r29, r21
     280:	ac 1b       	sub	r26, r28
     282:	e1 1b       	sub	r30, r17
     284:	f5 1b       	sub	r31, r21
     286:	ff 1b       	sub	r31, r31
     288:	41 1c       	adc	r4, r1
     28a:	09 1c       	adc	r0, r9
     28c:	41 1c       	adc	r4, r1
     28e:	41 1c       	adc	r4, r1
     290:	41 1c       	adc	r4, r1
     292:	13 1c       	adc	r1, r3
     294:	41 1c       	adc	r4, r1
     296:	41 1c       	adc	r4, r1
     298:	41 1c       	adc	r4, r1
     29a:	41 1c       	adc	r4, r1
     29c:	41 1c       	adc	r4, r1
     29e:	41 1c       	adc	r4, r1
     2a0:	41 1c       	adc	r4, r1
     2a2:	1c 1c       	adc	r1, r12
     2a4:	41 1c       	adc	r4, r1
     2a6:	41 1c       	adc	r4, r1
     2a8:	41 1c       	adc	r4, r1
     2aa:	41 1c       	adc	r4, r1
     2ac:	41 1c       	adc	r4, r1
     2ae:	41 1c       	adc	r4, r1
     2b0:	41 1c       	adc	r4, r1
     2b2:	41 1c       	adc	r4, r1
     2b4:	41 1c       	adc	r4, r1
     2b6:	41 1c       	adc	r4, r1
     2b8:	41 1c       	adc	r4, r1
     2ba:	41 1c       	adc	r4, r1
     2bc:	41 1c       	adc	r4, r1
     2be:	41 1c       	adc	r4, r1
     2c0:	41 1c       	adc	r4, r1
     2c2:	ea 1b       	sub	r30, r26

000002c4 <__ctors_end>:
     2c4:	11 24       	eor	r1, r1
     2c6:	1f be       	out	0x3f, r1	; 63
     2c8:	cf ef       	ldi	r28, 0xFF	; 255
     2ca:	d8 e0       	ldi	r29, 0x08	; 8
     2cc:	de bf       	out	0x3e, r29	; 62
     2ce:	cd bf       	out	0x3d, r28	; 61

000002d0 <__do_copy_data>:
     2d0:	15 e0       	ldi	r17, 0x05	; 5
     2d2:	a0 e0       	ldi	r26, 0x00	; 0
     2d4:	b1 e0       	ldi	r27, 0x01	; 1
     2d6:	ee eb       	ldi	r30, 0xBE	; 190
     2d8:	f0 e5       	ldi	r31, 0x50	; 80
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__do_copy_data+0x10>
     2dc:	05 90       	lpm	r0, Z+
     2de:	0d 92       	st	X+, r0
     2e0:	a6 3a       	cpi	r26, 0xA6	; 166
     2e2:	b1 07       	cpc	r27, r17
     2e4:	d9 f7       	brne	.-10     	; 0x2dc <__do_copy_data+0xc>

000002e6 <__do_clear_bss>:
     2e6:	25 e0       	ldi	r18, 0x05	; 5
     2e8:	a6 ea       	ldi	r26, 0xA6	; 166
     2ea:	b5 e0       	ldi	r27, 0x05	; 5
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <.do_clear_bss_start>

000002ee <.do_clear_bss_loop>:
     2ee:	1d 92       	st	X+, r1

000002f0 <.do_clear_bss_start>:
     2f0:	a8 3e       	cpi	r26, 0xE8	; 232
     2f2:	b2 07       	cpc	r27, r18
     2f4:	e1 f7       	brne	.-8      	; 0x2ee <.do_clear_bss_loop>
     2f6:	0e 94 9b 21 	call	0x4336	; 0x4336 <main>
     2fa:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <_exit>

000002fe <__bad_interrupt>:
     2fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000302 <LCD_CMD>:
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	c8 2f       	mov	r28, r24
     308:	8e e7       	ldi	r24, 0x7E	; 126
     30a:	0e 94 29 25 	call	0x4a52	; 0x4a52 <i2c_start>
     30e:	dc 2f       	mov	r29, r28
     310:	d0 7f       	andi	r29, 0xF0	; 240
     312:	8d 2f       	mov	r24, r29
     314:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     318:	8d 2f       	mov	r24, r29
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     320:	8d 2f       	mov	r24, r29
     322:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     326:	80 e1       	ldi	r24, 0x10	; 16
     328:	c8 9f       	mul	r28, r24
     32a:	e0 01       	movw	r28, r0
     32c:	11 24       	eor	r1, r1
     32e:	8c 2f       	mov	r24, r28
     330:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     334:	8c 2f       	mov	r24, r28
     336:	84 60       	ori	r24, 0x04	; 4
     338:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     33c:	8c 2f       	mov	r24, r28
     33e:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     342:	0e 94 49 25 	call	0x4a92	; 0x4a92 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     346:	87 ee       	ldi	r24, 0xE7	; 231
     348:	93 e0       	ldi	r25, 0x03	; 3
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <LCD_CMD+0x48>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_CMD+0x4e>
     350:	00 00       	nop
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <LCD_write>:
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	c8 2f       	mov	r28, r24
     360:	8e e7       	ldi	r24, 0x7E	; 126
     362:	0e 94 29 25 	call	0x4a52	; 0x4a52 <i2c_start>
     366:	1c 2f       	mov	r17, r28
     368:	10 7f       	andi	r17, 0xF0	; 240
     36a:	d1 2f       	mov	r29, r17
     36c:	d9 60       	ori	r29, 0x09	; 9
     36e:	8d 2f       	mov	r24, r29
     370:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     374:	81 2f       	mov	r24, r17
     376:	8d 60       	ori	r24, 0x0D	; 13
     378:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     37c:	8d 2f       	mov	r24, r29
     37e:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     382:	80 e1       	ldi	r24, 0x10	; 16
     384:	c8 9f       	mul	r28, r24
     386:	e0 01       	movw	r28, r0
     388:	11 24       	eor	r1, r1
     38a:	dc 2f       	mov	r29, r28
     38c:	d9 60       	ori	r29, 0x09	; 9
     38e:	8d 2f       	mov	r24, r29
     390:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     394:	8c 2f       	mov	r24, r28
     396:	8d 60       	ori	r24, 0x0D	; 13
     398:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     39c:	8d 2f       	mov	r24, r29
     39e:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     3a2:	0e 94 49 25 	call	0x4a92	; 0x4a92 <i2c_stop>
     3a6:	85 e8       	ldi	r24, 0x85	; 133
     3a8:	8a 95       	dec	r24
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_write+0x50>
     3ac:	00 00       	nop
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	08 95       	ret

000003b6 <LCD_string>:
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	66 23       	and	r22, r22
     3c0:	71 f0       	breq	.+28     	; 0x3de <LCD_string+0x28>
     3c2:	ec 01       	movw	r28, r24
     3c4:	61 50       	subi	r22, 0x01	; 1
     3c6:	06 2f       	mov	r16, r22
     3c8:	10 e0       	ldi	r17, 0x00	; 0
     3ca:	0f 5f       	subi	r16, 0xFF	; 255
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
     3ce:	08 0f       	add	r16, r24
     3d0:	19 1f       	adc	r17, r25
     3d2:	89 91       	ld	r24, Y+
     3d4:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_write>
     3d8:	c0 17       	cp	r28, r16
     3da:	d1 07       	cpc	r29, r17
     3dc:	d1 f7       	brne	.-12     	; 0x3d2 <LCD_string+0x1c>
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <LCD_init>:
     3e8:	0e 94 23 25 	call	0x4a46	; 0x4a46 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ec:	2f ef       	ldi	r18, 0xFF	; 255
     3ee:	89 ef       	ldi	r24, 0xF9	; 249
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	90 40       	sbci	r25, 0x00	; 0
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <LCD_init+0xa>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_init+0x14>
     3fc:	00 00       	nop
     3fe:	8e e7       	ldi	r24, 0x7E	; 126
     400:	0e 94 29 25 	call	0x4a52	; 0x4a52 <i2c_start>
     404:	80 e3       	ldi	r24, 0x30	; 48
     406:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     40a:	84 e3       	ldi	r24, 0x34	; 52
     40c:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     410:	80 e3       	ldi	r24, 0x30	; 48
     412:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     416:	8f e0       	ldi	r24, 0x0F	; 15
     418:	97 e2       	ldi	r25, 0x27	; 39
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     420:	00 00       	nop
     422:	84 e3       	ldi	r24, 0x34	; 52
     424:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     428:	80 e3       	ldi	r24, 0x30	; 48
     42a:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42e:	8f ee       	ldi	r24, 0xEF	; 239
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     438:	00 00       	nop
     43a:	84 e3       	ldi	r24, 0x34	; 52
     43c:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     440:	80 e3       	ldi	r24, 0x30	; 48
     442:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     446:	8f ee       	ldi	r24, 0xEF	; 239
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     450:	00 00       	nop
     452:	80 e2       	ldi	r24, 0x20	; 32
     454:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     458:	84 e2       	ldi	r24, 0x24	; 36
     45a:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     45e:	80 e2       	ldi	r24, 0x20	; 32
     460:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <i2c_write>
     464:	8f ee       	ldi	r24, 0xEF	; 239
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46e:	00 00       	nop
     470:	0e 94 49 25 	call	0x4a92	; 0x4a92 <i2c_stop>
     474:	88 e2       	ldi	r24, 0x28	; 40
     476:	0e 94 81 01 	call	0x302	; 0x302 <LCD_CMD>
     47a:	90 ea       	ldi	r25, 0xA0	; 160
     47c:	9a 95       	dec	r25
     47e:	f1 f7       	brne	.-4      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     480:	88 e0       	ldi	r24, 0x08	; 8
     482:	0e 94 81 01 	call	0x302	; 0x302 <LCD_CMD>
     486:	20 ea       	ldi	r18, 0xA0	; 160
     488:	2a 95       	dec	r18
     48a:	f1 f7       	brne	.-4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 81 01 	call	0x302	; 0x302 <LCD_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     492:	8f e0       	ldi	r24, 0x0F	; 15
     494:	97 e2       	ldi	r25, 0x27	; 39
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49c:	00 00       	nop
     49e:	86 e0       	ldi	r24, 0x06	; 6
     4a0:	0e 94 81 01 	call	0x302	; 0x302 <LCD_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a4:	90 ea       	ldi	r25, 0xA0	; 160
     4a6:	9a 95       	dec	r25
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4aa:	8c e0       	ldi	r24, 0x0C	; 12
     4ac:	0e 94 81 01 	call	0x302	; 0x302 <LCD_CMD>
     4b0:	20 ea       	ldi	r18, 0xA0	; 160
     4b2:	2a 95       	dec	r18
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b6:	08 95       	ret

000004b8 <LCD_NWL>:
     4b8:	80 ec       	ldi	r24, 0xC0	; 192
     4ba:	0e 94 81 01 	call	0x302	; 0x302 <LCD_CMD>
     4be:	08 95       	ret

000004c0 <LCD_CLEAR>:
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	0e 94 81 01 	call	0x302	; 0x302 <LCD_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c6:	8f ec       	ldi	r24, 0xCF	; 207
     4c8:	97 e0       	ldi	r25, 0x07	; 7
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <LCD_CLEAR+0xa>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <LCD_CLEAR+0x10>
     4d0:	00 00       	nop
     4d2:	08 95       	ret

000004d4 <LCD_home>:
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	0e 94 81 01 	call	0x302	; 0x302 <LCD_CMD>
     4da:	8f e9       	ldi	r24, 0x9F	; 159
     4dc:	9f e0       	ldi	r25, 0x0F	; 15
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <LCD_home+0xa>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <LCD_home+0x10>
     4e4:	00 00       	nop
     4e6:	08 95       	ret

000004e8 <LCD_custom_character>:
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	8c 01       	movw	r16, r24
     4f2:	86 2f       	mov	r24, r22
     4f4:	88 0f       	add	r24, r24
     4f6:	88 0f       	add	r24, r24
     4f8:	88 0f       	add	r24, r24
     4fa:	80 5c       	subi	r24, 0xC0	; 192
     4fc:	0e 94 81 01 	call	0x302	; 0x302 <LCD_CMD>
     500:	e8 01       	movw	r28, r16
     502:	08 5f       	subi	r16, 0xF8	; 248
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	89 91       	ld	r24, Y+
     508:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_write>
     50c:	c0 17       	cp	r28, r16
     50e:	d1 07       	cpc	r29, r17
     510:	d1 f7       	brne	.-12     	; 0x506 <LCD_custom_character+0x1e>
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	08 95       	ret

0000051c <__vector_1>:
/*		|'|_|''|_|'|___________________|```````|______			*/
/*						Init: 761ms								*/
/*																*/
/****************************************************************/
ISR (INT0_vect)
{
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	8f 93       	push	r24
	// Wait for initialize signal
	if (tel_toggle & BIT1)
     528:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <tel_toggle>
     52c:	80 ff       	sbrs	r24, 0
     52e:	15 c0       	rjmp	.+42     	; 0x55a <__vector_1+0x3e>
	{
		// initiate timer for the first time only
		if (!(tel_toggle & BIT2))
     530:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <tel_toggle>
     534:	81 fd       	sbrc	r24, 1
     536:	07 c0       	rjmp	.+14     	; 0x546 <__vector_1+0x2a>
		{
			tel_timer = 0;
     538:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <tel_timer>
			tel_toggle |= BIT2;
     53c:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <tel_toggle>
     540:	82 60       	ori	r24, 0x02	; 2
     542:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <tel_toggle>
		}
		
		// wait 752ms
		if (tel_timer > 94)	 // 94 * 8 = 752ms
     546:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <tel_timer>
     54a:	8f 35       	cpi	r24, 0x5F	; 95
     54c:	80 f1       	brcs	.+96     	; 0x5ae <__vector_1+0x92>
			tel_toggle |= BIT1;
     54e:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <tel_toggle>
     552:	81 60       	ori	r24, 0x01	; 1
     554:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <tel_toggle>
     558:	2a c0       	rjmp	.+84     	; 0x5ae <__vector_1+0x92>
	
	// Measuring routine
	else
	{
		// Check the pin is high or low
		if (tel_flg == OFF)
     55a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <tel_flg>
     55e:	81 11       	cpse	r24, r1
     560:	04 c0       	rjmp	.+8      	; 0x56a <__vector_1+0x4e>
			tel_flg = ON;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <tel_flg>
     568:	02 c0       	rjmp	.+4      	; 0x56e <__vector_1+0x52>
		else
			tel_flg = OFF;
     56a:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <tel_flg>
		
		// Measure time the pin is high
		if (tel_flg == ON)
     56e:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <tel_flg>
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	e1 f4       	brne	.+56     	; 0x5ae <__vector_1+0x92>
		{
			if (tel_timer > 10)
     576:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <tel_timer>
     57a:	8b 30       	cpi	r24, 0x0B	; 11
     57c:	18 f0       	brcs	.+6      	; 0x584 <__vector_1+0x68>
				receiver_bat = CRIT;
     57e:	84 eb       	ldi	r24, 0xB4	; 180
     580:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <receiver_bat>
			if (tel_timer > 32)
     584:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <tel_timer>
     588:	81 32       	cpi	r24, 0x21	; 33
     58a:	18 f0       	brcs	.+6      	; 0x592 <__vector_1+0x76>
				receiver_bat = LOW;
     58c:	8e eb       	ldi	r24, 0xBE	; 190
     58e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <receiver_bat>
			if (tel_timer > 56)
     592:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <tel_timer>
     596:	89 33       	cpi	r24, 0x39	; 57
     598:	18 f0       	brcs	.+6      	; 0x5a0 <__vector_1+0x84>
				receiver_bat = MID;
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <receiver_bat>
			if (tel_timer > 69)
     5a0:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <tel_timer>
     5a4:	86 34       	cpi	r24, 0x46	; 70
     5a6:	18 f0       	brcs	.+6      	; 0x5ae <__vector_1+0x92>
				receiver_bat = HIGH;
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <receiver_bat>
		}
	}
	tel_timer = 0;
     5ae:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <tel_timer>
	
}
     5b2:	8f 91       	pop	r24
     5b4:	0f 90       	pop	r0
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	0f 90       	pop	r0
     5ba:	1f 90       	pop	r1
     5bc:	18 95       	reti

000005be <init>:
/*													*/
/****************************************************/
void init()
{
	// Pin IO setting
	DDRB	= 0x2A;
     5be:	8a e2       	ldi	r24, 0x2A	; 42
     5c0:	84 b9       	out	0x04, r24	; 4
	DDRC	= 0x30;
     5c2:	80 e3       	ldi	r24, 0x30	; 48
     5c4:	87 b9       	out	0x07, r24	; 7
	DDRE	= 0x03;
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	8d b9       	out	0x0d, r24	; 13
	PORTB   = 0xC5;		// Button matrix pull up
     5ca:	85 ec       	ldi	r24, 0xC5	; 197
     5cc:	85 b9       	out	0x05, r24	; 5
	
	if ((mixing_val_3 & RF_MODE_MASK) == JF24)
     5ce:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	39 f4       	brne	.+14     	; 0x5e6 <init+0x28>
	{
		DDRD = 0xFA;
     5d8:	8a ef       	ldi	r24, 0xFA	; 250
     5da:	8a b9       	out	0x0a, r24	; 10
		
		// External interrupt setting
		// Enable external pin interrupt when using JF24 RF module for telemetry
		EICRA = (1 << ISC00);	// any change of logic
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
		EIMSK = (1 << INT0);	// using INT0
     5e2:	8d bb       	out	0x1d, r24	; 29
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <init+0x2c>
	}
	else
	{
		DDRD	= 0xFE;
     5e6:	8e ef       	ldi	r24, 0xFE	; 254
     5e8:	8a b9       	out	0x0a, r24	; 10
	}
	PORTC   = PWRDET;	// Power detect pull up
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	88 b9       	out	0x08, r24	; 8
	PORTD   = PWRTOGL;	// SW power on
     5ee:	90 e1       	ldi	r25, 0x10	; 16
     5f0:	9b b9       	out	0x0b, r25	; 11
	
	
	// Timer0 interrupt setting
	TCCR0B	= (1 << CS02);	// prescalar: 256
     5f2:	85 bd       	out	0x25, r24	; 37
	TIMSK0	= (1 << TOIE0);	// start interrupt
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	
	
	// Buzzer PWM
	// Phase Correct PWM mode - to prevent glitch
	TCCR1A  = (1 << WGM11) |
     5fa:	82 ec       	ldi	r24, 0xC2	; 194
     5fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
			  (1 << COM1A1)| (1 << COM1A0);	// OC1A non-inverting mode
	TCCR1B  = (1 << WGM13) | (1 << CS11);   // prescalar: 8
     600:	82 e1       	ldi	r24, 0x12	; 18
     602:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     606:	08 95       	ret

00000608 <model_sel>:
/*	4. Reverse										*/
/*	5. Dual rate setting							*/
/*													*/
/****************************************************/
void model_sel()
{
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
	uint8_t pre_model_addr;
	
	// Recall latest model data
	pre_model = eeprom_read_byte((uint8_t*)121);
     610:	89 e7       	ldi	r24, 0x79	; 121
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     618:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <pre_model>
	cur_model = pre_model;
     61c:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <cur_model>
	
	if (pre_model < 8)
     620:	88 30       	cpi	r24, 0x08	; 8
     622:	08 f0       	brcs	.+2      	; 0x626 <model_sel+0x1e>
     624:	75 c0       	rjmp	.+234    	; 0x710 <model_sel+0x108>
	{
		pre_model_addr = pre_model * 15 + 1;	// latest model address
		
		// Setting initializing
		trim[AILERON]  = eeprom_read_byte((const uint8_t*)pre_model_addr      );
     626:	c8 2f       	mov	r28, r24
     628:	cc 0f       	add	r28, r28
     62a:	c8 0f       	add	r28, r24
     62c:	9c 2f       	mov	r25, r28
     62e:	99 0f       	add	r25, r25
     630:	99 0f       	add	r25, r25
     632:	c9 0f       	add	r28, r25
     634:	cf 5f       	subi	r28, 0xFF	; 255
     636:	d0 e0       	ldi	r29, 0x00	; 0
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     63e:	07 eb       	ldi	r16, 0xB7	; 183
     640:	15 e0       	ldi	r17, 0x05	; 5
     642:	f8 01       	movw	r30, r16
     644:	80 83       	st	Z, r24
		trim[ELEVATOR] = eeprom_read_byte((const uint8_t*)(pre_model_addr + 1));
     646:	ce 01       	movw	r24, r28
     648:	01 96       	adiw	r24, 0x01	; 1
     64a:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     64e:	f8 01       	movw	r30, r16
     650:	81 83       	std	Z+1, r24	; 0x01
		trim[RUDDER]   = eeprom_read_byte((const uint8_t*)(pre_model_addr + 2));
     652:	ce 01       	movw	r24, r28
     654:	02 96       	adiw	r24, 0x02	; 2
     656:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     65a:	f8 01       	movw	r30, r16
     65c:	83 83       	std	Z+3, r24	; 0x03
		trim[CH5]	   = eeprom_read_byte((const uint8_t*)(pre_model_addr + 3));
     65e:	ce 01       	movw	r24, r28
     660:	03 96       	adiw	r24, 0x03	; 3
     662:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     666:	f8 01       	movw	r30, r16
     668:	84 83       	std	Z+4, r24	; 0x04
		mixing_val_1 = eeprom_read_byte((const uint8_t*)(pre_model_addr + 4));
     66a:	ce 01       	movw	r24, r28
     66c:	04 96       	adiw	r24, 0x04	; 4
     66e:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     672:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
		mixing_val_2 = eeprom_read_byte((const uint8_t*)(pre_model_addr + 5));
     676:	ce 01       	movw	r24, r28
     678:	05 96       	adiw	r24, 0x05	; 5
     67a:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     67e:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
		mixing_val_3 = eeprom_read_byte((const uint8_t*)(pre_model_addr + 6));
     682:	ce 01       	movw	r24, r28
     684:	06 96       	adiw	r24, 0x06	; 6
     686:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     68a:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <mixing_val_3>
		sw[0] = eeprom_read_byte((const uint8_t*)(pre_model_addr + 7));
     68e:	ce 01       	movw	r24, r28
     690:	07 96       	adiw	r24, 0x07	; 7
     692:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     696:	0d ed       	ldi	r16, 0xDD	; 221
     698:	15 e0       	ldi	r17, 0x05	; 5
     69a:	f8 01       	movw	r30, r16
     69c:	80 83       	st	Z, r24
		sw[1] = eeprom_read_byte((const uint8_t*)(pre_model_addr + 8));
     69e:	ce 01       	movw	r24, r28
     6a0:	08 96       	adiw	r24, 0x08	; 8
     6a2:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     6a6:	f8 01       	movw	r30, r16
     6a8:	81 83       	std	Z+1, r24	; 0x01
		sw[2] = eeprom_read_byte((const uint8_t*)(pre_model_addr + 9));
     6aa:	ce 01       	movw	r24, r28
     6ac:	09 96       	adiw	r24, 0x09	; 9
     6ae:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     6b2:	f8 01       	movw	r30, r16
     6b4:	82 83       	std	Z+2, r24	; 0x02
		sw[3] = eeprom_read_byte((const uint8_t*)(pre_model_addr + 10));
     6b6:	ce 01       	movw	r24, r28
     6b8:	0a 96       	adiw	r24, 0x0a	; 10
     6ba:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     6be:	f8 01       	movw	r30, r16
     6c0:	83 83       	std	Z+3, r24	; 0x03
		sw[4] = eeprom_read_byte((const uint8_t*)(pre_model_addr + 11));
     6c2:	ce 01       	movw	r24, r28
     6c4:	0b 96       	adiw	r24, 0x0b	; 11
     6c6:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     6ca:	f8 01       	movw	r30, r16
     6cc:	84 83       	std	Z+4, r24	; 0x04
		sw[5] = eeprom_read_byte((const uint8_t*)(pre_model_addr + 12));
     6ce:	ce 01       	movw	r24, r28
     6d0:	0c 96       	adiw	r24, 0x0c	; 12
     6d2:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     6d6:	f8 01       	movw	r30, r16
     6d8:	85 83       	std	Z+5, r24	; 0x05
		sw[6] = eeprom_read_byte((const uint8_t*)(pre_model_addr + 13));
     6da:	ce 01       	movw	r24, r28
     6dc:	0d 96       	adiw	r24, 0x0d	; 13
     6de:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     6e2:	f8 01       	movw	r30, r16
     6e4:	86 83       	std	Z+6, r24	; 0x06
		sw[7] = eeprom_read_byte((const uint8_t*)(pre_model_addr + 14));
     6e6:	ce 01       	movw	r24, r28
     6e8:	0e 96       	adiw	r24, 0x0e	; 14
     6ea:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     6ee:	f8 01       	movw	r30, r16
     6f0:	87 83       	std	Z+7, r24	; 0x07
		
		buzzer_volume= eeprom_read_byte((const uint8_t*)122);
     6f2:	8a e7       	ldi	r24, 0x7A	; 122
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
     6fa:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <buzzer_volume>
		runtime_set = eeprom_read_word((const uint16_t*)123);
     6fe:	8b e7       	ldi	r24, 0x7B	; 123
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 2f 28 	call	0x505e	; 0x505e <eeprom_read_word>
     706:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <runtime_set+0x1>
     70a:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <runtime_set>
     70e:	5b c0       	rjmp	.+182    	; 0x7c6 <model_sel+0x1be>
	
	// Initial EEPROM
	// Only used when new firmware is downloaded
	else
	{
		eeprom_update_byte((uint8_t*)1, 0x00);	// trim[AILERON] = 0
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)2, 0x00);	// trim[ELEVATOR] = 0
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)3, 0x00);	// trim[RUDDER] = 0
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	83 e0       	ldi	r24, 0x03	; 3
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)4, 0x00);	// trim[CH5] = 0
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	84 e0       	ldi	r24, 0x04	; 4
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)5, 0x00);	// mixing_val_1 = 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	85 e0       	ldi	r24, 0x05	; 5
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)6, 0x00);	// mixing_val_2 = 0
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	86 e0       	ldi	r24, 0x06	; 6
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)7, UART);	// mixing_val_3 = UART mode
     74c:	63 e0       	ldi	r22, 0x03	; 3
     74e:	87 e0       	ldi	r24, 0x07	; 7
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)8, 0x00);	// sw[0]
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	88 e0       	ldi	r24, 0x08	; 8
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)9, 0x00);	// sw[1]
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	89 e0       	ldi	r24, 0x09	; 9
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)10, 0x00);	// sw[2]
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	8a e0       	ldi	r24, 0x0A	; 10
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)11, 0x00);	// sw[3]
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	8b e0       	ldi	r24, 0x0B	; 11
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)12, 0x00);	// sw[4]
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	8c e0       	ldi	r24, 0x0C	; 12
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)13, 0x00);	// sw[5]
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	8d e0       	ldi	r24, 0x0D	; 13
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)14, 0x00);	// sw[6]
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	8e e0       	ldi	r24, 0x0E	; 14
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)15, 0x00);	// sw[7]
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	8f e0       	ldi	r24, 0x0F	; 15
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		
		eeprom_update_byte((uint8_t*)121, 0x00);	  // Set model #0 current model
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	89 e7       	ldi	r24, 0x79	; 121
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_byte((uint8_t*)122, 50);		  // Buzzer volume
     7b0:	62 e3       	ldi	r22, 0x32	; 50
     7b2:	8a e7       	ldi	r24, 0x7A	; 122
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
		eeprom_update_word((uint16_t*)123, RUNTIME15); // RUNTIMR 15 min
     7ba:	64 e8       	ldi	r22, 0x84	; 132
     7bc:	73 e0       	ldi	r23, 0x03	; 3
     7be:	8b e7       	ldi	r24, 0x7B	; 123
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 47 28 	call	0x508e	; 0x508e <eeprom_update_word>
		
	}
	
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <stick_read>:
/*													*/
/****************************************************/
void stick_read()
{
	// Aileron
	ADMUX = (1 << REFS0) | (1 << ADLAR) | 1;			// external vref, choose adc pin. read only 8 bit
     7d0:	81 e6       	ldi	r24, 0x61	; 97
     7d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (6 << ADPS0);	// start adc read, adc prescalar 64
     7d6:	86 ec       	ldi	r24, 0xC6	; 198
     7d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	while (ADCSRA & (1 << ADSC));
     7dc:	ea e7       	ldi	r30, 0x7A	; 122
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	86 fd       	sbrc	r24, 6
     7e4:	fd cf       	rjmp	.-6      	; 0x7e0 <stick_read+0x10>
	channel[AILERON] = ADCH;
     7e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     7ea:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <channel>
	
	// Elevator
	ADMUX = (1 << REFS0) | (1 << ADLAR) | 7;
     7ee:	87 e6       	ldi	r24, 0x67	; 103
     7f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (6 << ADPS0);
     7f4:	86 ec       	ldi	r24, 0xC6	; 198
     7f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	while (ADCSRA & (1 << ADSC));
     7fa:	ea e7       	ldi	r30, 0x7A	; 122
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	86 fd       	sbrc	r24, 6
     802:	fd cf       	rjmp	.-6      	; 0x7fe <stick_read+0x2e>
	channel[ELEVATOR] = ADCH;
     804:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     808:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <channel+0x1>
	
	// Throttle
	ADMUX = (1 << REFS0) | (1 << ADLAR) | 3;
     80c:	83 e6       	ldi	r24, 0x63	; 99
     80e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (6 << ADPS0);
     812:	86 ec       	ldi	r24, 0xC6	; 198
     814:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	while (ADCSRA & (1 << ADSC));
     818:	ea e7       	ldi	r30, 0x7A	; 122
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	86 fd       	sbrc	r24, 6
     820:	fd cf       	rjmp	.-6      	; 0x81c <stick_read+0x4c>
	channel[THROTTLE] = ADCH;
     822:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     826:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <channel+0x2>
	
	// Rudder
	ADMUX = (1 << REFS0) | (1 << ADLAR) | 0;
     82a:	80 e6       	ldi	r24, 0x60	; 96
     82c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (6 << ADPS0);
     830:	86 ec       	ldi	r24, 0xC6	; 198
     832:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	while (ADCSRA & (1 << ADSC));
     836:	ea e7       	ldi	r30, 0x7A	; 122
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	86 fd       	sbrc	r24, 6
     83e:	fd cf       	rjmp	.-6      	; 0x83a <stick_read+0x6a>
	channel[RUDDER] = ADCH;
     840:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     844:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <channel+0x3>
     848:	08 95       	ret

0000084a <trim_read>:
	
	
}
void trim_read() 
{
	PORTD |= PO3;
     84a:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD &= ~PO1;
     84c:	5d 98       	cbi	0x0b, 5	; 11
	PORTE |= PO2|PO4;
     84e:	8e b1       	in	r24, 0x0e	; 14
     850:	83 60       	ori	r24, 0x03	; 3
     852:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     854:	20 ea       	ldi	r18, 0xA0	; 160
     856:	2a 95       	dec	r18
     858:	f1 f7       	brne	.-4      	; 0x856 <trim_read+0xc>
	_delay_us(60);
	
	////////// CH1 (Rudder) //////////////////////////////////////////////////
	// CH1 (Rudder) trim -
	if (!(PINB & PI1))
     85a:	18 99       	sbic	0x03, 0	; 3
     85c:	23 c0       	rjmp	.+70     	; 0x8a4 <trim_read+0x5a>
	{
		// buzzer frequency
		if (trim[RUDDER] != 1)
     85e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <trim+0x3>
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	59 f0       	breq	.+22     	; 0x87c <trim_read+0x32>
			buzzer_freq = 1000 + ((trim[RUDDER]-1)<<4);
     866:	20 e1       	ldi	r18, 0x10	; 16
     868:	82 02       	muls	r24, r18
     86a:	c0 01       	movw	r24, r0
     86c:	11 24       	eor	r1, r1
     86e:	88 52       	subi	r24, 0x28	; 40
     870:	9c 4f       	sbci	r25, 0xFC	; 252
     872:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     876:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
     87a:	06 c0       	rjmp	.+12     	; 0x888 <trim_read+0x3e>
		else
			buzzer_freq = 3000;	// if trim is 0, high pitch sound
     87c:	88 eb       	ldi	r24, 0xB8	; 184
     87e:	9b e0       	ldi	r25, 0x0B	; 11
     880:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     884:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
		
		buzzer_setting[PERIOD]= 15;
     888:	eb ea       	ldi	r30, 0xAB	; 171
     88a:	f5 e0       	ldi	r31, 0x05	; 5
     88c:	8f e0       	ldi	r24, 0x0F	; 15
     88e:	80 83       	st	Z, r24
		if (!(buzzer_setting[SETTING] & STAT))
     890:	81 81       	ldd	r24, Z+1	; 0x01
     892:	85 fd       	sbrc	r24, 5
     894:	03 c0       	rjmp	.+6      	; 0x89c <trim_read+0x52>
			buzzer_setting[SETTING] |= BUZZER_SET|STAT;
     896:	88 62       	ori	r24, 0x28	; 40
     898:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
		
		button_tog[0] = ON;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <button_tog>
     8a2:	12 c0       	rjmp	.+36     	; 0x8c8 <trim_read+0x7e>
	}
	else if ((PINB & PI1) && (button_tog[0] == ON))
     8a4:	18 9b       	sbis	0x03, 0	; 3
     8a6:	10 c0       	rjmp	.+32     	; 0x8c8 <trim_read+0x7e>
     8a8:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <button_tog>
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	61 f4       	brne	.+24     	; 0x8c8 <trim_read+0x7e>
	{
		// buzzer reset
		buzzer_setting[SETTING] &= ~STAT;	// reset STAT for single input
     8b0:	eb ea       	ldi	r30, 0xAB	; 171
     8b2:	f5 e0       	ldi	r31, 0x05	; 5
     8b4:	81 81       	ldd	r24, Z+1	; 0x01
     8b6:	8f 7d       	andi	r24, 0xDF	; 223
     8b8:	81 83       	std	Z+1, r24	; 0x01
		
		trim[RUDDER]--;
     8ba:	e7 eb       	ldi	r30, 0xB7	; 183
     8bc:	f5 e0       	ldi	r31, 0x05	; 5
     8be:	83 81       	ldd	r24, Z+3	; 0x03
     8c0:	81 50       	subi	r24, 0x01	; 1
     8c2:	83 83       	std	Z+3, r24	; 0x03
		button_tog[0] = OFF;
     8c4:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <button_tog>
	}
	
	// CH1 (Rudder) trim +
	if (!(PINB & PI2))
     8c8:	1a 99       	sbic	0x03, 2	; 3
     8ca:	23 c0       	rjmp	.+70     	; 0x912 <__stack+0x13>
	{
		// buzzer frequency
		if (trim[RUDDER] != -1)
     8cc:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <trim+0x3>
     8d0:	8f 3f       	cpi	r24, 0xFF	; 255
     8d2:	59 f0       	breq	.+22     	; 0x8ea <trim_read+0xa0>
			buzzer_freq = 1000 + ((trim[RUDDER]+1)<<4);
     8d4:	20 e1       	ldi	r18, 0x10	; 16
     8d6:	82 02       	muls	r24, r18
     8d8:	c0 01       	movw	r24, r0
     8da:	11 24       	eor	r1, r1
     8dc:	88 50       	subi	r24, 0x08	; 8
     8de:	9c 4f       	sbci	r25, 0xFC	; 252
     8e0:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     8e4:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
     8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <trim_read+0xac>
		else
			buzzer_freq = 3000;	// if trim is 0, high pitch sound
     8ea:	88 eb       	ldi	r24, 0xB8	; 184
     8ec:	9b e0       	ldi	r25, 0x0B	; 11
     8ee:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     8f2:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
		
		buzzer_setting[PERIOD]= 15;
     8f6:	eb ea       	ldi	r30, 0xAB	; 171
     8f8:	f5 e0       	ldi	r31, 0x05	; 5
     8fa:	8f e0       	ldi	r24, 0x0F	; 15
     8fc:	80 83       	st	Z, r24
		if (!(buzzer_setting[SETTING] & STAT))
     8fe:	81 81       	ldd	r24, Z+1	; 0x01
     900:	85 fd       	sbrc	r24, 5
     902:	03 c0       	rjmp	.+6      	; 0x90a <__stack+0xb>
			buzzer_setting[SETTING] |= BUZZER_SET|STAT;
     904:	88 62       	ori	r24, 0x28	; 40
     906:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
		
		button_tog[1] = ON;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <button_tog+0x1>
     910:	12 c0       	rjmp	.+36     	; 0x936 <__stack+0x37>
	}
	else if ((PINB & PI2) && (button_tog[1] == ON))
     912:	1a 9b       	sbis	0x03, 2	; 3
     914:	10 c0       	rjmp	.+32     	; 0x936 <__stack+0x37>
     916:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <button_tog+0x1>
     91a:	81 30       	cpi	r24, 0x01	; 1
     91c:	61 f4       	brne	.+24     	; 0x936 <__stack+0x37>
	{
		// buzzer reset
		buzzer_setting[SETTING] &= ~STAT;	// reset STAT for single input
     91e:	eb ea       	ldi	r30, 0xAB	; 171
     920:	f5 e0       	ldi	r31, 0x05	; 5
     922:	81 81       	ldd	r24, Z+1	; 0x01
     924:	8f 7d       	andi	r24, 0xDF	; 223
     926:	81 83       	std	Z+1, r24	; 0x01
		
		trim[RUDDER]++;
     928:	e7 eb       	ldi	r30, 0xB7	; 183
     92a:	f5 e0       	ldi	r31, 0x05	; 5
     92c:	83 81       	ldd	r24, Z+3	; 0x03
     92e:	8f 5f       	subi	r24, 0xFF	; 255
     930:	83 83       	std	Z+3, r24	; 0x03
		button_tog[1] = OFF;
     932:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <button_tog+0x1>
	}
	
	
	////////// CH2 (Elevator) ////////////////////////////////////////////////
	// CH2 (Elevator) trim-
	if (!(PINB & PI3))
     936:	1f 99       	sbic	0x03, 7	; 3
     938:	23 c0       	rjmp	.+70     	; 0x980 <__stack+0x81>
	{
		// buzzer frequency
		if (trim[ELEVATOR] != 1)
     93a:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <trim+0x1>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	59 f0       	breq	.+22     	; 0x958 <__stack+0x59>
			buzzer_freq = 1000 + ((trim[ELEVATOR]-1)<<4);
     942:	20 e1       	ldi	r18, 0x10	; 16
     944:	82 02       	muls	r24, r18
     946:	c0 01       	movw	r24, r0
     948:	11 24       	eor	r1, r1
     94a:	88 52       	subi	r24, 0x28	; 40
     94c:	9c 4f       	sbci	r25, 0xFC	; 252
     94e:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     952:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
     956:	06 c0       	rjmp	.+12     	; 0x964 <__stack+0x65>
		else
			buzzer_freq = 3000;	// if trim is 0, high pitch sound
     958:	88 eb       	ldi	r24, 0xB8	; 184
     95a:	9b e0       	ldi	r25, 0x0B	; 11
     95c:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     960:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
		
		buzzer_setting[PERIOD]= 15;
     964:	eb ea       	ldi	r30, 0xAB	; 171
     966:	f5 e0       	ldi	r31, 0x05	; 5
     968:	8f e0       	ldi	r24, 0x0F	; 15
     96a:	80 83       	st	Z, r24
		if (!(buzzer_setting[SETTING] & STAT))
     96c:	81 81       	ldd	r24, Z+1	; 0x01
     96e:	85 fd       	sbrc	r24, 5
     970:	03 c0       	rjmp	.+6      	; 0x978 <__stack+0x79>
			buzzer_setting[SETTING] |= BUZZER_SET|STAT;
     972:	88 62       	ori	r24, 0x28	; 40
     974:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
		
		button_tog[2] = ON;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <button_tog+0x2>
     97e:	12 c0       	rjmp	.+36     	; 0x9a4 <__stack+0xa5>
	}
	else if ((PINB & PI3) && (button_tog[2] == ON))
     980:	1f 9b       	sbis	0x03, 7	; 3
     982:	10 c0       	rjmp	.+32     	; 0x9a4 <__stack+0xa5>
     984:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <button_tog+0x2>
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	61 f4       	brne	.+24     	; 0x9a4 <__stack+0xa5>
	{
		// buzzer reset
		buzzer_setting[SETTING] &= ~STAT;	// reset STAT for single input
     98c:	eb ea       	ldi	r30, 0xAB	; 171
     98e:	f5 e0       	ldi	r31, 0x05	; 5
     990:	81 81       	ldd	r24, Z+1	; 0x01
     992:	8f 7d       	andi	r24, 0xDF	; 223
     994:	81 83       	std	Z+1, r24	; 0x01
		
		trim[ELEVATOR]--;
     996:	e7 eb       	ldi	r30, 0xB7	; 183
     998:	f5 e0       	ldi	r31, 0x05	; 5
     99a:	81 81       	ldd	r24, Z+1	; 0x01
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	81 83       	std	Z+1, r24	; 0x01
		button_tog[2] = OFF;
     9a0:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <button_tog+0x2>
	}
	
	// CH2 (Elevator) trim+
	if (!(PINB & PI4))
     9a4:	1e 99       	sbic	0x03, 6	; 3
     9a6:	23 c0       	rjmp	.+70     	; 0x9ee <__stack+0xef>
	{
		// buzzer frequency
		if (trim[ELEVATOR] != -1)
     9a8:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <trim+0x1>
     9ac:	8f 3f       	cpi	r24, 0xFF	; 255
     9ae:	59 f0       	breq	.+22     	; 0x9c6 <__stack+0xc7>
			buzzer_freq = 1000 + ((trim[ELEVATOR]+1)<<4);
     9b0:	20 e1       	ldi	r18, 0x10	; 16
     9b2:	82 02       	muls	r24, r18
     9b4:	c0 01       	movw	r24, r0
     9b6:	11 24       	eor	r1, r1
     9b8:	88 50       	subi	r24, 0x08	; 8
     9ba:	9c 4f       	sbci	r25, 0xFC	; 252
     9bc:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     9c0:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
     9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <__stack+0xd3>
		else
			buzzer_freq = 3000;	// if trim is 0, high pitch sound
     9c6:	88 eb       	ldi	r24, 0xB8	; 184
     9c8:	9b e0       	ldi	r25, 0x0B	; 11
     9ca:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     9ce:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
		
		buzzer_setting[PERIOD]= 15;
     9d2:	eb ea       	ldi	r30, 0xAB	; 171
     9d4:	f5 e0       	ldi	r31, 0x05	; 5
     9d6:	8f e0       	ldi	r24, 0x0F	; 15
     9d8:	80 83       	st	Z, r24
		if (!(buzzer_setting[SETTING] & STAT))
     9da:	81 81       	ldd	r24, Z+1	; 0x01
     9dc:	85 fd       	sbrc	r24, 5
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <__stack+0xe7>
			buzzer_setting[SETTING] |= BUZZER_SET|STAT;
     9e0:	88 62       	ori	r24, 0x28	; 40
     9e2:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
		
		button_tog[3] = ON;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <button_tog+0x3>
     9ec:	12 c0       	rjmp	.+36     	; 0xa12 <__stack+0x113>
	}
	else if ((PINB & PI4) && (button_tog[3] == ON))
     9ee:	1e 9b       	sbis	0x03, 6	; 3
     9f0:	10 c0       	rjmp	.+32     	; 0xa12 <__stack+0x113>
     9f2:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <button_tog+0x3>
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	61 f4       	brne	.+24     	; 0xa12 <__stack+0x113>
	{
		// buzzer reset
		buzzer_setting[SETTING] &= ~STAT;	// reset STAT for single input
     9fa:	eb ea       	ldi	r30, 0xAB	; 171
     9fc:	f5 e0       	ldi	r31, 0x05	; 5
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	8f 7d       	andi	r24, 0xDF	; 223
     a02:	81 83       	std	Z+1, r24	; 0x01
		
		trim[ELEVATOR]++;
     a04:	e7 eb       	ldi	r30, 0xB7	; 183
     a06:	f5 e0       	ldi	r31, 0x05	; 5
     a08:	81 81       	ldd	r24, Z+1	; 0x01
     a0a:	8f 5f       	subi	r24, 0xFF	; 255
     a0c:	81 83       	std	Z+1, r24	; 0x01
		button_tog[3] = OFF;
     a0e:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <button_tog+0x3>
	}
	
	
	PORTD |= PO1|PO3;
     a12:	8b b1       	in	r24, 0x0b	; 11
     a14:	80 6a       	ori	r24, 0xA0	; 160
     a16:	8b b9       	out	0x0b, r24	; 11
	PORTE &= ~PO2;
     a18:	70 98       	cbi	0x0e, 0	; 14
	PORTE |= PO4;
     a1a:	71 9a       	sbi	0x0e, 1	; 14
     a1c:	80 ea       	ldi	r24, 0xA0	; 160
     a1e:	8a 95       	dec	r24
     a20:	f1 f7       	brne	.-4      	; 0xa1e <__stack+0x11f>
	_delay_us(60);
	
	////////// CH3 (Aileron) /////////////////////////////////////////////////
	// CH3 (Aileron) trim -
	if (!(PINB & PI1))
     a22:	18 99       	sbic	0x03, 0	; 3
     a24:	23 c0       	rjmp	.+70     	; 0xa6c <__stack+0x16d>
	{
		// buzzer frequency
		if (trim[AILERON] != 1)
     a26:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <trim>
     a2a:	81 30       	cpi	r24, 0x01	; 1
     a2c:	59 f0       	breq	.+22     	; 0xa44 <__stack+0x145>
			buzzer_freq = 1000 + ((trim[AILERON]-1)<<4);
     a2e:	20 e1       	ldi	r18, 0x10	; 16
     a30:	82 02       	muls	r24, r18
     a32:	c0 01       	movw	r24, r0
     a34:	11 24       	eor	r1, r1
     a36:	88 52       	subi	r24, 0x28	; 40
     a38:	9c 4f       	sbci	r25, 0xFC	; 252
     a3a:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     a3e:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
     a42:	06 c0       	rjmp	.+12     	; 0xa50 <__stack+0x151>
		else
			buzzer_freq = 3000;	// if trim is 0, high pitch sound
     a44:	88 eb       	ldi	r24, 0xB8	; 184
     a46:	9b e0       	ldi	r25, 0x0B	; 11
     a48:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     a4c:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
		
		buzzer_setting[PERIOD]= 15;
     a50:	eb ea       	ldi	r30, 0xAB	; 171
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	8f e0       	ldi	r24, 0x0F	; 15
     a56:	80 83       	st	Z, r24
		if (!(buzzer_setting[SETTING] & STAT))
     a58:	81 81       	ldd	r24, Z+1	; 0x01
     a5a:	85 fd       	sbrc	r24, 5
     a5c:	03 c0       	rjmp	.+6      	; 0xa64 <__stack+0x165>
			buzzer_setting[SETTING] |= BUZZER_SET|STAT;
     a5e:	88 62       	ori	r24, 0x28	; 40
     a60:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
		
		button_tog[4] = ON;
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <button_tog+0x4>
     a6a:	12 c0       	rjmp	.+36     	; 0xa90 <__stack+0x191>
	}
	else if ((PINB & PI1) && (button_tog[4] == ON))
     a6c:	18 9b       	sbis	0x03, 0	; 3
     a6e:	10 c0       	rjmp	.+32     	; 0xa90 <__stack+0x191>
     a70:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <button_tog+0x4>
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	61 f4       	brne	.+24     	; 0xa90 <__stack+0x191>
	{
		// buzzer reset
		buzzer_setting[SETTING] &= ~STAT;	// reset STAT for single input
     a78:	eb ea       	ldi	r30, 0xAB	; 171
     a7a:	f5 e0       	ldi	r31, 0x05	; 5
     a7c:	81 81       	ldd	r24, Z+1	; 0x01
     a7e:	8f 7d       	andi	r24, 0xDF	; 223
     a80:	81 83       	std	Z+1, r24	; 0x01
		
		trim[AILERON]--;
     a82:	e7 eb       	ldi	r30, 0xB7	; 183
     a84:	f5 e0       	ldi	r31, 0x05	; 5
     a86:	80 81       	ld	r24, Z
     a88:	81 50       	subi	r24, 0x01	; 1
     a8a:	80 83       	st	Z, r24
		button_tog[4] = OFF;
     a8c:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <button_tog+0x4>
	}
	
	// CH2 (Aileron) trim +
	if (!(PINB & PI2))
     a90:	1a 99       	sbic	0x03, 2	; 3
     a92:	23 c0       	rjmp	.+70     	; 0xada <__stack+0x1db>
	{
		// buzzer frequency
		if (trim[AILERON] != -1)
     a94:	80 91 b7 05 	lds	r24, 0x05B7	; 0x8005b7 <trim>
     a98:	8f 3f       	cpi	r24, 0xFF	; 255
     a9a:	59 f0       	breq	.+22     	; 0xab2 <__stack+0x1b3>
			buzzer_freq = 1000 + ((trim[AILERON]+1)<<4);
     a9c:	20 e1       	ldi	r18, 0x10	; 16
     a9e:	82 02       	muls	r24, r18
     aa0:	c0 01       	movw	r24, r0
     aa2:	11 24       	eor	r1, r1
     aa4:	88 50       	subi	r24, 0x08	; 8
     aa6:	9c 4f       	sbci	r25, 0xFC	; 252
     aa8:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     aac:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
     ab0:	06 c0       	rjmp	.+12     	; 0xabe <__stack+0x1bf>
		else
			buzzer_freq = 3000;	// if trim is 0, high pitch sound
     ab2:	88 eb       	ldi	r24, 0xB8	; 184
     ab4:	9b e0       	ldi	r25, 0x0B	; 11
     ab6:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     aba:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
		
		buzzer_setting[PERIOD]= 15;
     abe:	eb ea       	ldi	r30, 0xAB	; 171
     ac0:	f5 e0       	ldi	r31, 0x05	; 5
     ac2:	8f e0       	ldi	r24, 0x0F	; 15
     ac4:	80 83       	st	Z, r24
		if (!(buzzer_setting[SETTING] & STAT))
     ac6:	81 81       	ldd	r24, Z+1	; 0x01
     ac8:	85 fd       	sbrc	r24, 5
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <__stack+0x1d3>
			buzzer_setting[SETTING] |= BUZZER_SET|STAT;
     acc:	88 62       	ori	r24, 0x28	; 40
     ace:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
		
		button_tog[5] = ON;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <button_tog+0x5>
     ad8:	12 c0       	rjmp	.+36     	; 0xafe <__stack+0x1ff>
	}
	else if ((PINB & PI2) && (button_tog[5] == ON))
     ada:	1a 9b       	sbis	0x03, 2	; 3
     adc:	10 c0       	rjmp	.+32     	; 0xafe <__stack+0x1ff>
     ade:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <button_tog+0x5>
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	61 f4       	brne	.+24     	; 0xafe <__stack+0x1ff>
	{
		// buzzer reset
		buzzer_setting[SETTING] &= ~STAT;	// reset STAT for single input
     ae6:	eb ea       	ldi	r30, 0xAB	; 171
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	8f 7d       	andi	r24, 0xDF	; 223
     aee:	81 83       	std	Z+1, r24	; 0x01
		
		trim[AILERON]++;
     af0:	e7 eb       	ldi	r30, 0xB7	; 183
     af2:	f5 e0       	ldi	r31, 0x05	; 5
     af4:	80 81       	ld	r24, Z
     af6:	8f 5f       	subi	r24, 0xFF	; 255
     af8:	80 83       	st	Z, r24
		button_tog[5] = OFF;
     afa:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <button_tog+0x5>
	}
	
	PORTD |= PO1|PO3;
     afe:	8b b1       	in	r24, 0x0b	; 11
     b00:	80 6a       	ori	r24, 0xA0	; 160
     b02:	8b b9       	out	0x0b, r24	; 11
	PORTE |= PO2|PO4;
     b04:	8e b1       	in	r24, 0x0e	; 14
     b06:	83 60       	ori	r24, 0x03	; 3
     b08:	8e b9       	out	0x0e, r24	; 14
     b0a:	08 95       	ret

00000b0c <switch_read>:
}
void switch_read()
{
	PORTD |= PO1;
     b0c:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~PO3;
     b0e:	5f 98       	cbi	0x0b, 7	; 11
	PORTE |= PO2|PO4;
     b10:	8e b1       	in	r24, 0x0e	; 14
     b12:	83 60       	ori	r24, 0x03	; 3
     b14:	8e b9       	out	0x0e, r24	; 14
     b16:	80 ea       	ldi	r24, 0xA0	; 160
     b18:	8a 95       	dec	r24
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <switch_read+0xc>
	_delay_us(60);
	
	// SW1
	if (PINB & PI4)	switch_val &= ~SW1;
     b1c:	1e 9b       	sbis	0x03, 6	; 3
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <switch_read+0x20>
     b20:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     b24:	8e 7f       	andi	r24, 0xFE	; 254
     b26:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
     b2a:	05 c0       	rjmp	.+10     	; 0xb36 <switch_read+0x2a>
	else			switch_val |= SW1;
     b2c:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     b30:	81 60       	ori	r24, 0x01	; 1
     b32:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
	// SW2
	if (PINB & PI3)	switch_val &= ~SW2;
     b36:	1f 9b       	sbis	0x03, 7	; 3
     b38:	06 c0       	rjmp	.+12     	; 0xb46 <switch_read+0x3a>
     b3a:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     b3e:	8d 7f       	andi	r24, 0xFD	; 253
     b40:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
     b44:	05 c0       	rjmp	.+10     	; 0xb50 <switch_read+0x44>
	else			switch_val |= SW2;
     b46:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     b4a:	82 60       	ori	r24, 0x02	; 2
     b4c:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
	// SW3
	if (PINB & PI1)	switch_val &= ~SW3;
     b50:	18 9b       	sbis	0x03, 0	; 3
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <switch_read+0x54>
     b54:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     b58:	8b 7f       	andi	r24, 0xFB	; 251
     b5a:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <switch_read+0x5e>
	else			switch_val |= SW3;
     b60:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     b64:	84 60       	ori	r24, 0x04	; 4
     b66:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
	// SW4
	if (PINB & PI2)	switch_val &= ~SW4;
     b6a:	1a 9b       	sbis	0x03, 2	; 3
     b6c:	06 c0       	rjmp	.+12     	; 0xb7a <switch_read+0x6e>
     b6e:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     b72:	87 7f       	andi	r24, 0xF7	; 247
     b74:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <switch_read+0x78>
	else			switch_val |= SW4;
     b7a:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     b7e:	88 60       	ori	r24, 0x08	; 8
     b80:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
	
	PORTD |= PO1|PO2|PO3;
     b84:	8b b1       	in	r24, 0x0b	; 11
     b86:	81 6a       	ori	r24, 0xA1	; 161
     b88:	8b b9       	out	0x0b, r24	; 11
	PORTE &= ~PO4;
     b8a:	71 98       	cbi	0x0e, 1	; 14
     b8c:	80 ea       	ldi	r24, 0xA0	; 160
     b8e:	8a 95       	dec	r24
     b90:	f1 f7       	brne	.-4      	; 0xb8e <switch_read+0x82>
	_delay_us(60);
	
	// SW5
	if (PINB & PI4)	switch_val &= ~SW5;
     b92:	1e 9b       	sbis	0x03, 6	; 3
     b94:	06 c0       	rjmp	.+12     	; 0xba2 <switch_read+0x96>
     b96:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     b9a:	8f 7e       	andi	r24, 0xEF	; 239
     b9c:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <switch_read+0xa0>
	else			switch_val |= SW5;
     ba2:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     ba6:	80 61       	ori	r24, 0x10	; 16
     ba8:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
	// SW6
	if (PINB & PI3)	switch_val &= ~SW6;
     bac:	1f 9b       	sbis	0x03, 7	; 3
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <switch_read+0xb0>
     bb0:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     bb4:	8f 7d       	andi	r24, 0xDF	; 223
     bb6:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <switch_read+0xba>
	else			switch_val |= SW6;
     bbc:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     bc0:	80 62       	ori	r24, 0x20	; 32
     bc2:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
	// SW7
	if (PINB & PI2)	switch_val &= ~SW7;
     bc6:	1a 9b       	sbis	0x03, 2	; 3
     bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <switch_read+0xca>
     bca:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     bce:	8f 7b       	andi	r24, 0xBF	; 191
     bd0:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
     bd4:	05 c0       	rjmp	.+10     	; 0xbe0 <switch_read+0xd4>
	else			switch_val |= SW7;
     bd6:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     bda:	80 64       	ori	r24, 0x40	; 64
     bdc:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
	// SW8
	if (PINB & PI1)	switch_val &= ~SW8;
     be0:	18 9b       	sbis	0x03, 0	; 3
     be2:	06 c0       	rjmp	.+12     	; 0xbf0 <switch_read+0xe4>
     be4:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     be8:	8f 77       	andi	r24, 0x7F	; 127
     bea:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
     bee:	05 c0       	rjmp	.+10     	; 0xbfa <switch_read+0xee>
	else			switch_val |= SW8;
     bf0:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     bf4:	80 68       	ori	r24, 0x80	; 128
     bf6:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <switch_val>
	
	PORTD |= PO1|PO2|PO3;
     bfa:	8b b1       	in	r24, 0x0b	; 11
     bfc:	81 6a       	ori	r24, 0xA1	; 161
     bfe:	8b b9       	out	0x0b, r24	; 11
     c00:	08 95       	ret

00000c02 <menu_read>:
	
}
uint8_t menu_read()
{
	PORTD |= PO1|PO3;
     c02:	8b b1       	in	r24, 0x0b	; 11
     c04:	80 6a       	ori	r24, 0xA0	; 160
     c06:	8b b9       	out	0x0b, r24	; 11
	PORTE &= ~PO2;
     c08:	70 98       	cbi	0x0e, 0	; 14
	PORTE |= PO4;
     c0a:	71 9a       	sbi	0x0e, 1	; 14
     c0c:	80 ea       	ldi	r24, 0xA0	; 160
     c0e:	8a 95       	dec	r24
     c10:	f1 f7       	brne	.-4      	; 0xc0e <menu_read+0xc>
	_delay_us(60);
	
	////////// Multi-input /////////////////////////////////////////
	if (!(PINB & PI3) && !(PINB & PI4))
     c12:	1f 99       	sbic	0x03, 7	; 3
     c14:	19 c0       	rjmp	.+50     	; 0xc48 <menu_read+0x46>
     c16:	1e 99       	sbic	0x03, 6	; 3
     c18:	17 c0       	rjmp	.+46     	; 0xc48 <menu_read+0x46>
	{
		// buzzer
		buzzer_freq = 1000;
     c1a:	88 ee       	ldi	r24, 0xE8	; 232
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     c22:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
		buzzer_setting[PERIOD]= 15;
     c26:	eb ea       	ldi	r30, 0xAB	; 171
     c28:	f5 e0       	ldi	r31, 0x05	; 5
     c2a:	8f e0       	ldi	r24, 0x0F	; 15
     c2c:	80 83       	st	Z, r24
		if (!(buzzer_setting[SETTING] & STAT))
     c2e:	81 81       	ldd	r24, Z+1	; 0x01
     c30:	85 fd       	sbrc	r24, 5
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <menu_read+0x38>
			buzzer_setting[SETTING] |= BUZZER_SET|STAT;
     c34:	88 62       	ori	r24, 0x28	; 40
     c36:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
		
		button_tog[6] = OFF;
     c3a:	ed ea       	ldi	r30, 0xAD	; 173
     c3c:	f5 e0       	ldi	r31, 0x05	; 5
     c3e:	16 82       	std	Z+6, r1	; 0x06
		button_tog[7] = OFF;
     c40:	17 82       	std	Z+7, r1	; 0x07
		button_tog[8] = ON;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 87       	std	Z+8, r24	; 0x08
     c46:	67 c0       	rjmp	.+206    	; 0xd16 <menu_read+0x114>
	}
	else if (((PINB & PI3) && (PINB & PI4)) && (button_tog[8] == ON))
     c48:	1f 9b       	sbis	0x03, 7	; 3
     c4a:	11 c0       	rjmp	.+34     	; 0xc6e <menu_read+0x6c>
     c4c:	1e 9b       	sbis	0x03, 6	; 3
     c4e:	0f c0       	rjmp	.+30     	; 0xc6e <menu_read+0x6c>
     c50:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <button_tog+0x8>
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	59 f4       	brne	.+22     	; 0xc6e <menu_read+0x6c>
	{
		buzzer_setting[SETTING] &= ~STAT;
     c58:	eb ea       	ldi	r30, 0xAB	; 171
     c5a:	f5 e0       	ldi	r31, 0x05	; 5
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	9f 7d       	andi	r25, 0xDF	; 223
     c60:	91 83       	std	Z+1, r25	; 0x01
		
		button_tog[8] = OFF;
     c62:	10 92 b5 05 	sts	0x05B5, r1	; 0x8005b5 <button_tog+0x8>
		
		PORTD |= PO1|PO2|PO3;
     c66:	9b b1       	in	r25, 0x0b	; 11
     c68:	91 6a       	ori	r25, 0xA1	; 161
     c6a:	9b b9       	out	0x0b, r25	; 11
		return 1;
     c6c:	08 95       	ret
	}
	
	////////// Single-input ////////////////////////////////////////
	else if (!button_tog[8])	
     c6e:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <button_tog+0x8>
     c72:	81 11       	cpse	r24, r1
     c74:	50 c0       	rjmp	.+160    	; 0xd16 <menu_read+0x114>
	{
		if (!(PINB & PI3))	// Menu 1
     c76:	1f 99       	sbic	0x03, 7	; 3
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <menu_read+0xa0>
		{
			buzzer_freq = 1000;
     c7a:	88 ee       	ldi	r24, 0xE8	; 232
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     c82:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
			buzzer_setting[PERIOD]= 15;
     c86:	eb ea       	ldi	r30, 0xAB	; 171
     c88:	f5 e0       	ldi	r31, 0x05	; 5
     c8a:	8f e0       	ldi	r24, 0x0F	; 15
     c8c:	80 83       	st	Z, r24
			if (!(buzzer_setting[SETTING] & STAT))
     c8e:	81 81       	ldd	r24, Z+1	; 0x01
     c90:	85 fd       	sbrc	r24, 5
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <menu_read+0x98>
				buzzer_setting[SETTING] |= BUZZER_SET|STAT;
     c94:	88 62       	ori	r24, 0x28	; 40
     c96:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
			
			button_tog[6] = ON;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 b3 05 	sts	0x05B3, r24	; 0x8005b3 <button_tog+0x6>
     ca0:	12 c0       	rjmp	.+36     	; 0xcc6 <menu_read+0xc4>
		}
		else if ((PINB & PI3) && (button_tog[6] == ON))
     ca2:	1f 9b       	sbis	0x03, 7	; 3
     ca4:	10 c0       	rjmp	.+32     	; 0xcc6 <menu_read+0xc4>
     ca6:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <button_tog+0x6>
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	61 f4       	brne	.+24     	; 0xcc6 <menu_read+0xc4>
		{
			// buzzer reset
			buzzer_setting[SETTING] &= ~STAT;
     cae:	eb ea       	ldi	r30, 0xAB	; 171
     cb0:	f5 e0       	ldi	r31, 0x05	; 5
     cb2:	81 81       	ldd	r24, Z+1	; 0x01
     cb4:	8f 7d       	andi	r24, 0xDF	; 223
     cb6:	81 83       	std	Z+1, r24	; 0x01
			
			menu_input++;
     cb8:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_input>
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
			button_tog[6] = OFF;
     cc2:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <button_tog+0x6>
		}
		
		if (!(PINB & PI4))   // Menu 2
     cc6:	1e 99       	sbic	0x03, 6	; 3
     cc8:	14 c0       	rjmp	.+40     	; 0xcf2 <menu_read+0xf0>
		{
			buzzer_freq = 1000;
     cca:	88 ee       	ldi	r24, 0xE8	; 232
     ccc:	93 e0       	ldi	r25, 0x03	; 3
     cce:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
     cd2:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
			buzzer_setting[PERIOD]= 15;
     cd6:	eb ea       	ldi	r30, 0xAB	; 171
     cd8:	f5 e0       	ldi	r31, 0x05	; 5
     cda:	8f e0       	ldi	r24, 0x0F	; 15
     cdc:	80 83       	st	Z, r24
			if (!(buzzer_setting[SETTING] & STAT))
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	85 fd       	sbrc	r24, 5
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <menu_read+0xe8>
				buzzer_setting[SETTING] |= BUZZER_SET|STAT;
     ce4:	88 62       	ori	r24, 0x28	; 40
     ce6:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
			
			button_tog[7] = ON;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <button_tog+0x7>
     cf0:	12 c0       	rjmp	.+36     	; 0xd16 <menu_read+0x114>
		}
		else if ((PINB & PI4) && (button_tog[7] == ON))
     cf2:	1e 9b       	sbis	0x03, 6	; 3
     cf4:	10 c0       	rjmp	.+32     	; 0xd16 <menu_read+0x114>
     cf6:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <button_tog+0x7>
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	61 f4       	brne	.+24     	; 0xd16 <menu_read+0x114>
		{
			// buzzer reset
			buzzer_setting[SETTING] &= ~STAT;
     cfe:	eb ea       	ldi	r30, 0xAB	; 171
     d00:	f5 e0       	ldi	r31, 0x05	; 5
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	8f 7d       	andi	r24, 0xDF	; 223
     d06:	81 83       	std	Z+1, r24	; 0x01
			
			menu_input--;
     d08:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_input>
     d0c:	81 50       	subi	r24, 0x01	; 1
     d0e:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
			button_tog[7] = OFF;
     d12:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <button_tog+0x7>
		}
	}
	
	PORTD |= PO1|PO3;
     d16:	8b b1       	in	r24, 0x0b	; 11
     d18:	80 6a       	ori	r24, 0xA0	; 160
     d1a:	8b b9       	out	0x0b, r24	; 11
	PORTE |= PO2|PO4;
     d1c:	8e b1       	in	r24, 0x0e	; 14
     d1e:	83 60       	ori	r24, 0x03	; 3
     d20:	8e b9       	out	0x0e, r24	; 14
	return 0;
     d22:	80 e0       	ldi	r24, 0x00	; 0
}
     d24:	08 95       	ret

00000d26 <transmitter_bat_chk>:
uint8_t transmitter_bat_chk()
{
	ADMUX = (1 << REFS0) | (1 << ADLAR) | 6;	// external vref, choose adc pin(6). read only 8 bit
     d26:	86 e6       	ldi	r24, 0x66	; 102
     d28:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (7 << ADPS0);	// start adc read, adc prescalar 128
     d2c:	87 ec       	ldi	r24, 0xC7	; 199
     d2e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	while (ADCSRA & (1 << ADSC));	// wait till conversion is finished
     d32:	ea e7       	ldi	r30, 0x7A	; 122
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	86 fd       	sbrc	r24, 6
     d3a:	fd cf       	rjmp	.-6      	; 0xd36 <transmitter_bat_chk+0x10>
	TX_bat_mes = ADCH;
     d3c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     d40:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <TX_bat_mes>
	
	return TX_bat_mes;
	
}
     d44:	08 95       	ret

00000d46 <set_switch>:
/*      Make channel value							*/
/*													*/
/*													*/
/****************************************************/
void set_switch()
{
     d46:	cf 93       	push	r28
     d48:	ed ed       	ldi	r30, 0xDD	; 221
     d4a:	f5 e0       	ldi	r31, 0x05	; 5
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t ail_dr = 0, ele_dr = 0, thr_dr = 0, rud_dr = 0, ch5_dr = 0, ch5_sw = 0;
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	c0 e0       	ldi	r28, 0x00	; 0
     d54:	a0 e0       	ldi	r26, 0x00	; 0
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
			case ELE_DR:
				ele_dr = (1<<k);
				break;
			
			case THR_DR:
				thr_dr = (1<<k);
     d5c:	41 e0       	ldi	r20, 0x01	; 1
	uint8_t ail_dr = 0, ele_dr = 0, thr_dr = 0, rud_dr = 0, ch5_dr = 0, ch5_sw = 0;
	
	
	for (uint8_t k=0; k<8; k++)
	{
		switch (sw[k])
     d5e:	81 91       	ld	r24, Z+
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	d9 f0       	breq	.+54     	; 0xd9a <set_switch+0x54>
     d64:	28 f4       	brcc	.+10     	; 0xd70 <set_switch+0x2a>
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	51 f0       	breq	.+20     	; 0xd7e <set_switch+0x38>
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	79 f0       	breq	.+30     	; 0xd8c <set_switch+0x46>
     d6e:	32 c0       	rjmp	.+100    	; 0xdd4 <set_switch+0x8e>
     d70:	80 31       	cpi	r24, 0x10	; 16
     d72:	09 f1       	breq	.+66     	; 0xdb6 <set_switch+0x70>
     d74:	80 32       	cpi	r24, 0x20	; 32
     d76:	39 f1       	breq	.+78     	; 0xdc6 <set_switch+0x80>
     d78:	88 30       	cpi	r24, 0x08	; 8
     d7a:	61 f5       	brne	.+88     	; 0xdd4 <set_switch+0x8e>
     d7c:	15 c0       	rjmp	.+42     	; 0xda8 <set_switch+0x62>
		{
			case AIL_DR:
				ail_dr = (1<<k);
     d7e:	74 2f       	mov	r23, r20
     d80:	02 2e       	mov	r0, r18
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <set_switch+0x40>
     d84:	77 0f       	add	r23, r23
     d86:	0a 94       	dec	r0
     d88:	ea f7       	brpl	.-6      	; 0xd84 <set_switch+0x3e>
				break;
     d8a:	24 c0       	rjmp	.+72     	; 0xdd4 <set_switch+0x8e>
			
			case ELE_DR:
				ele_dr = (1<<k);
     d8c:	64 2f       	mov	r22, r20
     d8e:	02 2e       	mov	r0, r18
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <set_switch+0x4e>
     d92:	66 0f       	add	r22, r22
     d94:	0a 94       	dec	r0
     d96:	ea f7       	brpl	.-6      	; 0xd92 <set_switch+0x4c>
				break;
     d98:	1d c0       	rjmp	.+58     	; 0xdd4 <set_switch+0x8e>
			
			case THR_DR:
				thr_dr = (1<<k);
     d9a:	54 2f       	mov	r21, r20
     d9c:	02 2e       	mov	r0, r18
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <set_switch+0x5c>
     da0:	55 0f       	add	r21, r21
     da2:	0a 94       	dec	r0
     da4:	ea f7       	brpl	.-6      	; 0xda0 <set_switch+0x5a>
				break;
     da6:	16 c0       	rjmp	.+44     	; 0xdd4 <set_switch+0x8e>
			
			case RUD_DR:
				rud_dr = (1<<k);
     da8:	a4 2f       	mov	r26, r20
     daa:	02 2e       	mov	r0, r18
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <set_switch+0x6a>
     dae:	aa 0f       	add	r26, r26
     db0:	0a 94       	dec	r0
     db2:	ea f7       	brpl	.-6      	; 0xdae <set_switch+0x68>
				break;
     db4:	0f c0       	rjmp	.+30     	; 0xdd4 <set_switch+0x8e>
			
			case CH5_DR:
				ch5_dr = (1<<k);
     db6:	84 2f       	mov	r24, r20
     db8:	02 2e       	mov	r0, r18
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <set_switch+0x78>
     dbc:	88 0f       	add	r24, r24
     dbe:	0a 94       	dec	r0
     dc0:	ea f7       	brpl	.-6      	; 0xdbc <set_switch+0x76>
     dc2:	c8 2f       	mov	r28, r24
				break;
     dc4:	07 c0       	rjmp	.+14     	; 0xdd4 <set_switch+0x8e>
			
			case CH5_SW:
				ch5_sw = (1<<k);
     dc6:	84 2f       	mov	r24, r20
     dc8:	02 2e       	mov	r0, r18
     dca:	01 c0       	rjmp	.+2      	; 0xdce <set_switch+0x88>
     dcc:	88 0f       	add	r24, r24
     dce:	0a 94       	dec	r0
     dd0:	ea f7       	brpl	.-6      	; 0xdcc <set_switch+0x86>
     dd2:	b8 2f       	mov	r27, r24
     dd4:	2f 5f       	subi	r18, 0xFF	; 255
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
void set_switch()
{
	uint8_t ail_dr = 0, ele_dr = 0, thr_dr = 0, rud_dr = 0, ch5_dr = 0, ch5_sw = 0;
	
	
	for (uint8_t k=0; k<8; k++)
     dd8:	28 30       	cpi	r18, 0x08	; 8
     dda:	31 05       	cpc	r19, r1
     ddc:	09 f0       	breq	.+2      	; 0xde0 <set_switch+0x9a>
     dde:	bf cf       	rjmp	.-130    	; 0xd5e <set_switch+0x18>
			
		} // switch (sw[i])
	} //for (uint8_t k=0; k<8; k++)
	
	// Aileron DR
	if (ail_dr)
     de0:	77 23       	and	r23, r23
     de2:	79 f0       	breq	.+30     	; 0xe02 <set_switch+0xbc>
	{
		if (switch_val & ail_dr)
     de4:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     de8:	78 23       	and	r23, r24
     dea:	31 f0       	breq	.+12     	; 0xdf8 <set_switch+0xb2>
			mixing_val_2 |= AIL_DR;
     dec:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <set_switch+0xbc>
		else
			mixing_val_2 &= ~AIL_DR;
     df8:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
     dfc:	8e 7f       	andi	r24, 0xFE	; 254
     dfe:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
	}
	// Elevator DR
	if (ele_dr)
     e02:	66 23       	and	r22, r22
     e04:	79 f0       	breq	.+30     	; 0xe24 <set_switch+0xde>
	{
		if (switch_val & ele_dr)
     e06:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     e0a:	68 23       	and	r22, r24
     e0c:	31 f0       	breq	.+12     	; 0xe1a <set_switch+0xd4>
			mixing_val_2 |= ELE_DR;
     e0e:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
     e12:	82 60       	ori	r24, 0x02	; 2
     e14:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <set_switch+0xde>
		else
			mixing_val_2 &= ~ELE_DR;
     e1a:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
     e1e:	8d 7f       	andi	r24, 0xFD	; 253
     e20:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
	}
	// Throttle DR
	if (thr_dr)
     e24:	55 23       	and	r21, r21
     e26:	59 f0       	breq	.+22     	; 0xe3e <set_switch+0xf8>
	{
		if (mixing_val_2 & thr_dr)
     e28:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
     e2c:	58 23       	and	r21, r24
     e2e:	21 f0       	breq	.+8      	; 0xe38 <set_switch+0xf2>
			mixing_val_2 |= THR_DR;
     e30:	84 60       	ori	r24, 0x04	; 4
     e32:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <set_switch+0xf8>
		else
			mixing_val_2 &= ~THR_DR;
     e38:	8b 7f       	andi	r24, 0xFB	; 251
     e3a:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
	}
	// Rudder DR
	if (rud_dr)
     e3e:	aa 23       	and	r26, r26
     e40:	79 f0       	breq	.+30     	; 0xe60 <set_switch+0x11a>
	{
		if (switch_val & rud_dr)
     e42:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <switch_val>
     e46:	a8 23       	and	r26, r24
     e48:	31 f0       	breq	.+12     	; 0xe56 <set_switch+0x110>
			mixing_val_2 |= RUD_DR;
     e4a:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
     e4e:	88 60       	ori	r24, 0x08	; 8
     e50:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
     e54:	05 c0       	rjmp	.+10     	; 0xe60 <set_switch+0x11a>
		else
			mixing_val_2 &= ~RUD_DR;
     e56:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
     e5a:	87 7f       	andi	r24, 0xF7	; 247
     e5c:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
	}
	// CH5 DR
	if (ch5_dr)
     e60:	cc 23       	and	r28, r28
     e62:	79 f0       	breq	.+30     	; 0xe82 <set_switch+0x13c>
	{
		if (switch_val & ch5_dr)
     e64:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <switch_val>
     e68:	9c 23       	and	r25, r28
     e6a:	31 f0       	breq	.+12     	; 0xe78 <set_switch+0x132>
			mixing_val_2 |= CH5_DR;
     e6c:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
     e70:	80 61       	ori	r24, 0x10	; 16
     e72:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <set_switch+0x13c>
		else
			mixing_val_2 &= ~CH5_DR;
     e78:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
     e7c:	8f 7e       	andi	r24, 0xEF	; 239
     e7e:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
	}
	// Aileron DR
	if (ch5_sw)
     e82:	bb 23       	and	r27, r27
     e84:	81 f0       	breq	.+32     	; 0xea6 <set_switch+0x160>
	{
		if (switch_val & ch5_sw)
     e86:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <switch_val>
     e8a:	8b 2f       	mov	r24, r27
     e8c:	89 23       	and	r24, r25
     e8e:	31 f0       	breq	.+12     	; 0xe9c <set_switch+0x156>
			channel_mix_temp |= CH5_SW;
     e90:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <channel_mix_temp>
     e94:	80 62       	ori	r24, 0x20	; 32
     e96:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <channel_mix_temp>
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <set_switch+0x160>
		else
			channel_mix_temp &= ~CH5_SW;
     e9c:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <channel_mix_temp>
     ea0:	8f 7d       	andi	r24, 0xDF	; 223
     ea2:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <channel_mix_temp>
	}
	
	
}
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <make_val>:
void make_val()
{   
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
	uint8_t ail_temp, rud_temp;
	int16_t channel_temp;

	////////// Servo Delay /////////////////////////////////////////
	if (channel_mix_temp & CH5_SW)
     eb4:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <channel_mix_temp>
     eb8:	85 ff       	sbrs	r24, 5
     eba:	0c c0       	rjmp	.+24     	; 0xed4 <make_val+0x2a>
	{
		// Delayed
		if (mixing_val_3 & SERVO_DEL_1)
     ebc:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
     ec0:	84 ff       	sbrs	r24, 4
     ec2:	05 c0       	rjmp	.+10     	; 0xece <make_val+0x24>
			channel[CH5] = timer_8ms_Ch5Delay;
     ec4:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <timer_8ms_Ch5Delay>
     ec8:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <channel+0x4>
     ecc:	0f c0       	rjmp	.+30     	; 0xeec <make_val+0x42>
		// No delay
		else
			channel[CH5] = 0;
     ece:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <channel+0x4>
     ed2:	0c c0       	rjmp	.+24     	; 0xeec <make_val+0x42>
	}
	else
	{
		// Delayed
		if (mixing_val_3 & SERVO_DEL_1)
     ed4:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
     ed8:	84 ff       	sbrs	r24, 4
     eda:	05 c0       	rjmp	.+10     	; 0xee6 <make_val+0x3c>
			channel[CH5] = timer_8ms_Ch5Delay;
     edc:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <timer_8ms_Ch5Delay>
     ee0:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <channel+0x4>
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <make_val+0x42>
		// No delay
		else
			channel[CH5] = 0xFF;
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <channel+0x4>
	}
	
	////////// Elevon Mixing ///////////////////////////////////////
	// 1. Substitute elevator value to aileron
	// 2. Add & subtract applied aileron input
	if (mixing_val_1 & ELEVON)
     eec:	20 91 db 05 	lds	r18, 0x05DB	; 0x8005db <mixing_val_1>
     ef0:	25 ff       	sbrs	r18, 5
     ef2:	2b c0       	rjmp	.+86     	; 0xf4a <make_val+0xa0>
	{
		ail_temp = channel[AILERON];
     ef4:	ec eb       	ldi	r30, 0xBC	; 188
     ef6:	f5 e0       	ldi	r31, 0x05	; 5
     ef8:	40 81       	ld	r20, Z
		// elevator value
		channel[AILERON] = channel[ELEVATOR];
     efa:	81 81       	ldd	r24, Z+1	; 0x01
		
		// aileron value #1
		channel_temp = channel[ELEVATOR] + (ail_temp -127);
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	4f 57       	subi	r20, 0x7F	; 127
     f02:	51 09       	sbc	r21, r1
     f04:	bc 01       	movw	r22, r24
     f06:	64 0f       	add	r22, r20
     f08:	75 1f       	adc	r23, r21
		// upper/lower limit
		if (channel_temp > 255)
     f0a:	6f 3f       	cpi	r22, 0xFF	; 255
     f0c:	71 05       	cpc	r23, r1
     f0e:	29 f0       	breq	.+10     	; 0xf1a <make_val+0x70>
     f10:	24 f0       	brlt	.+8      	; 0xf1a <make_val+0x70>
			channel[ELEVATOR] = 255;
     f12:	3f ef       	ldi	r19, 0xFF	; 255
     f14:	30 93 bd 05 	sts	0x05BD, r19	; 0x8005bd <channel+0x1>
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <make_val+0x7e>
		else if (channel_temp < 0)
     f1a:	77 23       	and	r23, r23
     f1c:	1c f4       	brge	.+6      	; 0xf24 <make_val+0x7a>
			channel[ELEVATOR] = 0;
     f1e:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <channel+0x1>
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <make_val+0x7e>
		else
			channel[ELEVATOR] = channel_temp;
     f24:	60 93 bd 05 	sts	0x05BD, r22	; 0x8005bd <channel+0x1>
		
		// aileron value #2
		channel_temp = channel[AILERON] - (ail_temp -127);
     f28:	84 1b       	sub	r24, r20
     f2a:	95 0b       	sbc	r25, r21
		// upper & lower limit
		if (channel_temp > 255)
     f2c:	8f 3f       	cpi	r24, 0xFF	; 255
     f2e:	91 05       	cpc	r25, r1
     f30:	29 f0       	breq	.+10     	; 0xf3c <make_val+0x92>
     f32:	24 f0       	brlt	.+8      	; 0xf3c <make_val+0x92>
			channel[AILERON] = 255;
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <channel>
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <make_val+0xa0>
		else if (channel_temp < 0)
     f3c:	99 23       	and	r25, r25
     f3e:	1c f4       	brge	.+6      	; 0xf46 <make_val+0x9c>
			channel[AILERON] = 0;
     f40:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <channel>
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <make_val+0xa0>
		else
			channel[AILERON] = channel_temp;
     f46:	80 93 bc 05 	sts	0x05BC, r24	; 0x8005bc <channel>
			
	} //if (mixing_val_1 & ELEVON)
	
	////////// Vtail Mixing ////////////////////////////////////////
	if (mixing_val_1 & VTAIL)
     f4a:	26 ff       	sbrs	r18, 6
     f4c:	2b c0       	rjmp	.+86     	; 0xfa4 <make_val+0xfa>
	{
		rud_temp = channel[RUDDER];
     f4e:	ec eb       	ldi	r30, 0xBC	; 188
     f50:	f5 e0       	ldi	r31, 0x05	; 5
     f52:	43 81       	ldd	r20, Z+3	; 0x03
		// elevator value
		channel[RUDDER] = channel[ELEVATOR];
     f54:	81 81       	ldd	r24, Z+1	; 0x01
		
		// rudder value #1
		channel_temp = channel[ELEVATOR] + (rud_temp -127);
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	4f 57       	subi	r20, 0x7F	; 127
     f5c:	51 09       	sbc	r21, r1
     f5e:	bc 01       	movw	r22, r24
     f60:	64 0f       	add	r22, r20
     f62:	75 1f       	adc	r23, r21
		// upper/lower limit
		if (channel_temp > 255)
     f64:	6f 3f       	cpi	r22, 0xFF	; 255
     f66:	71 05       	cpc	r23, r1
     f68:	29 f0       	breq	.+10     	; 0xf74 <make_val+0xca>
     f6a:	24 f0       	brlt	.+8      	; 0xf74 <make_val+0xca>
			channel[ELEVATOR] = 255;
     f6c:	3f ef       	ldi	r19, 0xFF	; 255
     f6e:	30 93 bd 05 	sts	0x05BD, r19	; 0x8005bd <channel+0x1>
     f72:	07 c0       	rjmp	.+14     	; 0xf82 <make_val+0xd8>
		else if (channel_temp < 0)
     f74:	77 23       	and	r23, r23
     f76:	1c f4       	brge	.+6      	; 0xf7e <make_val+0xd4>
			channel[ELEVATOR] = 0;
     f78:	10 92 bd 05 	sts	0x05BD, r1	; 0x8005bd <channel+0x1>
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <make_val+0xd8>
		else
			channel[ELEVATOR] = channel_temp;
     f7e:	60 93 bd 05 	sts	0x05BD, r22	; 0x8005bd <channel+0x1>
		
		// rudder value #2
		channel_temp = channel[RUDDER] - (rud_temp -127);
     f82:	84 1b       	sub	r24, r20
     f84:	95 0b       	sbc	r25, r21
		// upper & lower limit
		if (channel_temp > 255)
     f86:	8f 3f       	cpi	r24, 0xFF	; 255
     f88:	91 05       	cpc	r25, r1
     f8a:	29 f0       	breq	.+10     	; 0xf96 <make_val+0xec>
     f8c:	24 f0       	brlt	.+8      	; 0xf96 <make_val+0xec>
			channel[RUDDER] = 255;
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <channel+0x3>
     f94:	07 c0       	rjmp	.+14     	; 0xfa4 <make_val+0xfa>
		else if (channel_temp < 0)
     f96:	99 23       	and	r25, r25
     f98:	1c f4       	brge	.+6      	; 0xfa0 <make_val+0xf6>
			channel[RUDDER] = 0;
     f9a:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <channel+0x3>
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <make_val+0xfa>
		else
			channel[RUDDER] = channel_temp;
     fa0:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <channel+0x3>
		
	} //if (mixing_val_1 & VTAIL)
	
	////////// Differential Thrust /////////////////////////////////
	if (mixing_val_1 & DIFF_THRUST)
     fa4:	24 ff       	sbrs	r18, 4
     fa6:	a0 c0       	rjmp	.+320    	; 0x10e8 <make_val+0x23e>
	{
		rud_temp = channel[RUDDER];
     fa8:	ec eb       	ldi	r30, 0xBC	; 188
     faa:	f5 e0       	ldi	r31, 0x05	; 5
     fac:	43 81       	ldd	r20, Z+3	; 0x03
		// Throttle value
		channel[RUDDER] = channel[THROTTLE];
     fae:	82 81       	ldd	r24, Z+2	; 0x02
		
		// rudder value #1
		channel_temp = channel[THROTTLE] + (rud_temp -127);
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	4f 57       	subi	r20, 0x7F	; 127
     fb6:	51 09       	sbc	r21, r1
     fb8:	bc 01       	movw	r22, r24
     fba:	64 0f       	add	r22, r20
     fbc:	75 1f       	adc	r23, r21
		// upper/lower limit
		if (channel_temp > 255)
     fbe:	6f 3f       	cpi	r22, 0xFF	; 255
     fc0:	71 05       	cpc	r23, r1
     fc2:	29 f0       	breq	.+10     	; 0xfce <make_val+0x124>
     fc4:	24 f0       	brlt	.+8      	; 0xfce <make_val+0x124>
			channel[THROTTLE] = 255;
     fc6:	3f ef       	ldi	r19, 0xFF	; 255
     fc8:	30 93 be 05 	sts	0x05BE, r19	; 0x8005be <channel+0x2>
     fcc:	07 c0       	rjmp	.+14     	; 0xfdc <make_val+0x132>
		else if (channel_temp < 0)
     fce:	77 23       	and	r23, r23
     fd0:	1c f4       	brge	.+6      	; 0xfd8 <make_val+0x12e>
			channel[THROTTLE] = 0;
     fd2:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <channel+0x2>
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <make_val+0x132>
		else
			channel[THROTTLE] = channel_temp;
     fd8:	60 93 be 05 	sts	0x05BE, r22	; 0x8005be <channel+0x2>
		
		// rudder value #2
		channel_temp = channel[RUDDER] - (rud_temp -127);
     fdc:	84 1b       	sub	r24, r20
     fde:	95 0b       	sbc	r25, r21
		// upper & lower limit
		if (channel_temp > 255)
     fe0:	8f 3f       	cpi	r24, 0xFF	; 255
     fe2:	91 05       	cpc	r25, r1
     fe4:	29 f0       	breq	.+10     	; 0xff0 <make_val+0x146>
     fe6:	24 f0       	brlt	.+8      	; 0xff0 <make_val+0x146>
			channel[RUDDER] = 255;
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <channel+0x3>
     fee:	7c c0       	rjmp	.+248    	; 0x10e8 <make_val+0x23e>
		else if (channel_temp < 0)
     ff0:	99 23       	and	r25, r25
     ff2:	1c f4       	brge	.+6      	; 0xffa <make_val+0x150>
			channel[RUDDER] = 0;
     ff4:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <channel+0x3>
     ff8:	77 c0       	rjmp	.+238    	; 0x10e8 <make_val+0x23e>
		else
			channel[RUDDER] = channel_temp;
     ffa:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <channel+0x3>
     ffe:	74 c0       	rjmp	.+232    	; 0x10e8 <make_val+0x23e>
    1000:	ef 01       	movw	r28, r30
	////////// Trim Upper&Lower Limit //////////////////////////////
	// One click : 4
	for (uint8_t n = 0; n < 4; n++)
	{
		// Trim limit
		if (trim[n] > TRIM_LIM)
    1002:	80 81       	ld	r24, Z
    1004:	8a 30       	cpi	r24, 0x0A	; 10
    1006:	14 f0       	brlt	.+4      	; 0x100c <make_val+0x162>
			trim[n] = TRIM_LIM;
    1008:	10 83       	st	Z, r17
    100a:	03 c0       	rjmp	.+6      	; 0x1012 <make_val+0x168>
		else if (trim[n] < -TRIM_LIM)
    100c:	87 3f       	cpi	r24, 0xF7	; 247
    100e:	0c f4       	brge	.+2      	; 0x1012 <make_val+0x168>
			trim[n] = -TRIM_LIM;
    1010:	f0 82       	st	Z, r15
    1012:	31 96       	adiw	r30, 0x01	; 1

		// Trim adjust & Upper, lower limit
		channel_temp = channel[n] + (trim[n]<<2);
    1014:	38 81       	ld	r19, Y
    1016:	8c 91       	ld	r24, X
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	c4 e0       	ldi	r28, 0x04	; 4
    101c:	3c 02       	muls	r19, r28
    101e:	80 0d       	add	r24, r0
    1020:	91 1d       	adc	r25, r1
    1022:	11 24       	eor	r1, r1
		
		if ((channel_temp >= 0) && (channel_temp <= 255))
    1024:	8f 3f       	cpi	r24, 0xFF	; 255
    1026:	91 05       	cpc	r25, r1
    1028:	09 f0       	breq	.+2      	; 0x102c <make_val+0x182>
    102a:	10 f4       	brcc	.+4      	; 0x1030 <make_val+0x186>
			channel[n] = channel_temp;
    102c:	8c 93       	st	X, r24
    102e:	09 c0       	rjmp	.+18     	; 0x1042 <make_val+0x198>
		else if (channel_temp > 255)
    1030:	8f 3f       	cpi	r24, 0xFF	; 255
    1032:	91 05       	cpc	r25, r1
    1034:	21 f0       	breq	.+8      	; 0x103e <make_val+0x194>
    1036:	1c f0       	brlt	.+6      	; 0x103e <make_val+0x194>
			channel[n] = 255;
    1038:	ed 01       	movw	r28, r26
    103a:	08 83       	st	Y, r16
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <make_val+0x198>
		else
			channel[n] = 0;
    103e:	ed 01       	movw	r28, r26
    1040:	18 82       	st	Y, r1
    1042:	11 96       	adiw	r26, 0x01	; 1
		
	} // if (mixing_val_1 & DIFF_THRUST)
	
	////////// Trim Upper&Lower Limit //////////////////////////////
	// One click : 4
	for (uint8_t n = 0; n < 4; n++)
    1044:	e6 17       	cp	r30, r22
    1046:	f7 07       	cpc	r31, r23
    1048:	d9 f6       	brne	.-74     	; 0x1000 <make_val+0x156>
		
	} //for (uint8_t n = 0; n < 4; n++)
	
	////////// Dual Rate////////////////////////////////////////////
	// 50% original input
	if (mixing_val_2 & AIL_DR)
    104a:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
    104e:	80 ff       	sbrs	r24, 0
    1050:	0a c0       	rjmp	.+20     	; 0x1066 <make_val+0x1bc>
		channel[AILERON] = 127 + ((channel[AILERON] - 127)>>1);
    1052:	ec eb       	ldi	r30, 0xBC	; 188
    1054:	f5 e0       	ldi	r31, 0x05	; 5
    1056:	40 81       	ld	r20, Z
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	4f 57       	subi	r20, 0x7F	; 127
    105c:	51 09       	sbc	r21, r1
    105e:	55 95       	asr	r21
    1060:	47 95       	ror	r20
    1062:	41 58       	subi	r20, 0x81	; 129
    1064:	40 83       	st	Z, r20
	if (mixing_val_2 & ELE_DR)
    1066:	81 ff       	sbrs	r24, 1
    1068:	0a c0       	rjmp	.+20     	; 0x107e <make_val+0x1d4>
		channel[ELEVATOR] = 127 + ((channel[ELEVATOR] - 127)>>1);
    106a:	ec eb       	ldi	r30, 0xBC	; 188
    106c:	f5 e0       	ldi	r31, 0x05	; 5
    106e:	41 81       	ldd	r20, Z+1	; 0x01
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	4f 57       	subi	r20, 0x7F	; 127
    1074:	51 09       	sbc	r21, r1
    1076:	55 95       	asr	r21
    1078:	47 95       	ror	r20
    107a:	41 58       	subi	r20, 0x81	; 129
    107c:	41 83       	std	Z+1, r20	; 0x01
	if (mixing_val_2 & RUD_DR)
    107e:	83 ff       	sbrs	r24, 3
    1080:	0a c0       	rjmp	.+20     	; 0x1096 <make_val+0x1ec>
		channel[RUDDER] = 127 + ((channel[RUDDER] - 127)>>1);
    1082:	ec eb       	ldi	r30, 0xBC	; 188
    1084:	f5 e0       	ldi	r31, 0x05	; 5
    1086:	43 81       	ldd	r20, Z+3	; 0x03
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	4f 57       	subi	r20, 0x7F	; 127
    108c:	51 09       	sbc	r21, r1
    108e:	55 95       	asr	r21
    1090:	47 95       	ror	r20
    1092:	41 58       	subi	r20, 0x81	; 129
    1094:	43 83       	std	Z+3, r20	; 0x03
	if (mixing_val_2 & CH5_DR)
    1096:	84 ff       	sbrs	r24, 4
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <make_val+0x204>
		channel[CH5]    = 127 + ((channel[CH5] - 127)>>1);
    109a:	ec eb       	ldi	r30, 0xBC	; 188
    109c:	f5 e0       	ldi	r31, 0x05	; 5
    109e:	84 81       	ldd	r24, Z+4	; 0x04
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	8f 57       	subi	r24, 0x7F	; 127
    10a4:	91 09       	sbc	r25, r1
    10a6:	95 95       	asr	r25
    10a8:	87 95       	ror	r24
    10aa:	81 58       	subi	r24, 0x81	; 129
    10ac:	84 83       	std	Z+4, r24	; 0x04
	
	////////// Reverse Mixing //////////////////////////////////////
	if (mixing_val_1 & REVERSE_RUD)
    10ae:	22 ff       	sbrs	r18, 2
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <make_val+0x212>
		channel[RUDDER] = 255 - channel[RUDDER];
    10b2:	ec eb       	ldi	r30, 0xBC	; 188
    10b4:	f5 e0       	ldi	r31, 0x05	; 5
    10b6:	83 81       	ldd	r24, Z+3	; 0x03
    10b8:	80 95       	com	r24
    10ba:	83 83       	std	Z+3, r24	; 0x03
	if (mixing_val_1 & REVERSE_ELE)
    10bc:	21 ff       	sbrs	r18, 1
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <make_val+0x220>
		channel[ELEVATOR] = 255 - channel[ELEVATOR];
    10c0:	ec eb       	ldi	r30, 0xBC	; 188
    10c2:	f5 e0       	ldi	r31, 0x05	; 5
    10c4:	81 81       	ldd	r24, Z+1	; 0x01
    10c6:	80 95       	com	r24
    10c8:	81 83       	std	Z+1, r24	; 0x01
	if (mixing_val_1 & REVERSE_AIL)
    10ca:	20 ff       	sbrs	r18, 0
    10cc:	05 c0       	rjmp	.+10     	; 0x10d8 <make_val+0x22e>
		channel[AILERON] = 255 - channel[AILERON];
    10ce:	ec eb       	ldi	r30, 0xBC	; 188
    10d0:	f5 e0       	ldi	r31, 0x05	; 5
    10d2:	80 81       	ld	r24, Z
    10d4:	80 95       	com	r24
    10d6:	80 83       	st	Z, r24
	if (mixing_val_1 & REVERSE_CH5)
    10d8:	23 ff       	sbrs	r18, 3
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <make_val+0x258>
		channel[CH5] = 255 - channel[CH5];
    10dc:	ec eb       	ldi	r30, 0xBC	; 188
    10de:	f5 e0       	ldi	r31, 0x05	; 5
    10e0:	84 81       	ldd	r24, Z+4	; 0x04
    10e2:	80 95       	com	r24
    10e4:	84 83       	std	Z+4, r24	; 0x04
		
}
    10e6:	0d c0       	rjmp	.+26     	; 0x1102 <make_val+0x258>
    10e8:	ac eb       	ldi	r26, 0xBC	; 188
    10ea:	b5 e0       	ldi	r27, 0x05	; 5
    10ec:	e7 eb       	ldi	r30, 0xB7	; 183
    10ee:	f5 e0       	ldi	r31, 0x05	; 5
    10f0:	6b eb       	ldi	r22, 0xBB	; 187
    10f2:	75 e0       	ldi	r23, 0x05	; 5
	{
		// Trim limit
		if (trim[n] > TRIM_LIM)
			trim[n] = TRIM_LIM;
		else if (trim[n] < -TRIM_LIM)
			trim[n] = -TRIM_LIM;
    10f4:	0f 2e       	mov	r0, r31
    10f6:	f7 ef       	ldi	r31, 0xF7	; 247
    10f8:	ff 2e       	mov	r15, r31
    10fa:	f0 2d       	mov	r31, r0
	// One click : 4
	for (uint8_t n = 0; n < 4; n++)
	{
		// Trim limit
		if (trim[n] > TRIM_LIM)
			trim[n] = TRIM_LIM;
    10fc:	19 e0       	ldi	r17, 0x09	; 9
		channel_temp = channel[n] + (trim[n]<<2);
		
		if ((channel_temp >= 0) && (channel_temp <= 255))
			channel[n] = channel_temp;
		else if (channel_temp > 255)
			channel[n] = 255;
    10fe:	0f ef       	ldi	r16, 0xFF	; 255
    1100:	7f cf       	rjmp	.-258    	; 0x1000 <make_val+0x156>
	if (mixing_val_1 & REVERSE_AIL)
		channel[AILERON] = 255 - channel[AILERON];
	if (mixing_val_1 & REVERSE_CH5)
		channel[CH5] = 255 - channel[CH5];
		
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	08 95       	ret

0000110e <make_ppm>:
/*	JF24_RF		: Transmit data using JF24 module	*/
/*				 Compatible with other RC TX modules*/
/*													*/
/****************************************************/
void make_ppm()
{
    110e:	ac eb       	ldi	r26, 0xBC	; 188
    1110:	b5 e0       	ldi	r27, 0x05	; 5
    1112:	21 ec       	ldi	r18, 0xC1	; 193
    1114:	35 e0       	ldi	r19, 0x05	; 5
	for (uint8_t n = 0; n < CHANNEL; n++)
	{
		PORTD &= ~MODULE;	// channel division low
    1116:	5b 98       	cbi	0x0b, 3	; 11
    1118:	8f e1       	ldi	r24, 0x1F	; 31
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <make_ppm+0xe>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <make_ppm+0x14>
    1122:	00 00       	nop
		_delay_us(400);
		
		PORTD |= MODULE;	// start signal
    1124:	5b 9a       	sbi	0x0b, 3	; 11
    1126:	83 e7       	ldi	r24, 0x73	; 115
    1128:	94 e0       	ldi	r25, 0x04	; 4
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <make_ppm+0x1c>
    112e:	00 c0       	rjmp	.+0      	; 0x1130 <make_ppm+0x22>
    1130:	00 00       	nop
    1132:	fd 01       	movw	r30, r26
		_delay_us(570);		// min value
	
		if (channel[n] > 127)
    1134:	8c 91       	ld	r24, X
    1136:	88 23       	and	r24, r24
    1138:	4c f4       	brge	.+18     	; 0x114c <make_ppm+0x3e>
    113a:	83 e2       	ldi	r24, 0x23	; 35
    113c:	94 e0       	ldi	r25, 0x04	; 4
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <make_ppm+0x30>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <make_ppm+0x36>
    1144:	00 00       	nop
		{
			_delay_us(530);
			channel[n] -= 127;
    1146:	8c 91       	ld	r24, X
    1148:	8f 57       	subi	r24, 0x7F	; 127
    114a:	8c 93       	st	X, r24
		}
		if (channel[n] > 63)
    114c:	80 81       	ld	r24, Z
    114e:	80 34       	cpi	r24, 0x40	; 64
    1150:	48 f0       	brcs	.+18     	; 0x1164 <make_ppm+0x56>
    1152:	81 e1       	ldi	r24, 0x11	; 17
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <make_ppm+0x48>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <make_ppm+0x4e>
    115c:	00 00       	nop
		{
			_delay_us(265);
			channel[n] -= 63;
    115e:	80 81       	ld	r24, Z
    1160:	8f 53       	subi	r24, 0x3F	; 63
    1162:	80 83       	st	Z, r24
		}
		if (channel[n] > 31)
    1164:	80 81       	ld	r24, Z
    1166:	80 32       	cpi	r24, 0x20	; 32
    1168:	48 f0       	brcs	.+18     	; 0x117c <make_ppm+0x6e>
    116a:	87 e0       	ldi	r24, 0x07	; 7
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	f1 f7       	brne	.-4      	; 0x116e <make_ppm+0x60>
    1172:	00 c0       	rjmp	.+0      	; 0x1174 <make_ppm+0x66>
    1174:	00 00       	nop
		{
			_delay_us(132);
			channel[n] -= 31;
    1176:	80 81       	ld	r24, Z
    1178:	8f 51       	subi	r24, 0x1F	; 31
    117a:	80 83       	st	Z, r24
		}
		if (channel[n] > 15)
    117c:	80 81       	ld	r24, Z
    117e:	80 31       	cpi	r24, 0x10	; 16
    1180:	30 f0       	brcs	.+12     	; 0x118e <make_ppm+0x80>
    1182:	90 eb       	ldi	r25, 0xB0	; 176
    1184:	9a 95       	dec	r25
    1186:	f1 f7       	brne	.-4      	; 0x1184 <make_ppm+0x76>
		{
			_delay_us(66);
			channel[n] -= 15;
    1188:	80 81       	ld	r24, Z
    118a:	8f 50       	subi	r24, 0x0F	; 15
    118c:	80 83       	st	Z, r24
		}
		if (channel[n] > 7)
    118e:	80 81       	ld	r24, Z
    1190:	88 30       	cpi	r24, 0x08	; 8
    1192:	30 f0       	brcs	.+12     	; 0x11a0 <make_ppm+0x92>
    1194:	88 e5       	ldi	r24, 0x58	; 88
    1196:	8a 95       	dec	r24
    1198:	f1 f7       	brne	.-4      	; 0x1196 <make_ppm+0x88>
		{
			_delay_us(33);
			channel[n] -= 7;
    119a:	80 81       	ld	r24, Z
    119c:	87 50       	subi	r24, 0x07	; 7
    119e:	80 83       	st	Z, r24
		}
		if (channel[n] > 3)
    11a0:	80 81       	ld	r24, Z
    11a2:	84 30       	cpi	r24, 0x04	; 4
    11a4:	38 f0       	brcs	.+14     	; 0x11b4 <make_ppm+0xa6>
    11a6:	9a e2       	ldi	r25, 0x2A	; 42
    11a8:	9a 95       	dec	r25
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <make_ppm+0x9a>
    11ac:	00 c0       	rjmp	.+0      	; 0x11ae <make_ppm+0xa0>
		{
			_delay_us(16);
			channel[n] -= 3;
    11ae:	80 81       	ld	r24, Z
    11b0:	83 50       	subi	r24, 0x03	; 3
    11b2:	80 83       	st	Z, r24
		}
		if (channel[n] > 1)
    11b4:	80 81       	ld	r24, Z
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	38 f0       	brcs	.+14     	; 0x11c8 <make_ppm+0xba>
    11ba:	85 e1       	ldi	r24, 0x15	; 21
    11bc:	8a 95       	dec	r24
    11be:	f1 f7       	brne	.-4      	; 0x11bc <make_ppm+0xae>
    11c0:	00 00       	nop
		{
			_delay_us(8);
			channel[n] -= 1;
    11c2:	80 81       	ld	r24, Z
    11c4:	81 50       	subi	r24, 0x01	; 1
    11c6:	80 83       	st	Z, r24
    11c8:	11 96       	adiw	r26, 0x01	; 1
		}
		if (channel[n] == 1)
    11ca:	80 81       	ld	r24, Z
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <make_ppm+0xca>
    11d0:	9a e0       	ldi	r25, 0x0A	; 10
    11d2:	9a 95       	dec	r25
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <make_ppm+0xc4>
    11d6:	00 c0       	rjmp	.+0      	; 0x11d8 <make_ppm+0xca>
/*				 Compatible with other RC TX modules*/
/*													*/
/****************************************************/
void make_ppm()
{
	for (uint8_t n = 0; n < CHANNEL; n++)
    11d8:	a2 17       	cp	r26, r18
    11da:	b3 07       	cpc	r27, r19
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <make_ppm+0xd2>
    11de:	9b cf       	rjmp	.-202    	; 0x1116 <make_ppm+0x8>
			_delay_us(4);
		}
		
	}
	
	PORTD &= ~MODULE;	// channel division low	
    11e0:	5b 98       	cbi	0x0b, 3	; 11
    11e2:	08 95       	ret

000011e4 <JF24_RF>:
	
}
void JF24_RF()
{
	// Making 24ms
	while (timer_24ms < 3);
    11e4:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <timer_24ms>
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	e0 f3       	brcs	.-8      	; 0x11e4 <JF24_RF>
	timer_24ms = 0;
    11ec:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <timer_24ms>
	
	// Transmitting PPM signal
	make_ppm();
    11f0:	0e 94 87 08 	call	0x110e	; 0x110e <make_ppm>
    11f4:	08 95       	ret

000011f6 <buzzer>:
/*	* buzzer_freq											*/
/*	- input range: 0~65,535 - (input value) Hz pitch		*/
/*															*/
/************************************************************/
void buzzer(uint16_t freq)
{
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
	// Frequency
	ICR1 = 500000 / freq;
    11fc:	9c 01       	movw	r18, r24
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	60 e2       	ldi	r22, 0x20	; 32
    1204:	71 ea       	ldi	r23, 0xA1	; 161
    1206:	87 e0       	ldi	r24, 0x07	; 7
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <__divmodsi4>
    120e:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
    1212:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	
	// Volume - On/Off
	if (buzzer_volume)
    1216:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <buzzer_volume>
    121a:	88 23       	and	r24, r24
    121c:	89 f0       	breq	.+34     	; 0x1240 <buzzer+0x4a>
	{
		if (freq)
    121e:	cd 2b       	or	r28, r29
    1220:	59 f0       	breq	.+22     	; 0x1238 <buzzer+0x42>
			OCR1A = (ICR1 >> 1);	// Duty: 50%
    1222:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
    1226:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
    122a:	96 95       	lsr	r25
    122c:	87 95       	ror	r24
    122e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1232:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <buzzer+0x4a>
		else
			OCR1A = 0;
    1238:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    123c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	}
	
	
}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <buzzer_switch>:
void buzzer_switch()
{	
	// Start ringing routine if SET bit (buzzer_setting[SETTING]) is 1
	if (buzzer_setting[SETTING] & BUZZER_SET)
    1246:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <buzzer_setting+0x1>
    124a:	83 ff       	sbrs	r24, 3
    124c:	37 c0       	rjmp	.+110    	; 0x12bc <buzzer_switch+0x76>
	{
		// Initialize buzzer timer
		if (buzzer_setting[SETTING] & INIT)
    124e:	84 ff       	sbrs	r24, 4
    1250:	06 c0       	rjmp	.+12     	; 0x125e <buzzer_switch+0x18>
		{
			buzzer_setting[SETTING] &= ~INIT;
    1252:	8f 7e       	andi	r24, 0xEF	; 239
    1254:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
			timer_8ms_buzzer = 0;
    1258:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <timer_8ms_buzzer>
    125c:	08 95       	ret
		}
		// Buzzer On-Off
		else if (timer_8ms_buzzer < buzzer_setting[PERIOD])
    125e:	20 91 ab 05 	lds	r18, 0x05AB	; 0x8005ab <buzzer_setting>
    1262:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <timer_8ms_buzzer>
    1266:	92 17       	cp	r25, r18
    1268:	38 f4       	brcc	.+14     	; 0x1278 <buzzer_switch+0x32>
		{
			buzzer(buzzer_freq);
    126a:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <buzzer_freq>
    126e:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <buzzer_freq+0x1>
    1272:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    1276:	08 95       	ret
		}
		else if (timer_8ms_buzzer < (buzzer_setting[PERIOD]<<1))
    1278:	40 91 c9 05 	lds	r20, 0x05C9	; 0x8005c9 <timer_8ms_buzzer>
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	22 0f       	add	r18, r18
    1280:	33 1f       	adc	r19, r19
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	42 17       	cp	r20, r18
    1286:	53 07       	cpc	r21, r19
    1288:	2c f4       	brge	.+10     	; 0x1294 <buzzer_switch+0x4e>
		{
			buzzer(0);
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    1292:	08 95       	ret
		}
		// Repetition
		else if (timer_8ms_buzzer > (buzzer_setting[PERIOD]<<1))
    1294:	40 91 c9 05 	lds	r20, 0x05C9	; 0x8005c9 <timer_8ms_buzzer>
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	24 17       	cp	r18, r20
    129c:	35 07       	cpc	r19, r21
    129e:	94 f4       	brge	.+36     	; 0x12c4 <buzzer_switch+0x7e>
		{
			if (buzzer_setting[SETTING] & 0x07)
    12a0:	98 2f       	mov	r25, r24
    12a2:	97 70       	andi	r25, 0x07	; 7
    12a4:	31 f0       	breq	.+12     	; 0x12b2 <buzzer_switch+0x6c>
			{
				// repeat the cycle 'repeat' times
				// ex) if repeat==0: ring 1 time
				//        repeat==1: ring 2 times
				timer_8ms_buzzer = 0;
    12a6:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <timer_8ms_buzzer>
				buzzer_setting[SETTING]--;
    12aa:	81 50       	subi	r24, 0x01	; 1
    12ac:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
    12b0:	08 95       	ret
			}
			else
			{
				// finish the cycle
				buzzer_setting[SETTING] |= INIT;
				buzzer_setting[SETTING] &= ~BUZZER_SET;
    12b2:	87 7f       	andi	r24, 0xF7	; 247
    12b4:	80 61       	ori	r24, 0x10	; 16
    12b6:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
    12ba:	08 95       	ret
			}
		} //else if (timer_8ms_buzzer > (buzzer_setting[PERIOD]<<1))
	} //if (buzzer_setting[SETTING] & BUZZER_SET)
	else
	{
		buzzer(0);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    12c4:	08 95       	ret

000012c6 <LCD_guage>:
/*													*/
/*													*/
/****************************************************/
void LCD_guage(uint8_t val, uint8_t position)
{
	if (position < 2)
    12c6:	62 30       	cpi	r22, 0x02	; 2
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <LCD_guage+0x6>
    12ca:	66 c1       	rjmp	.+716    	; 0x1598 <LCD_guage+0x2d2>
	{
		// 1st digit
		if (val < 17)
    12cc:	81 31       	cpi	r24, 0x11	; 17
    12ce:	60 f4       	brcc	.+24     	; 0x12e8 <LCD_guage+0x22>
			lcd1[8*position + 1] = 0xFF;
    12d0:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    12d4:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    12d8:	98 e0       	ldi	r25, 0x08	; 8
    12da:	69 9f       	mul	r22, r25
    12dc:	e0 0d       	add	r30, r0
    12de:	f1 1d       	adc	r31, r1
    12e0:	11 24       	eor	r1, r1
    12e2:	9f ef       	ldi	r25, 0xFF	; 255
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	27 c0       	rjmp	.+78     	; 0x1336 <LCD_guage+0x70>
		else if (val < 30)
    12e8:	8e 31       	cpi	r24, 0x1E	; 30
    12ea:	60 f4       	brcc	.+24     	; 0x1304 <LCD_guage+0x3e>
			lcd1[8*position + 1] = 4;
    12ec:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    12f0:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    12f4:	98 e0       	ldi	r25, 0x08	; 8
    12f6:	69 9f       	mul	r22, r25
    12f8:	e0 0d       	add	r30, r0
    12fa:	f1 1d       	adc	r31, r1
    12fc:	11 24       	eor	r1, r1
    12fe:	94 e0       	ldi	r25, 0x04	; 4
    1300:	91 83       	std	Z+1, r25	; 0x01
    1302:	19 c0       	rjmp	.+50     	; 0x1336 <LCD_guage+0x70>
		else if (val < 43)
    1304:	8b 32       	cpi	r24, 0x2B	; 43
    1306:	60 f4       	brcc	.+24     	; 0x1320 <LCD_guage+0x5a>
			lcd1[8*position + 1] = 6;
    1308:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    130c:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1310:	98 e0       	ldi	r25, 0x08	; 8
    1312:	69 9f       	mul	r22, r25
    1314:	e0 0d       	add	r30, r0
    1316:	f1 1d       	adc	r31, r1
    1318:	11 24       	eor	r1, r1
    131a:	96 e0       	ldi	r25, 0x06	; 6
    131c:	91 83       	std	Z+1, r25	; 0x01
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <LCD_guage+0x70>
		else if (val >= 43)
			lcd1[8*position + 1] = ' ';
    1320:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1324:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1328:	98 e0       	ldi	r25, 0x08	; 8
    132a:	69 9f       	mul	r22, r25
    132c:	e0 0d       	add	r30, r0
    132e:	f1 1d       	adc	r31, r1
    1330:	11 24       	eor	r1, r1
    1332:	90 e2       	ldi	r25, 0x20	; 32
    1334:	91 83       	std	Z+1, r25	; 0x01

		// 2nd digit
		if (val < 56)
    1336:	88 33       	cpi	r24, 0x38	; 56
    1338:	60 f4       	brcc	.+24     	; 0x1352 <LCD_guage+0x8c>
			lcd1[8*position + 2] = 0xFF;
    133a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    133e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1342:	98 e0       	ldi	r25, 0x08	; 8
    1344:	69 9f       	mul	r22, r25
    1346:	e0 0d       	add	r30, r0
    1348:	f1 1d       	adc	r31, r1
    134a:	11 24       	eor	r1, r1
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	92 83       	std	Z+2, r25	; 0x02
    1350:	28 c0       	rjmp	.+80     	; 0x13a2 <LCD_guage+0xdc>
		else if (val < 69)
    1352:	85 34       	cpi	r24, 0x45	; 69
    1354:	60 f4       	brcc	.+24     	; 0x136e <LCD_guage+0xa8>
			lcd1[8*position + 2] = 5;
    1356:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    135a:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    135e:	98 e0       	ldi	r25, 0x08	; 8
    1360:	69 9f       	mul	r22, r25
    1362:	e0 0d       	add	r30, r0
    1364:	f1 1d       	adc	r31, r1
    1366:	11 24       	eor	r1, r1
    1368:	95 e0       	ldi	r25, 0x05	; 5
    136a:	92 83       	std	Z+2, r25	; 0x02
    136c:	1a c0       	rjmp	.+52     	; 0x13a2 <LCD_guage+0xdc>
		else if (val < 82)
    136e:	82 35       	cpi	r24, 0x52	; 82
    1370:	60 f4       	brcc	.+24     	; 0x138a <LCD_guage+0xc4>
			lcd1[8*position + 2] = 7;
    1372:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1376:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    137a:	98 e0       	ldi	r25, 0x08	; 8
    137c:	69 9f       	mul	r22, r25
    137e:	e0 0d       	add	r30, r0
    1380:	f1 1d       	adc	r31, r1
    1382:	11 24       	eor	r1, r1
    1384:	97 e0       	ldi	r25, 0x07	; 7
    1386:	92 83       	std	Z+2, r25	; 0x02
    1388:	0e c0       	rjmp	.+28     	; 0x13a6 <LCD_guage+0xe0>
		else if (val >= 82)
			lcd1[8*position + 2] = ' ';
    138a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    138e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1392:	98 e0       	ldi	r25, 0x08	; 8
    1394:	69 9f       	mul	r22, r25
    1396:	e0 0d       	add	r30, r0
    1398:	f1 1d       	adc	r31, r1
    139a:	11 24       	eor	r1, r1
    139c:	90 e2       	ldi	r25, 0x20	; 32
    139e:	92 83       	std	Z+2, r25	; 0x02
    13a0:	0e c0       	rjmp	.+28     	; 0x13be <LCD_guage+0xf8>

		// 3rd digit
		if (val < 82)
    13a2:	82 35       	cpi	r24, 0x52	; 82
    13a4:	60 f4       	brcc	.+24     	; 0x13be <LCD_guage+0xf8>
			lcd1[8*position + 3] = 0xFF;
    13a6:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    13aa:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    13ae:	98 e0       	ldi	r25, 0x08	; 8
    13b0:	69 9f       	mul	r22, r25
    13b2:	e0 0d       	add	r30, r0
    13b4:	f1 1d       	adc	r31, r1
    13b6:	11 24       	eor	r1, r1
    13b8:	9f ef       	ldi	r25, 0xFF	; 255
    13ba:	93 83       	std	Z+3, r25	; 0x03
    13bc:	27 c0       	rjmp	.+78     	; 0x140c <LCD_guage+0x146>
		else if (val < 95)
    13be:	8f 35       	cpi	r24, 0x5F	; 95
    13c0:	60 f4       	brcc	.+24     	; 0x13da <LCD_guage+0x114>
			lcd1[8*position + 3] = 4;
    13c2:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    13c6:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    13ca:	98 e0       	ldi	r25, 0x08	; 8
    13cc:	69 9f       	mul	r22, r25
    13ce:	e0 0d       	add	r30, r0
    13d0:	f1 1d       	adc	r31, r1
    13d2:	11 24       	eor	r1, r1
    13d4:	94 e0       	ldi	r25, 0x04	; 4
    13d6:	93 83       	std	Z+3, r25	; 0x03
    13d8:	19 c0       	rjmp	.+50     	; 0x140c <LCD_guage+0x146>
		else if (val < 108)
    13da:	8c 36       	cpi	r24, 0x6C	; 108
    13dc:	60 f4       	brcc	.+24     	; 0x13f6 <LCD_guage+0x130>
			lcd1[8*position + 3] = 6;
    13de:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    13e2:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    13e6:	98 e0       	ldi	r25, 0x08	; 8
    13e8:	69 9f       	mul	r22, r25
    13ea:	e0 0d       	add	r30, r0
    13ec:	f1 1d       	adc	r31, r1
    13ee:	11 24       	eor	r1, r1
    13f0:	96 e0       	ldi	r25, 0x06	; 6
    13f2:	93 83       	std	Z+3, r25	; 0x03
    13f4:	0b c0       	rjmp	.+22     	; 0x140c <LCD_guage+0x146>
		else if (val >= 108)
			lcd1[8*position + 3] = ' ';
    13f6:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    13fa:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    13fe:	98 e0       	ldi	r25, 0x08	; 8
    1400:	69 9f       	mul	r22, r25
    1402:	e0 0d       	add	r30, r0
    1404:	f1 1d       	adc	r31, r1
    1406:	11 24       	eor	r1, r1
    1408:	90 e2       	ldi	r25, 0x20	; 32
    140a:	93 83       	std	Z+3, r25	; 0x03

		// 4th digit
		if (val < 121)
    140c:	89 37       	cpi	r24, 0x79	; 121
    140e:	60 f4       	brcc	.+24     	; 0x1428 <LCD_guage+0x162>
			lcd1[8*position + 4] = 2;
    1410:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1414:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1418:	98 e0       	ldi	r25, 0x08	; 8
    141a:	69 9f       	mul	r22, r25
    141c:	e0 0d       	add	r30, r0
    141e:	f1 1d       	adc	r31, r1
    1420:	11 24       	eor	r1, r1
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	94 83       	std	Z+4, r25	; 0x04
    1426:	19 c0       	rjmp	.+50     	; 0x145a <LCD_guage+0x194>
		else if (val < 134)
    1428:	86 38       	cpi	r24, 0x86	; 134
    142a:	60 f4       	brcc	.+24     	; 0x1444 <LCD_guage+0x17e>
			lcd1[8*position + 4] = '|';
    142c:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1430:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1434:	98 e0       	ldi	r25, 0x08	; 8
    1436:	69 9f       	mul	r22, r25
    1438:	e0 0d       	add	r30, r0
    143a:	f1 1d       	adc	r31, r1
    143c:	11 24       	eor	r1, r1
    143e:	9c e7       	ldi	r25, 0x7C	; 124
    1440:	94 83       	std	Z+4, r25	; 0x04
    1442:	0b c0       	rjmp	.+22     	; 0x145a <LCD_guage+0x194>
		else if (val >= 134)
			lcd1[8*position + 4] = 5;
    1444:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1448:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    144c:	98 e0       	ldi	r25, 0x08	; 8
    144e:	69 9f       	mul	r22, r25
    1450:	e0 0d       	add	r30, r0
    1452:	f1 1d       	adc	r31, r1
    1454:	11 24       	eor	r1, r1
    1456:	95 e0       	ldi	r25, 0x05	; 5
    1458:	94 83       	std	Z+4, r25	; 0x04

		// 5th digit
		if (val >= 173)
    145a:	8d 3a       	cpi	r24, 0xAD	; 173
    145c:	60 f0       	brcs	.+24     	; 0x1476 <LCD_guage+0x1b0>
			lcd1[8*position + 5] = 0xFF;
    145e:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1462:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1466:	98 e0       	ldi	r25, 0x08	; 8
    1468:	69 9f       	mul	r22, r25
    146a:	e0 0d       	add	r30, r0
    146c:	f1 1d       	adc	r31, r1
    146e:	11 24       	eor	r1, r1
    1470:	9f ef       	ldi	r25, 0xFF	; 255
    1472:	95 83       	std	Z+5, r25	; 0x05
    1474:	27 c0       	rjmp	.+78     	; 0x14c4 <LCD_guage+0x1fe>
		else if (val >= 160)
    1476:	80 3a       	cpi	r24, 0xA0	; 160
    1478:	60 f0       	brcs	.+24     	; 0x1492 <LCD_guage+0x1cc>
			lcd1[8*position + 5] = 3;
    147a:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    147e:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1482:	98 e0       	ldi	r25, 0x08	; 8
    1484:	69 9f       	mul	r22, r25
    1486:	e0 0d       	add	r30, r0
    1488:	f1 1d       	adc	r31, r1
    148a:	11 24       	eor	r1, r1
    148c:	93 e0       	ldi	r25, 0x03	; 3
    148e:	95 83       	std	Z+5, r25	; 0x05
    1490:	19 c0       	rjmp	.+50     	; 0x14c4 <LCD_guage+0x1fe>
		else if (val >= 147)
    1492:	83 39       	cpi	r24, 0x93	; 147
    1494:	60 f0       	brcs	.+24     	; 0x14ae <LCD_guage+0x1e8>
			lcd1[8*position + 5] = 1;
    1496:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    149a:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    149e:	98 e0       	ldi	r25, 0x08	; 8
    14a0:	69 9f       	mul	r22, r25
    14a2:	e0 0d       	add	r30, r0
    14a4:	f1 1d       	adc	r31, r1
    14a6:	11 24       	eor	r1, r1
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	95 83       	std	Z+5, r25	; 0x05
    14ac:	0b c0       	rjmp	.+22     	; 0x14c4 <LCD_guage+0x1fe>
		else if (val < 147)
			lcd1[8*position + 5] = ' ';
    14ae:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    14b2:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    14b6:	98 e0       	ldi	r25, 0x08	; 8
    14b8:	69 9f       	mul	r22, r25
    14ba:	e0 0d       	add	r30, r0
    14bc:	f1 1d       	adc	r31, r1
    14be:	11 24       	eor	r1, r1
    14c0:	90 e2       	ldi	r25, 0x20	; 32
    14c2:	95 83       	std	Z+5, r25	; 0x05

		// 6th digit
		if (val >= 199)
    14c4:	87 3c       	cpi	r24, 0xC7	; 199
    14c6:	60 f0       	brcs	.+24     	; 0x14e0 <LCD_guage+0x21a>
			lcd1[8*position + 6] = 0xFF;
    14c8:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    14cc:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    14d0:	98 e0       	ldi	r25, 0x08	; 8
    14d2:	69 9f       	mul	r22, r25
    14d4:	e0 0d       	add	r30, r0
    14d6:	f1 1d       	adc	r31, r1
    14d8:	11 24       	eor	r1, r1
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	96 83       	std	Z+6, r25	; 0x06
    14de:	26 c0       	rjmp	.+76     	; 0x152c <LCD_guage+0x266>
		else if (val >= 186)
    14e0:	8a 3b       	cpi	r24, 0xBA	; 186
    14e2:	60 f0       	brcs	.+24     	; 0x14fc <LCD_guage+0x236>
			lcd1[8*position + 6] = 2;
    14e4:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    14e8:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    14ec:	98 e0       	ldi	r25, 0x08	; 8
    14ee:	69 9f       	mul	r22, r25
    14f0:	e0 0d       	add	r30, r0
    14f2:	f1 1d       	adc	r31, r1
    14f4:	11 24       	eor	r1, r1
    14f6:	92 e0       	ldi	r25, 0x02	; 2
    14f8:	96 83       	std	Z+6, r25	; 0x06
    14fa:	18 c0       	rjmp	.+48     	; 0x152c <LCD_guage+0x266>
		else if (val >= 173)
    14fc:	8d 3a       	cpi	r24, 0xAD	; 173
    14fe:	58 f0       	brcs	.+22     	; 0x1516 <LCD_guage+0x250>
			lcd1[8*position + 6] = 0;
    1500:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1504:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1508:	98 e0       	ldi	r25, 0x08	; 8
    150a:	69 9f       	mul	r22, r25
    150c:	e0 0d       	add	r30, r0
    150e:	f1 1d       	adc	r31, r1
    1510:	11 24       	eor	r1, r1
    1512:	16 82       	std	Z+6, r1	; 0x06
    1514:	0b c0       	rjmp	.+22     	; 0x152c <LCD_guage+0x266>
		else if (val < 173)
			lcd1[8*position + 6] = ' ';
    1516:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    151a:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    151e:	98 e0       	ldi	r25, 0x08	; 8
    1520:	69 9f       	mul	r22, r25
    1522:	e0 0d       	add	r30, r0
    1524:	f1 1d       	adc	r31, r1
    1526:	11 24       	eor	r1, r1
    1528:	90 e2       	ldi	r25, 0x20	; 32
    152a:	96 83       	std	Z+6, r25	; 0x06

		// 7th digit
		if (val >= 238)
    152c:	8e 3e       	cpi	r24, 0xEE	; 238
    152e:	60 f0       	brcs	.+24     	; 0x1548 <LCD_guage+0x282>
			lcd1[8*position + 7] = 0xFF;
    1530:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1534:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1538:	88 e0       	ldi	r24, 0x08	; 8
    153a:	68 9f       	mul	r22, r24
    153c:	e0 0d       	add	r30, r0
    153e:	f1 1d       	adc	r31, r1
    1540:	11 24       	eor	r1, r1
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	87 83       	std	Z+7, r24	; 0x07
    1546:	08 95       	ret
		else if (val >= 225)
    1548:	81 3e       	cpi	r24, 0xE1	; 225
    154a:	60 f0       	brcs	.+24     	; 0x1564 <LCD_guage+0x29e>
			lcd1[8*position + 7] = 3;
    154c:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1550:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1554:	98 e0       	ldi	r25, 0x08	; 8
    1556:	69 9f       	mul	r22, r25
    1558:	e0 0d       	add	r30, r0
    155a:	f1 1d       	adc	r31, r1
    155c:	11 24       	eor	r1, r1
    155e:	83 e0       	ldi	r24, 0x03	; 3
    1560:	87 83       	std	Z+7, r24	; 0x07
    1562:	08 95       	ret
		else if (val >= 212)
    1564:	84 3d       	cpi	r24, 0xD4	; 212
    1566:	60 f0       	brcs	.+24     	; 0x1580 <LCD_guage+0x2ba>
			lcd1[8*position + 7] = 1;
    1568:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    156c:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1570:	88 e0       	ldi	r24, 0x08	; 8
    1572:	68 9f       	mul	r22, r24
    1574:	e0 0d       	add	r30, r0
    1576:	f1 1d       	adc	r31, r1
    1578:	11 24       	eor	r1, r1
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	87 83       	std	Z+7, r24	; 0x07
    157e:	08 95       	ret
		else if (val < 212)
			lcd1[8*position + 7] = ' ';
    1580:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <lcd1>
    1584:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <lcd1+0x1>
    1588:	98 e0       	ldi	r25, 0x08	; 8
    158a:	69 9f       	mul	r22, r25
    158c:	e0 0d       	add	r30, r0
    158e:	f1 1d       	adc	r31, r1
    1590:	11 24       	eor	r1, r1
    1592:	80 e2       	ldi	r24, 0x20	; 32
    1594:	87 83       	std	Z+7, r24	; 0x07
    1596:	08 95       	ret
	}
	else
	{
		// 1st digit
		if (val < 17)
    1598:	81 31       	cpi	r24, 0x11	; 17
    159a:	90 f4       	brcc	.+36     	; 0x15c0 <LCD_guage+0x2fa>
			lcd2[8*(position-2) + 1] = 0xFF;
    159c:	e6 2f       	mov	r30, r22
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	32 97       	sbiw	r30, 0x02	; 2
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    15b2:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    15b6:	e2 0f       	add	r30, r18
    15b8:	f3 1f       	adc	r31, r19
    15ba:	9f ef       	ldi	r25, 0xFF	; 255
    15bc:	91 83       	std	Z+1, r25	; 0x01
    15be:	39 c0       	rjmp	.+114    	; 0x1632 <LCD_guage+0x36c>
		else if (val < 30)
    15c0:	8e 31       	cpi	r24, 0x1E	; 30
    15c2:	90 f4       	brcc	.+36     	; 0x15e8 <LCD_guage+0x322>
			lcd2[8*(position-2) + 1] = 4;
    15c4:	e6 2f       	mov	r30, r22
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	32 97       	sbiw	r30, 0x02	; 2
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	ee 0f       	add	r30, r30
    15d4:	ff 1f       	adc	r31, r31
    15d6:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    15da:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    15de:	e2 0f       	add	r30, r18
    15e0:	f3 1f       	adc	r31, r19
    15e2:	94 e0       	ldi	r25, 0x04	; 4
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	25 c0       	rjmp	.+74     	; 0x1632 <LCD_guage+0x36c>
		else if (val < 43)
    15e8:	8b 32       	cpi	r24, 0x2B	; 43
    15ea:	90 f4       	brcc	.+36     	; 0x1610 <LCD_guage+0x34a>
			lcd2[8*(position-2) + 1] = 6;
    15ec:	e6 2f       	mov	r30, r22
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	32 97       	sbiw	r30, 0x02	; 2
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	ee 0f       	add	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    1602:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1606:	e2 0f       	add	r30, r18
    1608:	f3 1f       	adc	r31, r19
    160a:	96 e0       	ldi	r25, 0x06	; 6
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	11 c0       	rjmp	.+34     	; 0x1632 <LCD_guage+0x36c>
		else if (val >= 43)
			lcd2[8*(position-2) + 1] = ' ';
    1610:	e6 2f       	mov	r30, r22
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	32 97       	sbiw	r30, 0x02	; 2
    1616:	ee 0f       	add	r30, r30
    1618:	ff 1f       	adc	r31, r31
    161a:	ee 0f       	add	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    1626:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    162a:	e2 0f       	add	r30, r18
    162c:	f3 1f       	adc	r31, r19
    162e:	90 e2       	ldi	r25, 0x20	; 32
    1630:	91 83       	std	Z+1, r25	; 0x01

		// 2nd digit
		if (val < 56)
    1632:	88 33       	cpi	r24, 0x38	; 56
    1634:	90 f4       	brcc	.+36     	; 0x165a <LCD_guage+0x394>
			lcd2[8*(position-2) + 2] = 0xFF;
    1636:	e6 2f       	mov	r30, r22
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	32 97       	sbiw	r30, 0x02	; 2
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    164c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1650:	e2 0f       	add	r30, r18
    1652:	f3 1f       	adc	r31, r19
    1654:	9f ef       	ldi	r25, 0xFF	; 255
    1656:	92 83       	std	Z+2, r25	; 0x02
    1658:	3a c0       	rjmp	.+116    	; 0x16ce <LCD_guage+0x408>
		else if (val < 69)
    165a:	85 34       	cpi	r24, 0x45	; 69
    165c:	90 f4       	brcc	.+36     	; 0x1682 <LCD_guage+0x3bc>
			lcd2[8*(position-2) + 2] = 5;
    165e:	e6 2f       	mov	r30, r22
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	32 97       	sbiw	r30, 0x02	; 2
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	ee 0f       	add	r30, r30
    166e:	ff 1f       	adc	r31, r31
    1670:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    1674:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1678:	e2 0f       	add	r30, r18
    167a:	f3 1f       	adc	r31, r19
    167c:	95 e0       	ldi	r25, 0x05	; 5
    167e:	92 83       	std	Z+2, r25	; 0x02
    1680:	26 c0       	rjmp	.+76     	; 0x16ce <LCD_guage+0x408>
		else if (val < 82)
    1682:	82 35       	cpi	r24, 0x52	; 82
    1684:	90 f4       	brcc	.+36     	; 0x16aa <LCD_guage+0x3e4>
			lcd2[8*(position-2) + 2] = 7;
    1686:	e6 2f       	mov	r30, r22
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	32 97       	sbiw	r30, 0x02	; 2
    168c:	ee 0f       	add	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    169c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    16a0:	e2 0f       	add	r30, r18
    16a2:	f3 1f       	adc	r31, r19
    16a4:	97 e0       	ldi	r25, 0x07	; 7
    16a6:	92 83       	std	Z+2, r25	; 0x02
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <LCD_guage+0x40c>
		else if (val >= 82)
			lcd2[8*(position-2) + 2] = ' ';
    16aa:	e6 2f       	mov	r30, r22
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	32 97       	sbiw	r30, 0x02	; 2
    16b0:	ee 0f       	add	r30, r30
    16b2:	ff 1f       	adc	r31, r31
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    16c0:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    16c4:	e2 0f       	add	r30, r18
    16c6:	f3 1f       	adc	r31, r19
    16c8:	90 e2       	ldi	r25, 0x20	; 32
    16ca:	92 83       	std	Z+2, r25	; 0x02
    16cc:	14 c0       	rjmp	.+40     	; 0x16f6 <LCD_guage+0x430>

		// 3rd digit
		if (val < 82)
    16ce:	82 35       	cpi	r24, 0x52	; 82
    16d0:	90 f4       	brcc	.+36     	; 0x16f6 <LCD_guage+0x430>
			lcd2[8*(position-2) + 3] = 0xFF;
    16d2:	e6 2f       	mov	r30, r22
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	32 97       	sbiw	r30, 0x02	; 2
    16d8:	ee 0f       	add	r30, r30
    16da:	ff 1f       	adc	r31, r31
    16dc:	ee 0f       	add	r30, r30
    16de:	ff 1f       	adc	r31, r31
    16e0:	ee 0f       	add	r30, r30
    16e2:	ff 1f       	adc	r31, r31
    16e4:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    16e8:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    16ec:	e2 0f       	add	r30, r18
    16ee:	f3 1f       	adc	r31, r19
    16f0:	9f ef       	ldi	r25, 0xFF	; 255
    16f2:	93 83       	std	Z+3, r25	; 0x03
    16f4:	39 c0       	rjmp	.+114    	; 0x1768 <LCD_guage+0x4a2>
		else if (val < 95)
    16f6:	8f 35       	cpi	r24, 0x5F	; 95
    16f8:	90 f4       	brcc	.+36     	; 0x171e <LCD_guage+0x458>
			lcd2[8*(position-2) + 3] = 4;
    16fa:	e6 2f       	mov	r30, r22
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	32 97       	sbiw	r30, 0x02	; 2
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    1710:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1714:	e2 0f       	add	r30, r18
    1716:	f3 1f       	adc	r31, r19
    1718:	94 e0       	ldi	r25, 0x04	; 4
    171a:	93 83       	std	Z+3, r25	; 0x03
    171c:	25 c0       	rjmp	.+74     	; 0x1768 <LCD_guage+0x4a2>
		else if (val < 108)
    171e:	8c 36       	cpi	r24, 0x6C	; 108
    1720:	90 f4       	brcc	.+36     	; 0x1746 <LCD_guage+0x480>
			lcd2[8*(position-2) + 3] = 6;
    1722:	e6 2f       	mov	r30, r22
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	32 97       	sbiw	r30, 0x02	; 2
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    1738:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    173c:	e2 0f       	add	r30, r18
    173e:	f3 1f       	adc	r31, r19
    1740:	96 e0       	ldi	r25, 0x06	; 6
    1742:	93 83       	std	Z+3, r25	; 0x03
    1744:	11 c0       	rjmp	.+34     	; 0x1768 <LCD_guage+0x4a2>
		else if (val >= 108)
			lcd2[8*(position-2) + 3] = ' ';
    1746:	e6 2f       	mov	r30, r22
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	32 97       	sbiw	r30, 0x02	; 2
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    175c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1760:	e2 0f       	add	r30, r18
    1762:	f3 1f       	adc	r31, r19
    1764:	90 e2       	ldi	r25, 0x20	; 32
    1766:	93 83       	std	Z+3, r25	; 0x03

		// 4th digit
		if (val < 121)
    1768:	89 37       	cpi	r24, 0x79	; 121
    176a:	90 f4       	brcc	.+36     	; 0x1790 <LCD_guage+0x4ca>
			lcd2[8*(position-2) + 4] = 2;
    176c:	e6 2f       	mov	r30, r22
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	32 97       	sbiw	r30, 0x02	; 2
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	ee 0f       	add	r30, r30
    1778:	ff 1f       	adc	r31, r31
    177a:	ee 0f       	add	r30, r30
    177c:	ff 1f       	adc	r31, r31
    177e:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    1782:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1786:	e2 0f       	add	r30, r18
    1788:	f3 1f       	adc	r31, r19
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	94 83       	std	Z+4, r25	; 0x04
    178e:	25 c0       	rjmp	.+74     	; 0x17da <LCD_guage+0x514>
		else if (val < 134)
    1790:	86 38       	cpi	r24, 0x86	; 134
    1792:	90 f4       	brcc	.+36     	; 0x17b8 <LCD_guage+0x4f2>
			lcd2[8*(position-2) + 4] = '|';
    1794:	e6 2f       	mov	r30, r22
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	32 97       	sbiw	r30, 0x02	; 2
    179a:	ee 0f       	add	r30, r30
    179c:	ff 1f       	adc	r31, r31
    179e:	ee 0f       	add	r30, r30
    17a0:	ff 1f       	adc	r31, r31
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    17aa:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    17ae:	e2 0f       	add	r30, r18
    17b0:	f3 1f       	adc	r31, r19
    17b2:	9c e7       	ldi	r25, 0x7C	; 124
    17b4:	94 83       	std	Z+4, r25	; 0x04
    17b6:	11 c0       	rjmp	.+34     	; 0x17da <LCD_guage+0x514>
		else if (val >= 134)
			lcd2[8*(position-2) + 4] = 5;
    17b8:	e6 2f       	mov	r30, r22
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	32 97       	sbiw	r30, 0x02	; 2
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    17ce:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    17d2:	e2 0f       	add	r30, r18
    17d4:	f3 1f       	adc	r31, r19
    17d6:	95 e0       	ldi	r25, 0x05	; 5
    17d8:	94 83       	std	Z+4, r25	; 0x04

		// 5th digit
		if (val >= 173)
    17da:	8d 3a       	cpi	r24, 0xAD	; 173
    17dc:	90 f0       	brcs	.+36     	; 0x1802 <LCD_guage+0x53c>
			lcd2[8*(position-2) + 5] = 0xFF;
    17de:	e6 2f       	mov	r30, r22
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	32 97       	sbiw	r30, 0x02	; 2
    17e4:	ee 0f       	add	r30, r30
    17e6:	ff 1f       	adc	r31, r31
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	ee 0f       	add	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    17f4:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    17f8:	e2 0f       	add	r30, r18
    17fa:	f3 1f       	adc	r31, r19
    17fc:	9f ef       	ldi	r25, 0xFF	; 255
    17fe:	95 83       	std	Z+5, r25	; 0x05
    1800:	39 c0       	rjmp	.+114    	; 0x1874 <LCD_guage+0x5ae>
		else if (val >= 160)
    1802:	80 3a       	cpi	r24, 0xA0	; 160
    1804:	90 f0       	brcs	.+36     	; 0x182a <LCD_guage+0x564>
			lcd2[8*(position-2) + 5] = 3;
    1806:	e6 2f       	mov	r30, r22
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	32 97       	sbiw	r30, 0x02	; 2
    180c:	ee 0f       	add	r30, r30
    180e:	ff 1f       	adc	r31, r31
    1810:	ee 0f       	add	r30, r30
    1812:	ff 1f       	adc	r31, r31
    1814:	ee 0f       	add	r30, r30
    1816:	ff 1f       	adc	r31, r31
    1818:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    181c:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1820:	e2 0f       	add	r30, r18
    1822:	f3 1f       	adc	r31, r19
    1824:	93 e0       	ldi	r25, 0x03	; 3
    1826:	95 83       	std	Z+5, r25	; 0x05
    1828:	25 c0       	rjmp	.+74     	; 0x1874 <LCD_guage+0x5ae>
		else if (val >= 147)
    182a:	83 39       	cpi	r24, 0x93	; 147
    182c:	90 f0       	brcs	.+36     	; 0x1852 <LCD_guage+0x58c>
			lcd2[8*(position-2) + 5] = 1;
    182e:	e6 2f       	mov	r30, r22
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	32 97       	sbiw	r30, 0x02	; 2
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	ee 0f       	add	r30, r30
    183a:	ff 1f       	adc	r31, r31
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    1844:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1848:	e2 0f       	add	r30, r18
    184a:	f3 1f       	adc	r31, r19
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	95 83       	std	Z+5, r25	; 0x05
    1850:	11 c0       	rjmp	.+34     	; 0x1874 <LCD_guage+0x5ae>
		else if (val < 147)
			lcd2[8*(position-2) + 5] = ' ';
    1852:	e6 2f       	mov	r30, r22
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	32 97       	sbiw	r30, 0x02	; 2
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	ee 0f       	add	r30, r30
    185e:	ff 1f       	adc	r31, r31
    1860:	ee 0f       	add	r30, r30
    1862:	ff 1f       	adc	r31, r31
    1864:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    1868:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    186c:	e2 0f       	add	r30, r18
    186e:	f3 1f       	adc	r31, r19
    1870:	90 e2       	ldi	r25, 0x20	; 32
    1872:	95 83       	std	Z+5, r25	; 0x05

		// 6th digit
		if (val >= 199)
    1874:	87 3c       	cpi	r24, 0xC7	; 199
    1876:	90 f0       	brcs	.+36     	; 0x189c <LCD_guage+0x5d6>
			lcd2[8*(position-2) + 6] = 0xFF;
    1878:	e6 2f       	mov	r30, r22
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	32 97       	sbiw	r30, 0x02	; 2
    187e:	ee 0f       	add	r30, r30
    1880:	ff 1f       	adc	r31, r31
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    188e:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1892:	e2 0f       	add	r30, r18
    1894:	f3 1f       	adc	r31, r19
    1896:	9f ef       	ldi	r25, 0xFF	; 255
    1898:	96 83       	std	Z+6, r25	; 0x06
    189a:	38 c0       	rjmp	.+112    	; 0x190c <LCD_guage+0x646>
		else if (val >= 186)
    189c:	8a 3b       	cpi	r24, 0xBA	; 186
    189e:	90 f0       	brcs	.+36     	; 0x18c4 <LCD_guage+0x5fe>
			lcd2[8*(position-2) + 6] = 2;
    18a0:	e6 2f       	mov	r30, r22
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	32 97       	sbiw	r30, 0x02	; 2
    18a6:	ee 0f       	add	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	ee 0f       	add	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	ee 0f       	add	r30, r30
    18b0:	ff 1f       	adc	r31, r31
    18b2:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    18b6:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    18ba:	e2 0f       	add	r30, r18
    18bc:	f3 1f       	adc	r31, r19
    18be:	92 e0       	ldi	r25, 0x02	; 2
    18c0:	96 83       	std	Z+6, r25	; 0x06
    18c2:	24 c0       	rjmp	.+72     	; 0x190c <LCD_guage+0x646>
		else if (val >= 173)
    18c4:	8d 3a       	cpi	r24, 0xAD	; 173
    18c6:	88 f0       	brcs	.+34     	; 0x18ea <LCD_guage+0x624>
			lcd2[8*(position-2) + 6] = 0;
    18c8:	e6 2f       	mov	r30, r22
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	32 97       	sbiw	r30, 0x02	; 2
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	ee 0f       	add	r30, r30
    18d4:	ff 1f       	adc	r31, r31
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    18de:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    18e2:	e2 0f       	add	r30, r18
    18e4:	f3 1f       	adc	r31, r19
    18e6:	16 82       	std	Z+6, r1	; 0x06
    18e8:	11 c0       	rjmp	.+34     	; 0x190c <LCD_guage+0x646>
		else if (val < 173)
			lcd2[8*(position-2) + 6] = ' ';
    18ea:	e6 2f       	mov	r30, r22
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	32 97       	sbiw	r30, 0x02	; 2
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <lcd2>
    1900:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <lcd2+0x1>
    1904:	e2 0f       	add	r30, r18
    1906:	f3 1f       	adc	r31, r19
    1908:	90 e2       	ldi	r25, 0x20	; 32
    190a:	96 83       	std	Z+6, r25	; 0x06

		// 7th digit
		if (val >= 238)
    190c:	8e 3e       	cpi	r24, 0xEE	; 238
    190e:	90 f0       	brcs	.+36     	; 0x1934 <LCD_guage+0x66e>
			lcd2[8*(position-2) + 7] = 0xFF;
    1910:	e6 2f       	mov	r30, r22
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	32 97       	sbiw	r30, 0x02	; 2
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	ee 0f       	add	r30, r30
    1920:	ff 1f       	adc	r31, r31
    1922:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <lcd2>
    1926:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <lcd2+0x1>
    192a:	e6 0f       	add	r30, r22
    192c:	f7 1f       	adc	r31, r23
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	87 83       	std	Z+7, r24	; 0x07
    1932:	08 95       	ret
		else if (val >= 225)
    1934:	81 3e       	cpi	r24, 0xE1	; 225
    1936:	90 f0       	brcs	.+36     	; 0x195c <LCD_guage+0x696>
			lcd2[8*(position-2) + 7] = 3;
    1938:	e6 2f       	mov	r30, r22
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	32 97       	sbiw	r30, 0x02	; 2
    193e:	ee 0f       	add	r30, r30
    1940:	ff 1f       	adc	r31, r31
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	ee 0f       	add	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <lcd2>
    194e:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <lcd2+0x1>
    1952:	e6 0f       	add	r30, r22
    1954:	f7 1f       	adc	r31, r23
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	87 83       	std	Z+7, r24	; 0x07
    195a:	08 95       	ret
		else if (val >= 212)
    195c:	84 3d       	cpi	r24, 0xD4	; 212
    195e:	90 f0       	brcs	.+36     	; 0x1984 <LCD_guage+0x6be>
			lcd2[8*(position-2) + 7] = 1;
    1960:	e6 2f       	mov	r30, r22
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	32 97       	sbiw	r30, 0x02	; 2
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	ee 0f       	add	r30, r30
    1970:	ff 1f       	adc	r31, r31
    1972:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <lcd2>
    1976:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <lcd2+0x1>
    197a:	e6 0f       	add	r30, r22
    197c:	f7 1f       	adc	r31, r23
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	87 83       	std	Z+7, r24	; 0x07
    1982:	08 95       	ret
		else if (val < 212)
			lcd2[8*(position-2) + 7] = ' ';
    1984:	e6 2f       	mov	r30, r22
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	32 97       	sbiw	r30, 0x02	; 2
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	ee 0f       	add	r30, r30
    1994:	ff 1f       	adc	r31, r31
    1996:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <lcd2>
    199a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <lcd2+0x1>
    199e:	e8 0f       	add	r30, r24
    19a0:	f9 1f       	adc	r31, r25
    19a2:	80 e2       	ldi	r24, 0x20	; 32
    19a4:	87 83       	std	Z+7, r24	; 0x07
    19a6:	08 95       	ret

000019a8 <power_off>:
{		
	uint8_t addr_temp;
	
	// Save trim
	addr_temp = 15*cur_model + 1;
	eeprom_update_byte((uint8_t*)addr_temp,       trim[AILERON]);
    19a8:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <cur_model>
    19ac:	c8 2f       	mov	r28, r24
    19ae:	cc 0f       	add	r28, r28
    19b0:	c8 0f       	add	r28, r24
    19b2:	8c 2f       	mov	r24, r28
    19b4:	88 0f       	add	r24, r24
    19b6:	88 0f       	add	r24, r24
    19b8:	c8 0f       	add	r28, r24
    19ba:	cf 5f       	subi	r28, 0xFF	; 255
    19bc:	d0 e0       	ldi	r29, 0x00	; 0
    19be:	07 eb       	ldi	r16, 0xB7	; 183
    19c0:	15 e0       	ldi	r17, 0x05	; 5
    19c2:	f8 01       	movw	r30, r16
    19c4:	60 81       	ld	r22, Z
    19c6:	ce 01       	movw	r24, r28
    19c8:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
	eeprom_update_byte((uint8_t*)(addr_temp + 1), trim[ELEVATOR]);
    19cc:	f8 01       	movw	r30, r16
    19ce:	61 81       	ldd	r22, Z+1	; 0x01
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
	eeprom_update_byte((uint8_t*)(addr_temp + 2), trim[RUDDER]);
    19d8:	f8 01       	movw	r30, r16
    19da:	63 81       	ldd	r22, Z+3	; 0x03
    19dc:	ce 01       	movw	r24, r28
    19de:	02 96       	adiw	r24, 0x02	; 2
    19e0:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
	eeprom_update_byte((uint8_t*)(addr_temp + 3), trim[CH5]);
    19e4:	f8 01       	movw	r30, r16
    19e6:	64 81       	ldd	r22, Z+4	; 0x04
    19e8:	ce 01       	movw	r24, r28
    19ea:	03 96       	adiw	r24, 0x03	; 3
    19ec:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19f0:	8f e3       	ldi	r24, 0x3F	; 63
    19f2:	9c e9       	ldi	r25, 0x9C	; 156
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <power_off+0x4c>
    19f8:	00 c0       	rjmp	.+0      	; 0x19fa <power_off+0x52>
    19fa:	00 00       	nop
	_delay_ms(20);
	
	
	// LCD	
	LCD_home();
    19fc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
	LCD_string("      BYE!      ", 16);
    1a00:	60 e1       	ldi	r22, 0x10	; 16
    1a02:	85 e4       	ldi	r24, 0x45	; 69
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
	LCD_NWL();
    1a0a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
	LCD_string("                ", 16);
    1a0e:	60 e1       	ldi	r22, 0x10	; 16
    1a10:	86 e5       	ldi	r24, 0x56	; 86
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
	
	
	// Power off sound effect
	buzzer(900);
    1a18:	84 e8       	ldi	r24, 0x84	; 132
    1a1a:	93 e0       	ldi	r25, 0x03	; 3
    1a1c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    1a20:	9f ef       	ldi	r25, 0xFF	; 255
    1a22:	e2 e5       	ldi	r30, 0x52	; 82
    1a24:	f7 e0       	ldi	r31, 0x07	; 7
    1a26:	91 50       	subi	r25, 0x01	; 1
    1a28:	e0 40       	sbci	r30, 0x00	; 0
    1a2a:	f0 40       	sbci	r31, 0x00	; 0
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <power_off+0x7e>
    1a2e:	00 c0       	rjmp	.+0      	; 0x1a30 <power_off+0x88>
    1a30:	00 00       	nop
	_delay_ms(300);
	buzzer(600);
    1a32:	88 e5       	ldi	r24, 0x58	; 88
    1a34:	92 e0       	ldi	r25, 0x02	; 2
    1a36:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    1a3a:	2f ef       	ldi	r18, 0xFF	; 255
    1a3c:	81 ee       	ldi	r24, 0xE1	; 225
    1a3e:	94 e0       	ldi	r25, 0x04	; 4
    1a40:	21 50       	subi	r18, 0x01	; 1
    1a42:	80 40       	sbci	r24, 0x00	; 0
    1a44:	90 40       	sbci	r25, 0x00	; 0
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <power_off+0x98>
    1a48:	00 c0       	rjmp	.+0      	; 0x1a4a <power_off+0xa2>
    1a4a:	00 00       	nop
	_delay_ms(200);
	buzzer(0);
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    1a54:	ef ef       	ldi	r30, 0xFF	; 255
    1a56:	f2 e5       	ldi	r31, 0x52	; 82
    1a58:	27 e0       	ldi	r18, 0x07	; 7
    1a5a:	e1 50       	subi	r30, 0x01	; 1
    1a5c:	f0 40       	sbci	r31, 0x00	; 0
    1a5e:	20 40       	sbci	r18, 0x00	; 0
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <power_off+0xb2>
    1a62:	00 c0       	rjmp	.+0      	; 0x1a64 <power_off+0xbc>
    1a64:	00 00       	nop
	_delay_ms(300);
	
	// Turn Power regulator off
	while (1)
	{
		PORTD &= ~PWRTOGL;
    1a66:	5c 98       	cbi	0x0b, 4	; 11
    1a68:	8f ef       	ldi	r24, 0xFF	; 255
    1a6a:	99 e6       	ldi	r25, 0x69	; 105
    1a6c:	e8 e1       	ldi	r30, 0x18	; 24
    1a6e:	81 50       	subi	r24, 0x01	; 1
    1a70:	90 40       	sbci	r25, 0x00	; 0
    1a72:	e0 40       	sbci	r30, 0x00	; 0
    1a74:	e1 f7       	brne	.-8      	; 0x1a6e <power_off+0xc6>
    1a76:	00 c0       	rjmp	.+0      	; 0x1a78 <power_off+0xd0>
    1a78:	00 00       	nop
    1a7a:	f5 cf       	rjmp	.-22     	; 0x1a66 <power_off+0xbe>

00001a7c <__vector_16>:
/****************************************************/
/*      8ms timer									*/
/*													*/
/****************************************************/
ISR (TIMER0_OVF_vect)
{
    1a7c:	1f 92       	push	r1
    1a7e:	0f 92       	push	r0
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	0f 92       	push	r0
    1a84:	11 24       	eor	r1, r1
    1a86:	2f 93       	push	r18
    1a88:	3f 93       	push	r19
    1a8a:	4f 93       	push	r20
    1a8c:	5f 93       	push	r21
    1a8e:	6f 93       	push	r22
    1a90:	7f 93       	push	r23
    1a92:	8f 93       	push	r24
    1a94:	9f 93       	push	r25
    1a96:	af 93       	push	r26
    1a98:	bf 93       	push	r27
    1a9a:	ef 93       	push	r30
    1a9c:	ff 93       	push	r31
	timer_8ms++;
    1a9e:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <timer_8ms>
    1aa2:	8f 5f       	subi	r24, 0xFF	; 255
    1aa4:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <timer_8ms>
	timer_24ms++;
    1aa8:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <timer_24ms>
    1aac:	8f 5f       	subi	r24, 0xFF	; 255
    1aae:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <timer_24ms>
	tel_timer++;
    1ab2:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <tel_timer>
    1ab6:	8f 5f       	subi	r24, 0xFF	; 255
    1ab8:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <tel_timer>
	timer_8ms_buzzer++;
    1abc:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <timer_8ms_buzzer>
    1ac0:	8f 5f       	subi	r24, 0xFF	; 255
    1ac2:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <timer_8ms_buzzer>
	timer_8ms_power++;
    1ac6:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <timer_8ms_power>
    1aca:	8f 5f       	subi	r24, 0xFF	; 255
    1acc:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <timer_8ms_power>
	TCNT0 = 5;
    1ad0:	85 e0       	ldi	r24, 0x05	; 5
    1ad2:	86 bd       	out	0x26, r24	; 38
	
	// Servo Delay
	if (mixing_val_3 & SERVO_DEL_1)
    1ad4:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    1ad8:	84 ff       	sbrs	r24, 4
    1ada:	17 c0       	rjmp	.+46     	; 0x1b0a <__vector_16+0x8e>
	{
		if (channel_mix_temp & CH5_SW)
    1adc:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <channel_mix_temp>
    1ae0:	85 ff       	sbrs	r24, 5
    1ae2:	0a c0       	rjmp	.+20     	; 0x1af8 <__vector_16+0x7c>
		{
			// CH5 down
			if (timer_8ms_Ch5Delay > 5)
    1ae4:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <timer_8ms_Ch5Delay>
    1ae8:	86 30       	cpi	r24, 0x06	; 6
    1aea:	78 f0       	brcs	.+30     	; 0x1b0a <__vector_16+0x8e>
				timer_8ms_Ch5Delay--;
    1aec:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <timer_8ms_Ch5Delay>
    1af0:	81 50       	subi	r24, 0x01	; 1
    1af2:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <timer_8ms_Ch5Delay>
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <__vector_16+0x8e>
		}
		else
		{			
			// CH5 up
			if (timer_8ms_Ch5Delay < 250)
    1af8:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <timer_8ms_Ch5Delay>
    1afc:	8a 3f       	cpi	r24, 0xFA	; 250
    1afe:	28 f4       	brcc	.+10     	; 0x1b0a <__vector_16+0x8e>
				timer_8ms_Ch5Delay++;
    1b00:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <timer_8ms_Ch5Delay>
    1b04:	8f 5f       	subi	r24, 0xFF	; 255
    1b06:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <timer_8ms_Ch5Delay>
		}
	}
	
	// 1s counter
	if (timer_8ms > 123)
    1b0a:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <timer_8ms>
    1b0e:	8c 37       	cpi	r24, 0x7C	; 124
    1b10:	c0 f0       	brcs	.+48     	; 0x1b42 <__vector_16+0xc6>
	{
		runtime++;
    1b12:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <runtime>
    1b16:	90 91 c7 05 	lds	r25, 0x05C7	; 0x8005c7 <runtime+0x1>
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <runtime+0x1>
    1b20:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <runtime>
		if (runtime > runtime_set)
    1b24:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <runtime>
    1b28:	30 91 c7 05 	lds	r19, 0x05C7	; 0x8005c7 <runtime+0x1>
    1b2c:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <runtime_set>
    1b30:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <runtime_set+0x1>
    1b34:	82 17       	cp	r24, r18
    1b36:	93 07       	cpc	r25, r19
    1b38:	10 f4       	brcc	.+4      	; 0x1b3e <__vector_16+0xc2>
			power_off();
    1b3a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <power_off>
		timer_8ms = 0;
    1b3e:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <timer_8ms>
	}
	
}
    1b42:	ff 91       	pop	r31
    1b44:	ef 91       	pop	r30
    1b46:	bf 91       	pop	r27
    1b48:	af 91       	pop	r26
    1b4a:	9f 91       	pop	r25
    1b4c:	8f 91       	pop	r24
    1b4e:	7f 91       	pop	r23
    1b50:	6f 91       	pop	r22
    1b52:	5f 91       	pop	r21
    1b54:	4f 91       	pop	r20
    1b56:	3f 91       	pop	r19
    1b58:	2f 91       	pop	r18
    1b5a:	0f 90       	pop	r0
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	0f 90       	pop	r0
    1b60:	1f 90       	pop	r1
    1b62:	18 95       	reti

00001b64 <menu>:
		
	}
	
}
uint8_t menu()
{
    1b64:	2f 92       	push	r2
    1b66:	3f 92       	push	r3
    1b68:	4f 92       	push	r4
    1b6a:	5f 92       	push	r5
    1b6c:	6f 92       	push	r6
    1b6e:	7f 92       	push	r7
    1b70:	8f 92       	push	r8
    1b72:	9f 92       	push	r9
    1b74:	af 92       	push	r10
    1b76:	bf 92       	push	r11
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <menu+0x26>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <menu+0x28>
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <menu+0x2a>
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
	char* menu_display_h;
	char* menu_display_l;
	uint8_t enter = 0;
	uint8_t addr;
	uint8_t pre_addr, pre_mod;
	menu_input = 0;
    1b92:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
	LCD_CLEAR();
    1b96:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
			if (enter)
			{
				menu_display_h = " Model Number   ";
				menu_display_l = " Model     Exit ";
				
				menu_display_l[7] = cur_model + 49;
    1b9a:	0f 2e       	mov	r0, r31
    1b9c:	ff e0       	ldi	r31, 0x0F	; 15
    1b9e:	8f 2e       	mov	r8, r31
    1ba0:	f3 e0       	ldi	r31, 0x03	; 3
    1ba2:	9f 2e       	mov	r9, r31
    1ba4:	f0 2d       	mov	r31, r0
									menu_input = 0;
								else if (menu_input > 7)
									menu_input = 7;
								
								cur_model = menu_input;
								menu_display_l[7] = menu_input + 49;
    1ba6:	79 2c       	mov	r7, r9
    1ba8:	58 2c       	mov	r5, r8
    1baa:	69 2c       	mov	r6, r9
									menu_input = 3;
								
								switch (menu_input)
								{
									case 3:
										runtime_set = RUNTIME10s;
    1bac:	8b 82       	std	Y+3, r8	; 0x03
	LCD_CLEAR();
	
	while (1)
	{
		// Cursor input
		enter = menu_read();
    1bae:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
		if (menu_input < 0)
    1bb2:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    1bb6:	99 23       	and	r25, r25
    1bb8:	2c f4       	brge	.+10     	; 0x1bc4 <menu+0x60>
			menu_input = MENU_NUM;
    1bba:	9c e0       	ldi	r25, 0x0C	; 12
    1bbc:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    1bc0:	0c 94 08 20 	jmp	0x4010	; 0x4010 <menu+0x24ac>
		else if (menu_input > MENU_NUM)
    1bc4:	9d 30       	cpi	r25, 0x0D	; 13
    1bc6:	1c f0       	brlt	.+6      	; 0x1bce <menu+0x6a>
			menu_input = 0;
    1bc8:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <menu+0x6e>


		////////// Set model number //////////////////////////////////////////////
		if (menu_input == 0)
    1bce:	91 11       	cpse	r25, r1
    1bd0:	63 c1       	rjmp	.+710    	; 0x1e98 <menu+0x334>
			menu_display_h = ">Model Number   ";
			menu_display_l = " Mixing         ";
			pre_mod = cur_model;
			
			// Enter Model Number mode
			if (enter)
    1bd2:	88 23       	and	r24, r24
    1bd4:	11 f4       	brne	.+4      	; 0x1bda <menu+0x76>
    1bd6:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <menu+0x24b4>
		if (menu_input == 0)
		{
			// Display code 
			menu_display_h = ">Model Number   ";
			menu_display_l = " Mixing         ";
			pre_mod = cur_model;
    1bda:	f0 90 cf 05 	lds	r15, 0x05CF	; 0x8005cf <cur_model>
			if (enter)
			{
				menu_display_h = " Model Number   ";
				menu_display_l = " Model     Exit ";
				
				menu_display_l[7] = cur_model + 49;
    1bde:	81 e3       	ldi	r24, 0x31	; 49
    1be0:	8f 0d       	add	r24, r15
    1be2:	f4 01       	movw	r30, r8
    1be4:	87 83       	std	Z+7, r24	; 0x07
				
				LCD_home();
    1be6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
				LCD_string(menu_display_h, 16);
    1bea:	60 e1       	ldi	r22, 0x10	; 16
    1bec:	88 e7       	ldi	r24, 0x78	; 120
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
						menu_input = 1;
					
					// Model number select
					if (menu_input == 0)
					{
						menu_display_l[0]  = '>';
    1bf4:	1e e3       	ldi	r17, 0x3E	; 62
					// Cursor limit
					enter = menu_read();
					if (menu_input < 0)	
						menu_input = 0;
					else if (menu_input > 1)
						menu_input = 1;
    1bf6:	01 e0       	ldi	r16, 0x01	; 1
    1bf8:	eb 80       	ldd	r14, Y+3	; 0x03
				LCD_string(menu_display_h, 16);
				
				while (1)
				{
					// Cursor limit
					enter = menu_read();
    1bfa:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)	
    1bfe:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    1c02:	99 23       	and	r25, r25
    1c04:	1c f4       	brge	.+6      	; 0x1c0c <menu+0xa8>
						menu_input = 0;
    1c06:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    1c0a:	07 c0       	rjmp	.+14     	; 0x1c1a <menu+0xb6>
					else if (menu_input > 1)
    1c0c:	92 30       	cpi	r25, 0x02	; 2
    1c0e:	1c f0       	brlt	.+6      	; 0x1c16 <menu+0xb2>
						menu_input = 1;
    1c10:	00 93 ce 05 	sts	0x05CE, r16	; 0x8005ce <menu_input>
    1c14:	36 c0       	rjmp	.+108    	; 0x1c82 <menu+0x11e>
					
					// Model number select
					if (menu_input == 0)
    1c16:	91 11       	cpse	r25, r1
    1c18:	31 c0       	rjmp	.+98     	; 0x1c7c <menu+0x118>
					{
						menu_display_l[0]  = '>';
    1c1a:	f4 01       	movw	r30, r8
    1c1c:	10 83       	st	Z, r17
						menu_display_l[10] = ' ';
    1c1e:	20 e2       	ldi	r18, 0x20	; 32
    1c20:	22 87       	std	Z+10, r18	; 0x0a
						
						if (enter)
    1c22:	88 23       	and	r24, r24
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <menu+0xc4>
    1c26:	2c c1       	rjmp	.+600    	; 0x1e80 <menu+0x31c>
						{
							menu_input = cur_model;
    1c28:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <cur_model>
    1c2c:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
							
							while (1)
							{
								enter = menu_read();
    1c30:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    1c34:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    1c38:	99 23       	and	r25, r25
    1c3a:	1c f4       	brge	.+6      	; 0x1c42 <menu+0xde>
									menu_input = 0;
    1c3c:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <menu+0xe8>
								else if (menu_input > 7)
    1c42:	98 30       	cpi	r25, 0x08	; 8
    1c44:	1c f0       	brlt	.+6      	; 0x1c4c <menu+0xe8>
									menu_input = 7;
    1c46:	37 e0       	ldi	r19, 0x07	; 7
    1c48:	30 93 ce 05 	sts	0x05CE, r19	; 0x8005ce <menu_input>
								
								cur_model = menu_input;
    1c4c:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    1c50:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <cur_model>
								menu_display_l[7] = menu_input + 49;
    1c54:	9f 5c       	subi	r25, 0xCF	; 207
    1c56:	f4 01       	movw	r30, r8
    1c58:	97 83       	std	Z+7, r25	; 0x07
								
								if (enter)
    1c5a:	88 23       	and	r24, r24
    1c5c:	19 f0       	breq	.+6      	; 0x1c64 <menu+0x100>
								{
									menu_input = 0;
    1c5e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
									break;
    1c62:	0e c1       	rjmp	.+540    	; 0x1e80 <menu+0x31c>
								}
								
								// Display
								LCD_home();
    1c64:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    1c68:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    1c6c:	60 e1       	ldi	r22, 0x10	; 16
    1c6e:	85 2d       	mov	r24, r5
    1c70:	96 2d       	mov	r25, r6
    1c72:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								buzzer_switch();
    1c76:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							}
    1c7a:	da cf       	rjmp	.-76     	; 0x1c30 <menu+0xcc>
						}
					}
					// Exit
					else if (menu_input == 1)
    1c7c:	91 30       	cpi	r25, 0x01	; 1
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <menu+0x11e>
    1c80:	ff c0       	rjmp	.+510    	; 0x1e80 <menu+0x31c>
					{
						menu_display_l[0]  = ' ';
    1c82:	20 e2       	ldi	r18, 0x20	; 32
    1c84:	f4 01       	movw	r30, r8
    1c86:	20 83       	st	Z, r18
						menu_display_l[10] = '>';
    1c88:	12 87       	std	Z+10, r17	; 0x0a
						
						if (enter)
    1c8a:	88 23       	and	r24, r24
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <menu+0x12c>
    1c8e:	f8 c0       	rjmp	.+496    	; 0x1e80 <menu+0x31c>
						{
							// Save previous model data
							pre_addr = pre_mod * 15 + 1;
							
							eeprom_update_byte((uint8_t*)pre_addr,       trim[AILERON]);
    1c90:	8f 2d       	mov	r24, r15
    1c92:	88 0f       	add	r24, r24
    1c94:	f8 0e       	add	r15, r24
    1c96:	3f 2d       	mov	r19, r15
    1c98:	33 0f       	add	r19, r19
    1c9a:	33 0f       	add	r19, r19
    1c9c:	f3 0e       	add	r15, r19
    1c9e:	f3 94       	inc	r15
    1ca0:	8f 2d       	mov	r24, r15
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	07 eb       	ldi	r16, 0xB7	; 183
    1caa:	15 e0       	ldi	r17, 0x05	; 5
    1cac:	f8 01       	movw	r30, r16
    1cae:	60 81       	ld	r22, Z
    1cb0:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 1), trim[ELEVATOR]);
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	61 81       	ldd	r22, Z+1	; 0x01
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 2), trim[RUDDER]);
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	63 81       	ldd	r22, Z+3	; 0x03
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	02 96       	adiw	r24, 0x02	; 2
    1ccc:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 3), trim[CH5]);
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	64 81       	ldd	r22, Z+4	; 0x04
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	03 96       	adiw	r24, 0x03	; 3
    1cda:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							
							eeprom_update_byte((uint8_t*)(pre_addr + 4), mixing_val_1);
    1cde:	60 91 db 05 	lds	r22, 0x05DB	; 0x8005db <mixing_val_1>
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce6:	04 96       	adiw	r24, 0x04	; 4
    1ce8:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 5), mixing_val_2);
    1cec:	60 91 cd 05 	lds	r22, 0x05CD	; 0x8005cd <mixing_val_2>
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf4:	05 96       	adiw	r24, 0x05	; 5
    1cf6:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 6), mixing_val_3);
    1cfa:	60 91 d6 05 	lds	r22, 0x05D6	; 0x8005d6 <mixing_val_3>
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	06 96       	adiw	r24, 0x06	; 6
    1d04:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							
							eeprom_update_byte((uint8_t*)(pre_addr + 7),  sw[0]);
    1d08:	ed ed       	ldi	r30, 0xDD	; 221
    1d0a:	f5 e0       	ldi	r31, 0x05	; 5
    1d0c:	60 81       	ld	r22, Z
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	07 96       	adiw	r24, 0x07	; 7
    1d14:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 8),  sw[1]);
    1d18:	60 91 de 05 	lds	r22, 0x05DE	; 0x8005de <sw+0x1>
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d20:	08 96       	adiw	r24, 0x08	; 8
    1d22:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 9),  sw[2]);
    1d26:	60 91 df 05 	lds	r22, 0x05DF	; 0x8005df <sw+0x2>
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	09 96       	adiw	r24, 0x09	; 9
    1d30:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 10), sw[3]);
    1d34:	60 91 e0 05 	lds	r22, 0x05E0	; 0x8005e0 <sw+0x3>
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	0a 96       	adiw	r24, 0x0a	; 10
    1d3e:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 11), sw[4]);
    1d42:	60 91 e1 05 	lds	r22, 0x05E1	; 0x8005e1 <sw+0x4>
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	0b 96       	adiw	r24, 0x0b	; 11
    1d4c:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 12), sw[5]);
    1d50:	60 91 e2 05 	lds	r22, 0x05E2	; 0x8005e2 <sw+0x5>
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	9a 81       	ldd	r25, Y+2	; 0x02
    1d58:	0c 96       	adiw	r24, 0x0c	; 12
    1d5a:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 13), sw[6]);
    1d5e:	60 91 e3 05 	lds	r22, 0x05E3	; 0x8005e3 <sw+0x6>
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	0d 96       	adiw	r24, 0x0d	; 13
    1d68:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							eeprom_update_byte((uint8_t*)(pre_addr + 14), sw[7]);
    1d6c:	60 91 e4 05 	lds	r22, 0x05E4	; 0x8005e4 <sw+0x7>
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
    1d74:	0e 96       	adiw	r24, 0x0e	; 14
    1d76:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							
							eeprom_update_byte((uint8_t*)121, cur_model);
    1d7a:	60 91 cf 05 	lds	r22, 0x05CF	; 0x8005cf <cur_model>
    1d7e:	89 e7       	ldi	r24, 0x79	; 121
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
							
							// Call new model data
							addr = cur_model * 15 + 1;
							
							trim[AILERON]  = eeprom_read_byte((const uint8_t*)addr      );
    1d86:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <cur_model>
    1d8a:	f8 2f       	mov	r31, r24
    1d8c:	ff 0f       	add	r31, r31
    1d8e:	f8 0f       	add	r31, r24
    1d90:	8f 2f       	mov	r24, r31
    1d92:	88 0f       	add	r24, r24
    1d94:	88 0f       	add	r24, r24
    1d96:	f8 0f       	add	r31, r24
    1d98:	ff 5f       	subi	r31, 0xFF	; 255
    1d9a:	2f 2f       	mov	r18, r31
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3a 83       	std	Y+2, r19	; 0x02
    1da0:	29 83       	std	Y+1, r18	; 0x01
    1da2:	c9 01       	movw	r24, r18
    1da4:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1da8:	f8 01       	movw	r30, r16
    1daa:	80 83       	st	Z, r24
							trim[ELEVATOR] = eeprom_read_byte((const uint8_t*)(addr + 1));
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1db6:	f8 01       	movw	r30, r16
    1db8:	81 83       	std	Z+1, r24	; 0x01
							trim[RUDDER]   = eeprom_read_byte((const uint8_t*)(addr + 2));
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbe:	02 96       	adiw	r24, 0x02	; 2
    1dc0:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	83 83       	std	Z+3, r24	; 0x03
							trim[CH5]      = eeprom_read_byte((const uint8_t*)(addr + 3));
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	9a 81       	ldd	r25, Y+2	; 0x02
    1dcc:	03 96       	adiw	r24, 0x03	; 3
    1dce:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	84 83       	std	Z+4, r24	; 0x04
							
							mixing_val_1 = eeprom_read_byte((const uint8_t*)(addr + 4));
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	04 96       	adiw	r24, 0x04	; 4
    1ddc:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1de0:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
							mixing_val_2 = eeprom_read_byte((const uint8_t*)(addr + 5));
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	05 96       	adiw	r24, 0x05	; 5
    1dea:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1dee:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
							mixing_val_3 = eeprom_read_byte((const uint8_t*)(addr + 6));
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	06 96       	adiw	r24, 0x06	; 6
    1df8:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1dfc:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <mixing_val_3>
							
							sw[0] = eeprom_read_byte((const uint8_t*)(addr + 7));
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	07 96       	adiw	r24, 0x07	; 7
    1e06:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1e0a:	ed ed       	ldi	r30, 0xDD	; 221
    1e0c:	f5 e0       	ldi	r31, 0x05	; 5
    1e0e:	80 83       	st	Z, r24
							sw[1] = eeprom_read_byte((const uint8_t*)(addr + 8));
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	9a 81       	ldd	r25, Y+2	; 0x02
    1e14:	08 96       	adiw	r24, 0x08	; 8
    1e16:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1e1a:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <sw+0x1>
							sw[2] = eeprom_read_byte((const uint8_t*)(addr + 9));
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	9a 81       	ldd	r25, Y+2	; 0x02
    1e22:	09 96       	adiw	r24, 0x09	; 9
    1e24:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1e28:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <sw+0x2>
							sw[3] = eeprom_read_byte((const uint8_t*)(addr + 10));
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	0a 96       	adiw	r24, 0x0a	; 10
    1e32:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1e36:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <sw+0x3>
							sw[4] = eeprom_read_byte((const uint8_t*)(addr + 11));
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	0b 96       	adiw	r24, 0x0b	; 11
    1e40:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1e44:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <sw+0x4>
							sw[5] = eeprom_read_byte((const uint8_t*)(addr + 12));
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	0c 96       	adiw	r24, 0x0c	; 12
    1e4e:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1e52:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <sw+0x5>
							sw[6] = eeprom_read_byte((const uint8_t*)(addr + 13));
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	0d 96       	adiw	r24, 0x0d	; 13
    1e5c:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1e60:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <sw+0x6>
							sw[7] = eeprom_read_byte((const uint8_t*)(addr + 14));
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	0e 96       	adiw	r24, 0x0e	; 14
    1e6a:	0e 94 27 28 	call	0x504e	; 0x504e <eeprom_read_byte>
    1e6e:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <sw+0x7>
							
							menu_input = 0;
    1e72:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
			
			// Enter Model Number mode
			if (enter)
			{
				menu_display_h = " Model Number   ";
				menu_display_l = " Model     Exit ";
    1e76:	14 01       	movw	r2, r8
			pre_mod = cur_model;
			
			// Enter Model Number mode
			if (enter)
			{
				menu_display_h = " Model Number   ";
    1e78:	08 e7       	ldi	r16, 0x78	; 120
    1e7a:	11 e0       	ldi	r17, 0x01	; 1
							sw[5] = eeprom_read_byte((const uint8_t*)(addr + 12));
							sw[6] = eeprom_read_byte((const uint8_t*)(addr + 13));
							sw[7] = eeprom_read_byte((const uint8_t*)(addr + 14));
							
							menu_input = 0;
							break;
    1e7c:	0c 94 80 20 	jmp	0x4100	; 0x4100 <menu+0x259c>
						}
					}
					
					
					// Display
					LCD_home();
    1e80:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					LCD_NWL();
    1e84:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    1e88:	60 e1       	ldi	r22, 0x10	; 16
    1e8a:	8e 2d       	mov	r24, r14
    1e8c:	97 2d       	mov	r25, r7
    1e8e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					
					buzzer_switch();
    1e92:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
				} // while
    1e96:	b1 ce       	rjmp	.-670    	; 0x1bfa <menu+0x96>
			} // if (enter)
		} // if (menu_input == 0)
		
		
		////////// Mixing setting ////////////////////////////////////////////////
		else if (menu_input == 1)
    1e98:	91 30       	cpi	r25, 0x01	; 1
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <menu+0x33a>
    1e9c:	46 c1       	rjmp	.+652    	; 0x212a <menu+0x5c6>
		{
			// Display code
			menu_display_h = " Model Number   ";
			menu_display_l = ">Mixing         ";
			
			if (enter)
    1e9e:	88 23       	and	r24, r24
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <menu+0x342>
    1ea2:	0c 94 15 20 	jmp	0x402a	; 0x402a <menu+0x24c6>
			{
				menu_input_temp = menu_input;
				menu_input = 0;
    1ea6:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
				LCD_CLEAR();
    1eaa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
		////////// Mixing setting ////////////////////////////////////////////////
		else if (menu_input == 1)
		{
			// Display code
			menu_display_h = " Model Number   ";
			menu_display_l = ">Mixing         ";
    1eae:	07 e6       	ldi	r16, 0x67	; 103
    1eb0:	11 e0       	ldi	r17, 0x01	; 1
		
		////////// Mixing setting ////////////////////////////////////////////////
		else if (menu_input == 1)
		{
			// Display code
			menu_display_h = " Model Number   ";
    1eb2:	28 e7       	ldi	r18, 0x78	; 120
    1eb4:	31 e0       	ldi	r19, 0x01	; 1
						else
							menu_display_h[10] = ' ';
						if (mixing_val_1 & VTAIL)
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
    1eb6:	0f 2e       	mov	r0, r31
    1eb8:	f9 e8       	ldi	r31, 0x89	; 137
    1eba:	ef 2e       	mov	r14, r31
    1ebc:	f1 e0       	ldi	r31, 0x01	; 1
    1ebe:	ff 2e       	mov	r15, r31
    1ec0:	f0 2d       	mov	r31, r0
    1ec2:	68 94       	set
    1ec4:	44 24       	eor	r4, r4
    1ec6:	45 f8       	bld	r4, 5
					
					// Display & stat /////////////
					if (menu_input == 0)
					{
						// Display init
						menu_display_h = ">Elevon         ";
    1ec8:	0f 2e       	mov	r0, r31
    1eca:	fa e9       	ldi	r31, 0x9A	; 154
    1ecc:	cf 2e       	mov	r12, r31
    1ece:	f1 e0       	ldi	r31, 0x01	; 1
    1ed0:	df 2e       	mov	r13, r31
    1ed2:	f0 2d       	mov	r31, r0
						if (mixing_val_1 & ELEVON)
							menu_display_h[10] = 'V';
						else
							menu_display_h[10] = ' ';
						if (mixing_val_1 & VTAIL)
							menu_display_l[10] = 'V';
    1ed4:	0f 2e       	mov	r0, r31
    1ed6:	f6 e5       	ldi	r31, 0x56	; 86
    1ed8:	3f 2e       	mov	r3, r31
    1eda:	f0 2d       	mov	r31, r0
						else
							menu_display_h[10] = ' ';
						if (mixing_val_1 & VTAIL)
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
    1edc:	0f 2e       	mov	r0, r31
    1ede:	fb ea       	ldi	r31, 0xAB	; 171
    1ee0:	af 2e       	mov	r10, r31
    1ee2:	f1 e0       	ldi	r31, 0x01	; 1
    1ee4:	bf 2e       	mov	r11, r31
    1ee6:	f0 2d       	mov	r31, r0
						
					}
					else if (menu_input == 1)
					{
						// Display init
						menu_display_h = " Elevon         ";
    1ee8:	3a 83       	std	Y+2, r19	; 0x02
    1eea:	29 83       	std	Y+1, r18	; 0x01
				LCD_CLEAR();
				
				while (1)
				{
					// Cursor limit
					enter = menu_read();
    1eec:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)
    1ef0:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    1ef4:	99 23       	and	r25, r25
    1ef6:	1c f4       	brge	.+6      	; 0x1efe <menu+0x39a>
						menu_input = 0;
    1ef8:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    1efc:	08 c0       	rjmp	.+16     	; 0x1f0e <menu+0x3aa>
					else if (menu_input > 5)
    1efe:	96 30       	cpi	r25, 0x06	; 6
    1f00:	24 f0       	brlt	.+8      	; 0x1f0a <menu+0x3a6>
						menu_input = 5;
    1f02:	95 e0       	ldi	r25, 0x05	; 5
    1f04:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    1f08:	dc c0       	rjmp	.+440    	; 0x20c2 <menu+0x55e>
					
					
					// Display & stat /////////////
					if (menu_input == 0)
    1f0a:	91 11       	cpse	r25, r1
    1f0c:	26 c0       	rjmp	.+76     	; 0x1f5a <menu+0x3f6>
					{
						// Display init
						menu_display_h = ">Elevon         ";
						menu_display_l = " Vtail          ";
						
						if ((enter) && !(mixing_val_1 & VTAIL))
    1f0e:	88 23       	and	r24, r24
    1f10:	69 f0       	breq	.+26     	; 0x1f2c <menu+0x3c8>
    1f12:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    1f16:	86 fd       	sbrc	r24, 6
    1f18:	09 c0       	rjmp	.+18     	; 0x1f2c <menu+0x3c8>
						{
							if (mixing_val_1 & ELEVON)
    1f1a:	85 ff       	sbrs	r24, 5
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <menu+0x3c2>
								mixing_val_1 &= ~ELEVON;
    1f1e:	8f 7d       	andi	r24, 0xDF	; 223
    1f20:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
    1f24:	03 c0       	rjmp	.+6      	; 0x1f2c <menu+0x3c8>
							else
								mixing_val_1 |= ELEVON;
    1f26:	80 62       	ori	r24, 0x20	; 32
    1f28:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
						}
						
						if (mixing_val_1 & ELEVON)
    1f2c:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    1f30:	85 ff       	sbrs	r24, 5
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <menu+0x3d6>
							menu_display_h[10] = 'V';
    1f34:	f6 01       	movw	r30, r12
    1f36:	32 86       	std	Z+10, r3	; 0x0a
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <menu+0x3da>
						else
							menu_display_h[10] = ' ';
    1f3a:	f6 01       	movw	r30, r12
    1f3c:	42 86       	std	Z+10, r4	; 0x0a
						if (mixing_val_1 & VTAIL)
    1f3e:	86 ff       	sbrs	r24, 6
    1f40:	06 c0       	rjmp	.+12     	; 0x1f4e <menu+0x3ea>
							menu_display_l[10] = 'V';
    1f42:	f7 01       	movw	r30, r14
    1f44:	32 86       	std	Z+10, r3	; 0x0a
					// Display & stat /////////////
					if (menu_input == 0)
					{
						// Display init
						menu_display_h = ">Elevon         ";
						menu_display_l = " Vtail          ";
    1f46:	87 01       	movw	r16, r14
					
					// Display & stat /////////////
					if (menu_input == 0)
					{
						// Display init
						menu_display_h = ">Elevon         ";
    1f48:	da 82       	std	Y+2, r13	; 0x02
    1f4a:	c9 82       	std	Y+1, r12	; 0x01
    1f4c:	de c0       	rjmp	.+444    	; 0x210a <menu+0x5a6>
						else
							menu_display_h[10] = ' ';
						if (mixing_val_1 & VTAIL)
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
    1f4e:	f7 01       	movw	r30, r14
    1f50:	42 86       	std	Z+10, r4	; 0x0a
					// Display & stat /////////////
					if (menu_input == 0)
					{
						// Display init
						menu_display_h = ">Elevon         ";
						menu_display_l = " Vtail          ";
    1f52:	87 01       	movw	r16, r14
					
					// Display & stat /////////////
					if (menu_input == 0)
					{
						// Display init
						menu_display_h = ">Elevon         ";
    1f54:	da 82       	std	Y+2, r13	; 0x02
    1f56:	c9 82       	std	Y+1, r12	; 0x01
    1f58:	d8 c0       	rjmp	.+432    	; 0x210a <menu+0x5a6>
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
						
					}
					else if (menu_input == 1)
    1f5a:	91 30       	cpi	r25, 0x01	; 1
    1f5c:	51 f5       	brne	.+84     	; 0x1fb2 <menu+0x44e>
					{
						// Display init
						menu_display_h = " Elevon         ";
						menu_display_l = ">Vtail          ";
						
						if ((enter) && !(mixing_val_1 & ELEVON))
    1f5e:	88 23       	and	r24, r24
    1f60:	69 f0       	breq	.+26     	; 0x1f7c <menu+0x418>
    1f62:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    1f66:	85 fd       	sbrc	r24, 5
    1f68:	0d c0       	rjmp	.+26     	; 0x1f84 <menu+0x420>
						{
							if (mixing_val_1 & VTAIL)
    1f6a:	86 ff       	sbrs	r24, 6
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <menu+0x412>
								mixing_val_1 &= ~VTAIL;
    1f6e:	8f 7b       	andi	r24, 0xBF	; 191
    1f70:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <menu+0x418>
							else
								mixing_val_1 |= VTAIL;
    1f76:	80 64       	ori	r24, 0x40	; 64
    1f78:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
						}
						
						if (mixing_val_1 & ELEVON)
    1f7c:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    1f80:	85 ff       	sbrs	r24, 5
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <menu+0x426>
							menu_display_h[10] = 'V';
    1f84:	30 92 c6 01 	sts	0x01C6, r3	; 0x8001c6 <battery_alarm+0x82>
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <menu+0x42a>
						else
							menu_display_h[10] = ' ';
    1f8a:	40 92 c6 01 	sts	0x01C6, r4	; 0x8001c6 <battery_alarm+0x82>
						if (mixing_val_1 & VTAIL)
    1f8e:	86 ff       	sbrs	r24, 6
    1f90:	08 c0       	rjmp	.+16     	; 0x1fa2 <menu+0x43e>
							menu_display_l[10] = 'V';
    1f92:	f5 01       	movw	r30, r10
    1f94:	32 86       	std	Z+10, r3	; 0x0a
					}
					else if (menu_input == 1)
					{
						// Display init
						menu_display_h = " Elevon         ";
						menu_display_l = ">Vtail          ";
    1f96:	85 01       	movw	r16, r10
						
					}
					else if (menu_input == 1)
					{
						// Display init
						menu_display_h = " Elevon         ";
    1f98:	2c eb       	ldi	r18, 0xBC	; 188
    1f9a:	31 e0       	ldi	r19, 0x01	; 1
    1f9c:	3a 83       	std	Y+2, r19	; 0x02
    1f9e:	29 83       	std	Y+1, r18	; 0x01
    1fa0:	b4 c0       	rjmp	.+360    	; 0x210a <menu+0x5a6>
						else
							menu_display_h[10] = ' ';
						if (mixing_val_1 & VTAIL)
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
    1fa2:	f5 01       	movw	r30, r10
    1fa4:	42 86       	std	Z+10, r4	; 0x0a
					}
					else if (menu_input == 1)
					{
						// Display init
						menu_display_h = " Elevon         ";
						menu_display_l = ">Vtail          ";
    1fa6:	85 01       	movw	r16, r10
						
					}
					else if (menu_input == 1)
					{
						// Display init
						menu_display_h = " Elevon         ";
    1fa8:	2c eb       	ldi	r18, 0xBC	; 188
    1faa:	31 e0       	ldi	r19, 0x01	; 1
    1fac:	3a 83       	std	Y+2, r19	; 0x02
    1fae:	29 83       	std	Y+1, r18	; 0x01
    1fb0:	ac c0       	rjmp	.+344    	; 0x210a <menu+0x5a6>
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
							
					}
					else if (menu_input == 2)
    1fb2:	92 30       	cpi	r25, 0x02	; 2
    1fb4:	31 f5       	brne	.+76     	; 0x2002 <menu+0x49e>
					{
						// Display init
						menu_display_h = " Vtail          ";
						menu_display_l = ">Diff Thrust    ";
						
						if (enter)
    1fb6:	88 23       	and	r24, r24
    1fb8:	59 f0       	breq	.+22     	; 0x1fd0 <menu+0x46c>
						{
							if (mixing_val_1 & DIFF_THRUST)
    1fba:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    1fbe:	84 ff       	sbrs	r24, 4
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <menu+0x466>
								mixing_val_1 &= ~DIFF_THRUST;
    1fc2:	8f 7e       	andi	r24, 0xEF	; 239
    1fc4:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <menu+0x46c>
							else
								mixing_val_1 |= DIFF_THRUST;
    1fca:	80 61       	ori	r24, 0x10	; 16
    1fcc:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
						}
						
						if (mixing_val_1 & VTAIL)
    1fd0:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    1fd4:	86 ff       	sbrs	r24, 6
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <menu+0x47a>
							menu_display_h[10] = 'V';
    1fd8:	f7 01       	movw	r30, r14
    1fda:	32 86       	std	Z+10, r3	; 0x0a
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <menu+0x47e>
						else
							menu_display_h[10] = ' ';
    1fde:	f7 01       	movw	r30, r14
    1fe0:	42 86       	std	Z+10, r4	; 0x0a
						if (mixing_val_1 & DIFF_THRUST)
    1fe2:	84 ff       	sbrs	r24, 4
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <menu+0x490>
							menu_display_l[13] = 'V';
    1fe6:	30 92 da 01 	sts	0x01DA, r3	; 0x8001da <battery_alarm+0x96>
					}
					else if (menu_input == 2)
					{
						// Display init
						menu_display_h = " Vtail          ";
						menu_display_l = ">Diff Thrust    ";
    1fea:	0d ec       	ldi	r16, 0xCD	; 205
    1fec:	11 e0       	ldi	r17, 0x01	; 1
							
					}
					else if (menu_input == 2)
					{
						// Display init
						menu_display_h = " Vtail          ";
    1fee:	fa 82       	std	Y+2, r15	; 0x02
    1ff0:	e9 82       	std	Y+1, r14	; 0x01
    1ff2:	8b c0       	rjmp	.+278    	; 0x210a <menu+0x5a6>
						else
							menu_display_h[10] = ' ';
						if (mixing_val_1 & DIFF_THRUST)
							menu_display_l[13] = 'V';
						else
							menu_display_l[13] = ' ';
    1ff4:	40 92 da 01 	sts	0x01DA, r4	; 0x8001da <battery_alarm+0x96>
					}
					else if (menu_input == 2)
					{
						// Display init
						menu_display_h = " Vtail          ";
						menu_display_l = ">Diff Thrust    ";
    1ff8:	0d ec       	ldi	r16, 0xCD	; 205
    1ffa:	11 e0       	ldi	r17, 0x01	; 1
							
					}
					else if (menu_input == 2)
					{
						// Display init
						menu_display_h = " Vtail          ";
    1ffc:	fa 82       	std	Y+2, r15	; 0x02
    1ffe:	e9 82       	std	Y+1, r14	; 0x01
    2000:	84 c0       	rjmp	.+264    	; 0x210a <menu+0x5a6>
							menu_display_l[13] = 'V';
						else
							menu_display_l[13] = ' ';
						
					}
					else if (menu_input == 3)
    2002:	93 30       	cpi	r25, 0x03	; 3
    2004:	51 f5       	brne	.+84     	; 0x205a <menu+0x4f6>
					{
						// Display init
						menu_display_h = " Diff Thrust    ";
						menu_display_l = ">Flaperon       ";
						
						if (enter)
    2006:	88 23       	and	r24, r24
    2008:	59 f0       	breq	.+22     	; 0x2020 <menu+0x4bc>
						{
							if (mixing_val_1 & FLAPERON)
    200a:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    200e:	88 23       	and	r24, r24
    2010:	24 f4       	brge	.+8      	; 0x201a <menu+0x4b6>
								mixing_val_1 &= ~FLAPERON;
    2012:	8f 77       	andi	r24, 0x7F	; 127
    2014:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
    2018:	03 c0       	rjmp	.+6      	; 0x2020 <menu+0x4bc>
							else
								mixing_val_1 |= FLAPERON;
    201a:	80 68       	ori	r24, 0x80	; 128
    201c:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
						}
						
						if (mixing_val_1 & DIFF_THRUST)
    2020:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    2024:	84 ff       	sbrs	r24, 4
    2026:	03 c0       	rjmp	.+6      	; 0x202e <menu+0x4ca>
							menu_display_h[13] = 'V';
    2028:	30 92 fc 01 	sts	0x01FC, r3	; 0x8001fc <battery_alarm+0xb8>
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <menu+0x4ce>
						else
							menu_display_h[13] = ' ';
    202e:	40 92 fc 01 	sts	0x01FC, r4	; 0x8001fc <battery_alarm+0xb8>
						if (mixing_val_1 & FLAPERON)
    2032:	88 23       	and	r24, r24
    2034:	4c f4       	brge	.+18     	; 0x2048 <menu+0x4e4>
							menu_display_l[10] = 'V';
    2036:	30 92 e8 01 	sts	0x01E8, r3	; 0x8001e8 <battery_alarm+0xa4>
					}
					else if (menu_input == 3)
					{
						// Display init
						menu_display_h = " Diff Thrust    ";
						menu_display_l = ">Flaperon       ";
    203a:	0e ed       	ldi	r16, 0xDE	; 222
    203c:	11 e0       	ldi	r17, 0x01	; 1
						
					}
					else if (menu_input == 3)
					{
						// Display init
						menu_display_h = " Diff Thrust    ";
    203e:	2f ee       	ldi	r18, 0xEF	; 239
    2040:	31 e0       	ldi	r19, 0x01	; 1
    2042:	3a 83       	std	Y+2, r19	; 0x02
    2044:	29 83       	std	Y+1, r18	; 0x01
    2046:	61 c0       	rjmp	.+194    	; 0x210a <menu+0x5a6>
						else
							menu_display_h[13] = ' ';
						if (mixing_val_1 & FLAPERON)
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
    2048:	40 92 e8 01 	sts	0x01E8, r4	; 0x8001e8 <battery_alarm+0xa4>
					}
					else if (menu_input == 3)
					{
						// Display init
						menu_display_h = " Diff Thrust    ";
						menu_display_l = ">Flaperon       ";
    204c:	0e ed       	ldi	r16, 0xDE	; 222
    204e:	11 e0       	ldi	r17, 0x01	; 1
						
					}
					else if (menu_input == 3)
					{
						// Display init
						menu_display_h = " Diff Thrust    ";
    2050:	8f ee       	ldi	r24, 0xEF	; 239
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	58 c0       	rjmp	.+176    	; 0x210a <menu+0x5a6>
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
						
					}
					else if (menu_input == 4)
    205a:	94 30       	cpi	r25, 0x04	; 4
    205c:	81 f5       	brne	.+96     	; 0x20be <menu+0x55a>
					{
						// Display init
						menu_display_h = " Flaperon       ";
						menu_display_l = ">User           ";
						
						if (enter)
    205e:	88 23       	and	r24, r24
    2060:	79 f0       	breq	.+30     	; 0x2080 <menu+0x51c>
						{
							if (mixing_val_3 & USER_MIX)
    2062:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    2066:	86 ff       	sbrs	r24, 6
    2068:	06 c0       	rjmp	.+12     	; 0x2076 <menu+0x512>
								mixing_val_3 &= ~USER_MIX;
    206a:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    206e:	8f 7b       	andi	r24, 0xBF	; 191
    2070:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <mixing_val_3>
    2074:	05 c0       	rjmp	.+10     	; 0x2080 <menu+0x51c>
							else
								mixing_val_3 |= USER_MIX;
    2076:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    207a:	80 64       	ori	r24, 0x40	; 64
    207c:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <mixing_val_3>
						}
						
						if (mixing_val_1 & FLAPERON)
    2080:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    2084:	88 23       	and	r24, r24
    2086:	1c f4       	brge	.+6      	; 0x208e <menu+0x52a>
							menu_display_h[10] = 'V';
    2088:	30 92 1b 02 	sts	0x021B, r3	; 0x80021b <battery_alarm+0xd7>
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <menu+0x52e>
						else
							menu_display_h[10] = ' ';
    208e:	40 92 1b 02 	sts	0x021B, r4	; 0x80021b <battery_alarm+0xd7>
						if (mixing_val_3 & USER_MIX)
    2092:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    2096:	86 ff       	sbrs	r24, 6
    2098:	09 c0       	rjmp	.+18     	; 0x20ac <menu+0x548>
							menu_display_l[10] = 'V';
    209a:	30 92 0a 02 	sts	0x020A, r3	; 0x80020a <battery_alarm+0xc6>
					}
					else if (menu_input == 4)
					{
						// Display init
						menu_display_h = " Flaperon       ";
						menu_display_l = ">User           ";
    209e:	00 e0       	ldi	r16, 0x00	; 0
    20a0:	12 e0       	ldi	r17, 0x02	; 2
						
					}
					else if (menu_input == 4)
					{
						// Display init
						menu_display_h = " Flaperon       ";
    20a2:	e1 e1       	ldi	r30, 0x11	; 17
    20a4:	f2 e0       	ldi	r31, 0x02	; 2
    20a6:	fa 83       	std	Y+2, r31	; 0x02
    20a8:	e9 83       	std	Y+1, r30	; 0x01
    20aa:	2f c0       	rjmp	.+94     	; 0x210a <menu+0x5a6>
						else
							menu_display_h[10] = ' ';
						if (mixing_val_3 & USER_MIX)
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
    20ac:	40 92 0a 02 	sts	0x020A, r4	; 0x80020a <battery_alarm+0xc6>
					}
					else if (menu_input == 4)
					{
						// Display init
						menu_display_h = " Flaperon       ";
						menu_display_l = ">User           ";
    20b0:	00 e0       	ldi	r16, 0x00	; 0
    20b2:	12 e0       	ldi	r17, 0x02	; 2
						
					}
					else if (menu_input == 4)
					{
						// Display init
						menu_display_h = " Flaperon       ";
    20b4:	21 e1       	ldi	r18, 0x11	; 17
    20b6:	32 e0       	ldi	r19, 0x02	; 2
    20b8:	3a 83       	std	Y+2, r19	; 0x02
    20ba:	29 83       	std	Y+1, r18	; 0x01
    20bc:	26 c0       	rjmp	.+76     	; 0x210a <menu+0x5a6>
							menu_display_l[10] = 'V';
						else
							menu_display_l[10] = ' ';
						
					}
					else if (menu_input == 5)
    20be:	95 30       	cpi	r25, 0x05	; 5
    20c0:	21 f5       	brne	.+72     	; 0x210a <menu+0x5a6>
					{
						// Display init
						menu_display_h = " User           ";
						menu_display_l = ">Exit           ";
						
						if (enter)
    20c2:	88 23       	and	r24, r24
    20c4:	69 f0       	breq	.+26     	; 0x20e0 <menu+0x57c>
						{
							menu_input = menu_input_temp;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
					}
					else if (menu_input == 5)
					{
						// Display init
						menu_display_h = " User           ";
						menu_display_l = ">Exit           ";
    20cc:	0f 2e       	mov	r0, r31
    20ce:	f2 e2       	ldi	r31, 0x22	; 34
    20d0:	2f 2e       	mov	r2, r31
    20d2:	f2 e0       	ldi	r31, 0x02	; 2
    20d4:	3f 2e       	mov	r3, r31
    20d6:	f0 2d       	mov	r31, r0
						
					}
					else if (menu_input == 5)
					{
						// Display init
						menu_display_h = " User           ";
    20d8:	03 e3       	ldi	r16, 0x33	; 51
    20da:	12 e0       	ldi	r17, 0x02	; 2
						menu_display_l = ">Exit           ";
						
						if (enter)
						{
							menu_input = menu_input_temp;
							break;
    20dc:	0c 94 80 20 	jmp	0x4100	; 0x4100 <menu+0x259c>
						}
						
						if (mixing_val_1 & USER_MIX)
    20e0:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    20e4:	86 ff       	sbrs	r24, 6
    20e6:	09 c0       	rjmp	.+18     	; 0x20fa <menu+0x596>
							menu_display_h[10] = 'V';
    20e8:	30 92 3d 02 	sts	0x023D, r3	; 0x80023d <battery_alarm+0xf9>
					}
					else if (menu_input == 5)
					{
						// Display init
						menu_display_h = " User           ";
						menu_display_l = ">Exit           ";
    20ec:	02 e2       	ldi	r16, 0x22	; 34
    20ee:	12 e0       	ldi	r17, 0x02	; 2
						
					}
					else if (menu_input == 5)
					{
						// Display init
						menu_display_h = " User           ";
    20f0:	83 e3       	ldi	r24, 0x33	; 51
    20f2:	92 e0       	ldi	r25, 0x02	; 2
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	08 c0       	rjmp	.+16     	; 0x210a <menu+0x5a6>
						}
						
						if (mixing_val_1 & USER_MIX)
							menu_display_h[10] = 'V';
						else
							menu_display_h[10] = ' ';
    20fa:	40 92 3d 02 	sts	0x023D, r4	; 0x80023d <battery_alarm+0xf9>
					}
					else if (menu_input == 5)
					{
						// Display init
						menu_display_h = " User           ";
						menu_display_l = ">Exit           ";
    20fe:	02 e2       	ldi	r16, 0x22	; 34
    2100:	12 e0       	ldi	r17, 0x02	; 2
						
					}
					else if (menu_input == 5)
					{
						// Display init
						menu_display_h = " User           ";
    2102:	e3 e3       	ldi	r30, 0x33	; 51
    2104:	f2 e0       	ldi	r31, 0x02	; 2
    2106:	fa 83       	std	Y+2, r31	; 0x02
    2108:	e9 83       	std	Y+1, r30	; 0x01
						
					}
					
					
					// LCD drive
					LCD_string(menu_display_h, 16);
    210a:	60 e1       	ldi	r22, 0x10	; 16
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    2114:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    2118:	60 e1       	ldi	r22, 0x10	; 16
    211a:	c8 01       	movw	r24, r16
    211c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_home();
    2120:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					
					// Buzzer drive
					buzzer_switch();
    2124:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
				} // while (1)
    2128:	e1 ce       	rjmp	.-574    	; 0x1eec <menu+0x388>
			} // if (enter)
		} // else if (menu_input == 1)
	
		
		////////// Channel Reverse ///////////////////////////////////////////////
		else if (menu_input == 2)
    212a:	92 30       	cpi	r25, 0x02	; 2
    212c:	09 f0       	breq	.+2      	; 0x2130 <menu+0x5cc>
    212e:	f5 c0       	rjmp	.+490    	; 0x231a <menu+0x7b6>
		{
			// Display
			menu_display_h = " Mixing         ";
			menu_display_l = ">Reverse        ";
			
			if (enter)
    2130:	88 23       	and	r24, r24
    2132:	11 f4       	brne	.+4      	; 0x2138 <menu+0x5d4>
    2134:	0c 94 1e 20 	jmp	0x403c	; 0x403c <menu+0x24d8>
			{
				// Cursor init
				menu_input_temp = menu_input;
				menu_input = 0;
    2138:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
				LCD_CLEAR();
    213c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
							menu_display_l[5] = 'N';
						// CH5
						if (mixing_val_1 & REVERSE_CH5)
							menu_display_l[14] = 'R';
						else
							menu_display_l[14] = 'N';
    2140:	0f 2e       	mov	r0, r31
    2142:	fe e4       	ldi	r31, 0x4E	; 78
    2144:	cf 2e       	mov	r12, r31
    2146:	f0 2d       	mov	r31, r0
					
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
    2148:	0f 2e       	mov	r0, r31
    214a:	f5 e5       	ldi	r31, 0x55	; 85
    214c:	ef 2e       	mov	r14, r31
    214e:	f2 e0       	ldi	r31, 0x02	; 2
    2150:	ff 2e       	mov	r15, r31
    2152:	f0 2d       	mov	r31, r0
							menu_display_l[5] = 'R';
						else
							menu_display_l[5] = 'N';
						// CH5
						if (mixing_val_1 & REVERSE_CH5)
							menu_display_l[14] = 'R';
    2154:	0f 2e       	mov	r0, r31
    2156:	f2 e5       	ldi	r31, 0x52	; 82
    2158:	4f 2e       	mov	r4, r31
    215a:	f0 2d       	mov	r31, r0
					// Cursor limit
					enter = menu_read();
					if (menu_input < 0)
						menu_input = 0;
					else if (menu_input > 4)
						menu_input = 4;
    215c:	68 94       	set
    215e:	dd 24       	eor	r13, r13
    2160:	d2 f8       	bld	r13, 2
							else
								mixing_val_1 |= REVERSE_CH5;
						}
					}
					else
						menu_display_l[8] = ' ';
    2162:	68 94       	set
    2164:	bb 24       	eor	r11, r11
    2166:	b5 f8       	bld	r11, 5
					// Exit
					if (menu_input == 4)
					{
						// Cursor move
						menu_display_h[8] = ' ';
						menu_display_l[0] = '>';
    2168:	0f 2e       	mov	r0, r31
    216a:	fe e3       	ldi	r31, 0x3E	; 62
    216c:	af 2e       	mov	r10, r31
    216e:	f0 2d       	mov	r31, r0
				LCD_CLEAR();
				
				while (1)
				{
					// Cursor limit
					enter = menu_read();
    2170:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)
    2174:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2178:	99 23       	and	r25, r25
    217a:	1c f4       	brge	.+6      	; 0x2182 <menu+0x61e>
						menu_input = 0;
    217c:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    2180:	07 c0       	rjmp	.+14     	; 0x2190 <menu+0x62c>
					else if (menu_input > 4)
    2182:	95 30       	cpi	r25, 0x05	; 5
    2184:	1c f0       	brlt	.+6      	; 0x218c <menu+0x628>
						menu_input = 4;
    2186:	d0 92 ce 05 	sts	0x05CE, r13	; 0x8005ce <menu_input>
    218a:	2f c0       	rjmp	.+94     	; 0x21ea <menu+0x686>
					
					
					// Display init & stat ////////////
					if (menu_input < 4)
    218c:	94 30       	cpi	r25, 0x04	; 4
    218e:	6c f5       	brge	.+90     	; 0x21ea <menu+0x686>
						// Display init
						menu_display_h = " Ail     Ele    ";
						menu_display_l = " Rud     CH5    ";
						
						// Aileron
						if (mixing_val_1 & REVERSE_AIL)
    2190:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <mixing_val_1>
    2194:	90 ff       	sbrs	r25, 0
    2196:	03 c0       	rjmp	.+6      	; 0x219e <menu+0x63a>
							menu_display_h[5] = 'R';
    2198:	f7 01       	movw	r30, r14
    219a:	45 82       	std	Z+5, r4	; 0x05
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <menu+0x63e>
						else
							menu_display_h[5] = 'N';
    219e:	f7 01       	movw	r30, r14
    21a0:	c5 82       	std	Z+5, r12	; 0x05
						// Elevator
						if (mixing_val_1 & REVERSE_ELE)
    21a2:	91 ff       	sbrs	r25, 1
    21a4:	03 c0       	rjmp	.+6      	; 0x21ac <menu+0x648>
							menu_display_h[14] = 'R';
    21a6:	f7 01       	movw	r30, r14
    21a8:	46 86       	std	Z+14, r4	; 0x0e
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <menu+0x64c>
						else
							menu_display_h[14] = 'N';
    21ac:	f7 01       	movw	r30, r14
    21ae:	c6 86       	std	Z+14, r12	; 0x0e
						// Rudder
						if (mixing_val_1 & REVERSE_RUD)
    21b0:	92 ff       	sbrs	r25, 2
    21b2:	03 c0       	rjmp	.+6      	; 0x21ba <menu+0x656>
							menu_display_l[5] = 'R';
    21b4:	40 92 49 02 	sts	0x0249, r4	; 0x800249 <battery_alarm+0x105>
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <menu+0x65a>
						else
							menu_display_l[5] = 'N';
    21ba:	c0 92 49 02 	sts	0x0249, r12	; 0x800249 <battery_alarm+0x105>
						// CH5
						if (mixing_val_1 & REVERSE_CH5)
    21be:	93 ff       	sbrs	r25, 3
    21c0:	0a c0       	rjmp	.+20     	; 0x21d6 <menu+0x672>
							menu_display_l[14] = 'R';
    21c2:	40 92 52 02 	sts	0x0252, r4	; 0x800252 <battery_alarm+0x10e>
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
						menu_display_l = " Rud     CH5    ";
    21c6:	0f 2e       	mov	r0, r31
    21c8:	f4 e4       	ldi	r31, 0x44	; 68
    21ca:	2f 2e       	mov	r2, r31
    21cc:	f2 e0       	ldi	r31, 0x02	; 2
    21ce:	3f 2e       	mov	r3, r31
    21d0:	f0 2d       	mov	r31, r0
					
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
    21d2:	87 01       	movw	r16, r14
    21d4:	2a c0       	rjmp	.+84     	; 0x222a <menu+0x6c6>
							menu_display_l[5] = 'N';
						// CH5
						if (mixing_val_1 & REVERSE_CH5)
							menu_display_l[14] = 'R';
						else
							menu_display_l[14] = 'N';
    21d6:	c0 92 52 02 	sts	0x0252, r12	; 0x800252 <battery_alarm+0x10e>
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
						menu_display_l = " Rud     CH5    ";
    21da:	0f 2e       	mov	r0, r31
    21dc:	f4 e4       	ldi	r31, 0x44	; 68
    21de:	2f 2e       	mov	r2, r31
    21e0:	f2 e0       	ldi	r31, 0x02	; 2
    21e2:	3f 2e       	mov	r3, r31
    21e4:	f0 2d       	mov	r31, r0
					
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
    21e6:	87 01       	movw	r16, r14
    21e8:	20 c0       	rjmp	.+64     	; 0x222a <menu+0x6c6>
						// Display init
						menu_display_h = " Rud     CH5    ";
						menu_display_l = " Exit           ";
						
						// Aileron
						if (mixing_val_1 & REVERSE_RUD)
    21ea:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <mixing_val_1>
    21ee:	92 ff       	sbrs	r25, 2
    21f0:	03 c0       	rjmp	.+6      	; 0x21f8 <menu+0x694>
							menu_display_h[5] = 'R';
    21f2:	40 92 49 02 	sts	0x0249, r4	; 0x800249 <battery_alarm+0x105>
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <menu+0x698>
						else
							menu_display_h[5] = 'N';
    21f8:	c0 92 49 02 	sts	0x0249, r12	; 0x800249 <battery_alarm+0x105>
						// Elevator
						if (mixing_val_1 & REVERSE_CH5)
    21fc:	93 ff       	sbrs	r25, 3
    21fe:	0b c0       	rjmp	.+22     	; 0x2216 <menu+0x6b2>
							menu_display_h[14] = 'R';
    2200:	40 92 52 02 	sts	0x0252, r4	; 0x800252 <battery_alarm+0x10e>
					}
					else
					{
						// Display init
						menu_display_h = " Rud     CH5    ";
						menu_display_l = " Exit           ";
    2204:	0f 2e       	mov	r0, r31
    2206:	f6 e6       	ldi	r31, 0x66	; 102
    2208:	2f 2e       	mov	r2, r31
    220a:	f2 e0       	ldi	r31, 0x02	; 2
    220c:	3f 2e       	mov	r3, r31
    220e:	f0 2d       	mov	r31, r0
							menu_display_l[14] = 'N';
					}
					else
					{
						// Display init
						menu_display_h = " Rud     CH5    ";
    2210:	04 e4       	ldi	r16, 0x44	; 68
    2212:	12 e0       	ldi	r17, 0x02	; 2
    2214:	0a c0       	rjmp	.+20     	; 0x222a <menu+0x6c6>
							menu_display_h[5] = 'N';
						// Elevator
						if (mixing_val_1 & REVERSE_CH5)
							menu_display_h[14] = 'R';
						else
							menu_display_h[14] = 'N';
    2216:	c0 92 52 02 	sts	0x0252, r12	; 0x800252 <battery_alarm+0x10e>
					}
					else
					{
						// Display init
						menu_display_h = " Rud     CH5    ";
						menu_display_l = " Exit           ";
    221a:	0f 2e       	mov	r0, r31
    221c:	f6 e6       	ldi	r31, 0x66	; 102
    221e:	2f 2e       	mov	r2, r31
    2220:	f2 e0       	ldi	r31, 0x02	; 2
    2222:	3f 2e       	mov	r3, r31
    2224:	f0 2d       	mov	r31, r0
							menu_display_l[14] = 'N';
					}
					else
					{
						// Display init
						menu_display_h = " Rud     CH5    ";
    2226:	04 e4       	ldi	r16, 0x44	; 68
    2228:	12 e0       	ldi	r17, 0x02	; 2
					}
					
					
					// Cursor move & val set //////////
					// Aileron
					if (menu_input == 0)
    222a:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    222e:	91 11       	cpse	r25, r1
    2230:	14 c0       	rjmp	.+40     	; 0x225a <menu+0x6f6>
					{
						// Cursor move
						menu_display_h[0] = '>';
    2232:	f8 01       	movw	r30, r16
    2234:	a0 82       	st	Z, r10
						
						if (enter)
    2236:	88 23       	and	r24, r24
    2238:	11 f4       	brne	.+4      	; 0x223e <menu+0x6da>
    223a:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <menu+0x25f2>
						{
							if (mixing_val_1 & REVERSE_AIL)
    223e:	20 91 db 05 	lds	r18, 0x05DB	; 0x8005db <mixing_val_1>
    2242:	20 ff       	sbrs	r18, 0
    2244:	05 c0       	rjmp	.+10     	; 0x2250 <menu+0x6ec>
								mixing_val_1 &= ~REVERSE_AIL;
    2246:	2e 7f       	andi	r18, 0xFE	; 254
    2248:	20 93 db 05 	sts	0x05DB, r18	; 0x8005db <mixing_val_1>
    224c:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <menu+0x25f2>
							else
								mixing_val_1 |= REVERSE_AIL;
    2250:	21 60       	ori	r18, 0x01	; 1
    2252:	20 93 db 05 	sts	0x05DB, r18	; 0x8005db <mixing_val_1>
    2256:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <menu+0x25f2>
						}
					}
					else
						menu_display_h[0] = ' ';
    225a:	f8 01       	movw	r30, r16
    225c:	b0 82       	st	Z, r11
					
					
					// Elevator
					if (menu_input == 1)
    225e:	91 30       	cpi	r25, 0x01	; 1
    2260:	99 f4       	brne	.+38     	; 0x2288 <menu+0x724>
					{
						// Cursor move
						menu_display_h[8] = '>';
    2262:	a0 86       	std	Z+8, r10	; 0x08
						
						if (enter)
    2264:	88 23       	and	r24, r24
    2266:	11 f4       	brne	.+4      	; 0x226c <menu+0x708>
    2268:	0c 94 af 20 	jmp	0x415e	; 0x415e <menu+0x25fa>
						{
							if (mixing_val_1 & REVERSE_ELE)
    226c:	20 91 db 05 	lds	r18, 0x05DB	; 0x8005db <mixing_val_1>
    2270:	21 ff       	sbrs	r18, 1
    2272:	05 c0       	rjmp	.+10     	; 0x227e <menu+0x71a>
								mixing_val_1 &= ~REVERSE_ELE;
    2274:	2d 7f       	andi	r18, 0xFD	; 253
    2276:	20 93 db 05 	sts	0x05DB, r18	; 0x8005db <mixing_val_1>
    227a:	0c 94 af 20 	jmp	0x415e	; 0x415e <menu+0x25fa>
							else
								mixing_val_1 |= REVERSE_ELE;
    227e:	22 60       	ori	r18, 0x02	; 2
    2280:	20 93 db 05 	sts	0x05DB, r18	; 0x8005db <mixing_val_1>
    2284:	0c 94 af 20 	jmp	0x415e	; 0x415e <menu+0x25fa>
						}
					}
					else
						menu_display_h[8] = ' ';
    2288:	f8 01       	movw	r30, r16
    228a:	b0 86       	std	Z+8, r11	; 0x08
					
					
					// Rudder
					if (menu_input == 2)
    228c:	92 30       	cpi	r25, 0x02	; 2
    228e:	a1 f4       	brne	.+40     	; 0x22b8 <menu+0x754>
					{
						// Cursor move
						menu_display_l[0] = '>';
    2290:	f1 01       	movw	r30, r2
    2292:	a0 82       	st	Z, r10
						
						if (enter)
    2294:	88 23       	and	r24, r24
    2296:	11 f4       	brne	.+4      	; 0x229c <menu+0x738>
    2298:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <menu+0x2602>
						{
							if (mixing_val_1 & REVERSE_RUD)
    229c:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    22a0:	82 ff       	sbrs	r24, 2
    22a2:	05 c0       	rjmp	.+10     	; 0x22ae <menu+0x74a>
								mixing_val_1 &= ~REVERSE_RUD;
    22a4:	8b 7f       	andi	r24, 0xFB	; 251
    22a6:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
    22aa:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <menu+0x2602>
							else
								mixing_val_1 |= REVERSE_RUD;
    22ae:	84 60       	ori	r24, 0x04	; 4
    22b0:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
    22b4:	0c 94 b3 20 	jmp	0x4166	; 0x4166 <menu+0x2602>
						}
					}
					else
						menu_display_l[0] = ' ';
    22b8:	f1 01       	movw	r30, r2
    22ba:	b0 82       	st	Z, r11
					
					
					// CH5
					if (menu_input == 3)
    22bc:	93 30       	cpi	r25, 0x03	; 3
    22be:	79 f4       	brne	.+30     	; 0x22de <menu+0x77a>
					{
						// Cursor move
						menu_display_l[8] = '>';
    22c0:	a0 86       	std	Z+8, r10	; 0x08
						
						if (enter)
    22c2:	88 23       	and	r24, r24
    22c4:	d9 f0       	breq	.+54     	; 0x22fc <menu+0x798>
						{
							if (mixing_val_1 & REVERSE_CH5)
    22c6:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <mixing_val_1>
    22ca:	83 ff       	sbrs	r24, 3
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <menu+0x772>
								mixing_val_1 &= ~REVERSE_CH5;
    22ce:	87 7f       	andi	r24, 0xF7	; 247
    22d0:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
    22d4:	13 c0       	rjmp	.+38     	; 0x22fc <menu+0x798>
							else
								mixing_val_1 |= REVERSE_CH5;
    22d6:	88 60       	ori	r24, 0x08	; 8
    22d8:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <mixing_val_1>
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <menu+0x798>
						}
					}
					else
						menu_display_l[8] = ' ';
    22de:	f1 01       	movw	r30, r2
    22e0:	b0 86       	std	Z+8, r11	; 0x08
					
					
					// Exit
					if (menu_input == 4)
    22e2:	94 30       	cpi	r25, 0x04	; 4
    22e4:	59 f4       	brne	.+22     	; 0x22fc <menu+0x798>
					{
						// Cursor move
						menu_display_h[8] = ' ';
    22e6:	f8 01       	movw	r30, r16
    22e8:	b0 86       	std	Z+8, r11	; 0x08
						menu_display_l[0] = '>';
    22ea:	f1 01       	movw	r30, r2
    22ec:	a0 82       	st	Z, r10
						menu_display_l[8] = ' ';
							
						if (enter)
    22ee:	88 23       	and	r24, r24
    22f0:	29 f0       	breq	.+10     	; 0x22fc <menu+0x798>
						{
							menu_input = menu_input_temp;
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
							break;
    22f8:	0c 94 80 20 	jmp	0x4100	; 0x4100 <menu+0x259c>
						}
					}
					*/
						
					// LCD drive
					LCD_string(menu_display_h, 16);
    22fc:	60 e1       	ldi	r22, 0x10	; 16
    22fe:	c8 01       	movw	r24, r16
    2300:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    2304:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    2308:	60 e1       	ldi	r22, 0x10	; 16
    230a:	c1 01       	movw	r24, r2
    230c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_home();
    2310:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					
					// Buzzer drive
					buzzer_switch();
    2314:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
					
				} // while
    2318:	2b cf       	rjmp	.-426    	; 0x2170 <menu+0x60c>
			} // if (enter)
		} // else if (menu_input == 2)
		
		
		////////// Dual Rate /////////////////////////////////////////////////////
		else if (menu_input == 3)
    231a:	93 30       	cpi	r25, 0x03	; 3
    231c:	09 f0       	breq	.+2      	; 0x2320 <menu+0x7bc>
    231e:	fa c0       	rjmp	.+500    	; 0x2514 <menu+0x9b0>
		{
			// Display
			menu_display_h = " Reverse        ";
			menu_display_l = ">Dual Rate      ";
			
			if (enter)
    2320:	88 23       	and	r24, r24
    2322:	11 f4       	brne	.+4      	; 0x2328 <menu+0x7c4>
    2324:	0c 94 27 20 	jmp	0x404e	; 0x404e <menu+0x24ea>
			{
				menu_input_temp = menu_input;
				menu_input = 0;
    2328:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
				LCD_CLEAR();
    232c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
							menu_display_h[5] = 'N';
						// Elevator
						if (mixing_val_2 & CH5_DR)
							menu_display_h[14] = 'D';
						else
							menu_display_h[14] = 'N';
    2330:	0f 2e       	mov	r0, r31
    2332:	fe e4       	ldi	r31, 0x4E	; 78
    2334:	ef 2e       	mov	r14, r31
    2336:	f0 2d       	mov	r31, r0
							menu_display_h[5] = 'D';
						else
							menu_display_h[5] = 'N';
						// Elevator
						if (mixing_val_2 & CH5_DR)
							menu_display_h[14] = 'D';
    2338:	0f 2e       	mov	r0, r31
    233a:	f4 e4       	ldi	r31, 0x44	; 68
    233c:	ff 2e       	mov	r15, r31
    233e:	f0 2d       	mov	r31, r0
					
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
    2340:	0f 2e       	mov	r0, r31
    2342:	f5 e5       	ldi	r31, 0x55	; 85
    2344:	cf 2e       	mov	r12, r31
    2346:	f2 e0       	ldi	r31, 0x02	; 2
    2348:	df 2e       	mov	r13, r31
    234a:	f0 2d       	mov	r31, r0
							menu_display_h[14] = 'D';
						else
							menu_display_h[14] = 'N';
						
					}
					menu_display_h[15] = ' ';
    234c:	68 94       	set
    234e:	bb 24       	eor	r11, r11
    2350:	b5 f8       	bld	r11, 5
					// Exit
					if (menu_input == 4)
					{
						// Cursor move
						menu_display_h[8] = ' ';
						menu_display_l[0] = '>';
    2352:	0f 2e       	mov	r0, r31
    2354:	fe e3       	ldi	r31, 0x3E	; 62
    2356:	4f 2e       	mov	r4, r31
    2358:	f0 2d       	mov	r31, r0
				menu_input = 0;
				LCD_CLEAR();
				
				while (1)
				{
					enter = menu_read();
    235a:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
    235e:	a8 2e       	mov	r10, r24
					if (menu_input < 0)		// Since max # of channel is 5
    2360:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_input>
    2364:	88 23       	and	r24, r24
    2366:	1c f4       	brge	.+6      	; 0x236e <menu+0x80a>
						menu_input = 0;
    2368:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    236c:	05 c0       	rjmp	.+10     	; 0x2378 <menu+0x814>
					else if (menu_input > 4)
    236e:	85 30       	cpi	r24, 0x05	; 5
    2370:	1c f0       	brlt	.+6      	; 0x2378 <menu+0x814>
						menu_input = 4;
    2372:	f4 e0       	ldi	r31, 0x04	; 4
    2374:	f0 93 ce 05 	sts	0x05CE, r31	; 0x8005ce <menu_input>
					
					switch_read();
    2378:	0e 94 86 05 	call	0xb0c	; 0xb0c <switch_read>
					set_switch();
    237c:	0e 94 a3 06 	call	0xd46	; 0xd46 <set_switch>
					
					// Display init & stat ////////////
					if (menu_input < 4)
    2380:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_input>
    2384:	84 30       	cpi	r24, 0x04	; 4
    2386:	6c f5       	brge	.+90     	; 0x23e2 <menu+0x87e>
						// Display init
						menu_display_h = " Ail     Ele    ";
						menu_display_l = " Rud     CH5    ";
						
						// Aileron
						if (mixing_val_2 & AIL_DR)
    2388:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
    238c:	80 ff       	sbrs	r24, 0
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <menu+0x832>
							menu_display_h[5] = 'D';
    2390:	f6 01       	movw	r30, r12
    2392:	f5 82       	std	Z+5, r15	; 0x05
    2394:	02 c0       	rjmp	.+4      	; 0x239a <menu+0x836>
						else
							menu_display_h[5] = 'N';
    2396:	f6 01       	movw	r30, r12
    2398:	e5 82       	std	Z+5, r14	; 0x05
						// Elevator
						if (mixing_val_2 & ELE_DR)
    239a:	81 ff       	sbrs	r24, 1
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <menu+0x840>
							menu_display_h[14] = 'D';
    239e:	f6 01       	movw	r30, r12
    23a0:	f6 86       	std	Z+14, r15	; 0x0e
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <menu+0x844>
						else
							menu_display_h[14] = 'N';
    23a4:	f6 01       	movw	r30, r12
    23a6:	e6 86       	std	Z+14, r14	; 0x0e
						// Rudder
						if (mixing_val_2 & RUD_DR)
    23a8:	83 ff       	sbrs	r24, 3
    23aa:	03 c0       	rjmp	.+6      	; 0x23b2 <menu+0x84e>
							menu_display_l[5] = 'D';
    23ac:	f0 92 49 02 	sts	0x0249, r15	; 0x800249 <battery_alarm+0x105>
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <menu+0x852>
						else
							menu_display_l[5] = 'N';
    23b2:	e0 92 49 02 	sts	0x0249, r14	; 0x800249 <battery_alarm+0x105>
						// CH5
						if (mixing_val_2 & CH5_DR)
    23b6:	84 ff       	sbrs	r24, 4
    23b8:	0a c0       	rjmp	.+20     	; 0x23ce <menu+0x86a>
							menu_display_l[14] = 'D';
    23ba:	f0 92 52 02 	sts	0x0252, r15	; 0x800252 <battery_alarm+0x10e>
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
						menu_display_l = " Rud     CH5    ";
    23be:	0f 2e       	mov	r0, r31
    23c0:	f4 e4       	ldi	r31, 0x44	; 68
    23c2:	2f 2e       	mov	r2, r31
    23c4:	f2 e0       	ldi	r31, 0x02	; 2
    23c6:	3f 2e       	mov	r3, r31
    23c8:	f0 2d       	mov	r31, r0
					
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
    23ca:	86 01       	movw	r16, r12
    23cc:	2a c0       	rjmp	.+84     	; 0x2422 <menu+0x8be>
							menu_display_l[5] = 'N';
						// CH5
						if (mixing_val_2 & CH5_DR)
							menu_display_l[14] = 'D';
						else
							menu_display_l[14] = 'N';
    23ce:	e0 92 52 02 	sts	0x0252, r14	; 0x800252 <battery_alarm+0x10e>
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
						menu_display_l = " Rud     CH5    ";
    23d2:	0f 2e       	mov	r0, r31
    23d4:	f4 e4       	ldi	r31, 0x44	; 68
    23d6:	2f 2e       	mov	r2, r31
    23d8:	f2 e0       	ldi	r31, 0x02	; 2
    23da:	3f 2e       	mov	r3, r31
    23dc:	f0 2d       	mov	r31, r0
					
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
    23de:	86 01       	movw	r16, r12
    23e0:	20 c0       	rjmp	.+64     	; 0x2422 <menu+0x8be>
						// Display init
						menu_display_h = " Rud     CH5   ";
						menu_display_l = " Exit           ";
						
						// Aileron
						if (mixing_val_2 & RUD_DR)
    23e2:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
    23e6:	83 ff       	sbrs	r24, 3
    23e8:	03 c0       	rjmp	.+6      	; 0x23f0 <menu+0x88c>
							menu_display_h[5] = 'D';
    23ea:	f0 92 7c 02 	sts	0x027C, r15	; 0x80027c <battery_alarm+0x138>
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <menu+0x890>
						else
							menu_display_h[5] = 'N';
    23f0:	e0 92 7c 02 	sts	0x027C, r14	; 0x80027c <battery_alarm+0x138>
						// Elevator
						if (mixing_val_2 & CH5_DR)
    23f4:	84 ff       	sbrs	r24, 4
    23f6:	0b c0       	rjmp	.+22     	; 0x240e <menu+0x8aa>
							menu_display_h[14] = 'D';
    23f8:	f0 92 85 02 	sts	0x0285, r15	; 0x800285 <battery_alarm+0x141>
					}
					else
					{
						// Display init
						menu_display_h = " Rud     CH5   ";
						menu_display_l = " Exit           ";
    23fc:	0f 2e       	mov	r0, r31
    23fe:	f6 e6       	ldi	r31, 0x66	; 102
    2400:	2f 2e       	mov	r2, r31
    2402:	f2 e0       	ldi	r31, 0x02	; 2
    2404:	3f 2e       	mov	r3, r31
    2406:	f0 2d       	mov	r31, r0
							menu_display_l[14] = 'N';
					}
					else
					{
						// Display init
						menu_display_h = " Rud     CH5   ";
    2408:	07 e7       	ldi	r16, 0x77	; 119
    240a:	12 e0       	ldi	r17, 0x02	; 2
    240c:	0a c0       	rjmp	.+20     	; 0x2422 <menu+0x8be>
							menu_display_h[5] = 'N';
						// Elevator
						if (mixing_val_2 & CH5_DR)
							menu_display_h[14] = 'D';
						else
							menu_display_h[14] = 'N';
    240e:	e0 92 85 02 	sts	0x0285, r14	; 0x800285 <battery_alarm+0x141>
					}
					else
					{
						// Display init
						menu_display_h = " Rud     CH5   ";
						menu_display_l = " Exit           ";
    2412:	0f 2e       	mov	r0, r31
    2414:	f6 e6       	ldi	r31, 0x66	; 102
    2416:	2f 2e       	mov	r2, r31
    2418:	f2 e0       	ldi	r31, 0x02	; 2
    241a:	3f 2e       	mov	r3, r31
    241c:	f0 2d       	mov	r31, r0
							menu_display_l[14] = 'N';
					}
					else
					{
						// Display init
						menu_display_h = " Rud     CH5   ";
    241e:	07 e7       	ldi	r16, 0x77	; 119
    2420:	12 e0       	ldi	r17, 0x02	; 2
							menu_display_h[14] = 'D';
						else
							menu_display_h[14] = 'N';
						
					}
					menu_display_h[15] = ' ';
    2422:	f8 01       	movw	r30, r16
    2424:	b7 86       	std	Z+15, r11	; 0x0f
					
					
					// Cursor move & val set //////////
					// Aileron
					if (menu_input == 0)
    2426:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_input>
    242a:	81 11       	cpse	r24, r1
    242c:	13 c0       	rjmp	.+38     	; 0x2454 <menu+0x8f0>
					{
						// Cursor move
						menu_display_h[0] = '>';
    242e:	40 82       	st	Z, r4
						
						if (enter)
    2430:	aa 20       	and	r10, r10
    2432:	11 f4       	brne	.+4      	; 0x2438 <menu+0x8d4>
    2434:	0c 94 b7 20 	jmp	0x416e	; 0x416e <menu+0x260a>
						{
							if (mixing_val_2 & AIL_DR)
    2438:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <mixing_val_2>
    243c:	90 ff       	sbrs	r25, 0
    243e:	05 c0       	rjmp	.+10     	; 0x244a <menu+0x8e6>
								mixing_val_2 &= ~AIL_DR;
    2440:	9e 7f       	andi	r25, 0xFE	; 254
    2442:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <mixing_val_2>
    2446:	0c 94 b7 20 	jmp	0x416e	; 0x416e <menu+0x260a>
							else
								mixing_val_2 |= AIL_DR;
    244a:	91 60       	ori	r25, 0x01	; 1
    244c:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <mixing_val_2>
    2450:	0c 94 b7 20 	jmp	0x416e	; 0x416e <menu+0x260a>
						}
					}
					else
						menu_display_h[0] = ' ';
    2454:	f8 01       	movw	r30, r16
    2456:	b0 82       	st	Z, r11
					
					
					// Elevator
					if (menu_input == 1)
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	99 f4       	brne	.+38     	; 0x2482 <menu+0x91e>
					{
						// Cursor move
						menu_display_h[8] = '>';
    245c:	40 86       	std	Z+8, r4	; 0x08
						
						if (enter)
    245e:	aa 20       	and	r10, r10
    2460:	11 f4       	brne	.+4      	; 0x2466 <menu+0x902>
    2462:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <menu+0x2612>
						{
							if (mixing_val_2 & ELE_DR)
    2466:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <mixing_val_2>
    246a:	91 ff       	sbrs	r25, 1
    246c:	05 c0       	rjmp	.+10     	; 0x2478 <menu+0x914>
								mixing_val_2 &= ~ELE_DR;
    246e:	9d 7f       	andi	r25, 0xFD	; 253
    2470:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <mixing_val_2>
    2474:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <menu+0x2612>
							else
								mixing_val_2 |= ELE_DR;
    2478:	92 60       	ori	r25, 0x02	; 2
    247a:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <mixing_val_2>
    247e:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <menu+0x2612>
						}
					}
					else
						menu_display_h[8] = ' ';
    2482:	f8 01       	movw	r30, r16
    2484:	b0 86       	std	Z+8, r11	; 0x08
					
					
					// Rudder
					if (menu_input == 2)
    2486:	82 30       	cpi	r24, 0x02	; 2
    2488:	a1 f4       	brne	.+40     	; 0x24b2 <menu+0x94e>
					{
						// Cursor move
						menu_display_l[0] = '>';
    248a:	f1 01       	movw	r30, r2
    248c:	40 82       	st	Z, r4
						
						if (enter)
    248e:	aa 20       	and	r10, r10
    2490:	11 f4       	brne	.+4      	; 0x2496 <menu+0x932>
    2492:	0c 94 bf 20 	jmp	0x417e	; 0x417e <menu+0x261a>
						{
							if (mixing_val_2 & RUD_DR)
    2496:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
    249a:	83 ff       	sbrs	r24, 3
    249c:	05 c0       	rjmp	.+10     	; 0x24a8 <menu+0x944>
								mixing_val_2 &= ~RUD_DR;
    249e:	87 7f       	andi	r24, 0xF7	; 247
    24a0:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
    24a4:	0c 94 bf 20 	jmp	0x417e	; 0x417e <menu+0x261a>
							else
								mixing_val_2 |= RUD_DR;
    24a8:	88 60       	ori	r24, 0x08	; 8
    24aa:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
    24ae:	0c 94 bf 20 	jmp	0x417e	; 0x417e <menu+0x261a>
						}
					}
					else
						menu_display_l[0] = ' ';
    24b2:	f1 01       	movw	r30, r2
    24b4:	b0 82       	st	Z, r11
				
					
					// CH5
					if (menu_input == 3)
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	79 f4       	brne	.+30     	; 0x24d8 <menu+0x974>
					{
						// Cursor move
						menu_display_l[8] = '>';
    24ba:	40 86       	std	Z+8, r4	; 0x08
						
						if (enter)
    24bc:	aa 20       	and	r10, r10
    24be:	d9 f0       	breq	.+54     	; 0x24f6 <menu+0x992>
						{
							if (mixing_val_2 & CH5_DR)
    24c0:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <mixing_val_2>
    24c4:	84 ff       	sbrs	r24, 4
    24c6:	04 c0       	rjmp	.+8      	; 0x24d0 <menu+0x96c>
								mixing_val_2 &= ~CH5_DR;
    24c8:	8f 7e       	andi	r24, 0xEF	; 239
    24ca:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
    24ce:	13 c0       	rjmp	.+38     	; 0x24f6 <menu+0x992>
							else
								mixing_val_2 |= CH5_DR;
    24d0:	80 61       	ori	r24, 0x10	; 16
    24d2:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <mixing_val_2>
    24d6:	0f c0       	rjmp	.+30     	; 0x24f6 <menu+0x992>
						}
					}
					else
						menu_display_l[8] = ' ';
    24d8:	f1 01       	movw	r30, r2
    24da:	b0 86       	std	Z+8, r11	; 0x08
					
					// Exit
					if (menu_input == 4)
    24dc:	84 30       	cpi	r24, 0x04	; 4
    24de:	59 f4       	brne	.+22     	; 0x24f6 <menu+0x992>
					{
						// Cursor move
						menu_display_h[8] = ' ';
    24e0:	f8 01       	movw	r30, r16
    24e2:	b0 86       	std	Z+8, r11	; 0x08
						menu_display_l[0] = '>';
    24e4:	f1 01       	movw	r30, r2
    24e6:	40 82       	st	Z, r4
						menu_display_l[8] = ' ';
						
						if (enter)
    24e8:	aa 20       	and	r10, r10
    24ea:	29 f0       	breq	.+10     	; 0x24f6 <menu+0x992>
						{
							menu_input = menu_input_temp;
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
							break;
    24f2:	0c 94 80 20 	jmp	0x4100	; 0x4100 <menu+0x259c>
						}
					}
					
					
					// LCD drive
					LCD_home();
    24f6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					LCD_string(menu_display_h, 16);
    24fa:	60 e1       	ldi	r22, 0x10	; 16
    24fc:	c8 01       	movw	r24, r16
    24fe:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    2502:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    2506:	60 e1       	ldi	r22, 0x10	; 16
    2508:	c1 01       	movw	r24, r2
    250a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					
					
					// Buzzer drive
					buzzer_switch();
    250e:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
					
				} // while (1)
    2512:	23 cf       	rjmp	.-442    	; 0x235a <menu+0x7f6>
			}// if (enter)
		} // else if (menu_input == 3)
		
		
		////////// Trim //////////////////////////////////////////////////////////
		else if (menu_input == 4)
    2514:	94 30       	cpi	r25, 0x04	; 4
    2516:	09 f0       	breq	.+2      	; 0x251a <menu+0x9b6>
    2518:	4a c2       	rjmp	.+1172   	; 0x29ae <menu+0xe4a>
		{
			// Display
			menu_display_h = " Dual Rate      ";
			menu_display_l = ">Trim           ";
			
			if (enter)
    251a:	88 23       	and	r24, r24
    251c:	11 f4       	brne	.+4      	; 0x2522 <menu+0x9be>
    251e:	0c 94 30 20 	jmp	0x4060	; 0x4060 <menu+0x24fc>
			{
				menu_input_temp = menu_input;
				menu_input = cur_model;
    2522:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <cur_model>
    2526:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
				LCD_CLEAR();
    252a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
							menu_display_l[13] = '-';
							menu_display_l[14] = 48 - trim[RUDDER];
						}
						else
						{	
							menu_display_l[13] = ' ';
    252e:	0f 2e       	mov	r0, r31
    2530:	f7 e8       	ldi	r31, 0x87	; 135
    2532:	ef 2e       	mov	r14, r31
    2534:	f2 e0       	ldi	r31, 0x02	; 2
    2536:	ff 2e       	mov	r15, r31
    2538:	f0 2d       	mov	r31, r0
    253a:	68 94       	set
    253c:	bb 24       	eor	r11, r11
    253e:	b5 f8       	bld	r11, 5

					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
    2540:	0f 2e       	mov	r0, r31
    2542:	f5 e5       	ldi	r31, 0x55	; 85
    2544:	cf 2e       	mov	r12, r31
    2546:	f2 e0       	ldi	r31, 0x02	; 2
    2548:	df 2e       	mov	r13, r31
    254a:	f0 2d       	mov	r31, r0
							menu_display_l[6] = trim[THROTTLE] + 48;
						}
						// Rudder
						if (trim[RUDDER] < 0)
						{	
							menu_display_l[13] = '-';
    254c:	0f 2e       	mov	r0, r31
    254e:	fd e2       	ldi	r31, 0x2D	; 45
    2550:	af 2e       	mov	r10, r31
    2552:	f0 2d       	mov	r31, r0
							menu_display_l[14] = 48 - trim[RUDDER];
    2554:	0f 2e       	mov	r0, r31
    2556:	f0 e3       	ldi	r31, 0x30	; 48
    2558:	4f 2e       	mov	r4, r31
    255a:	f0 2d       	mov	r31, r0
									
									// Trim limit
									if (trim[CH5] > TRIM_LIM)
										trim[CH5] = TRIM_LIM;
									else if (trim[CH5] < -TRIM_LIM)
										trim[CH5] = -TRIM_LIM;
    255c:	9a 82       	std	Y+2, r9	; 0x02
    255e:	89 82       	std	Y+1, r8	; 0x01
    2560:	96 2c       	mov	r9, r6
    2562:	67 2c       	mov	r6, r7
				menu_input_temp = menu_input;
				menu_input = cur_model;
				LCD_CLEAR();
				while (1)
				{
					enter = menu_read();
    2564:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)		// Since max # of models is 8, limit model # input
    2568:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    256c:	99 23       	and	r25, r25
    256e:	1c f4       	brge	.+6      	; 0x2576 <menu+0xa12>
						menu_input = 0;
    2570:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    2574:	09 c0       	rjmp	.+18     	; 0x2588 <menu+0xa24>
					else if (menu_input > 5)
    2576:	96 30       	cpi	r25, 0x06	; 6
    2578:	24 f0       	brlt	.+8      	; 0x2582 <menu+0xa1e>
						menu_input = 5;
    257a:	95 e0       	ldi	r25, 0x05	; 5
    257c:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    2580:	49 c0       	rjmp	.+146    	; 0x2614 <menu+0xab0>
					

					// Display & stat /////////////////
					if (menu_input < 4)
    2582:	94 30       	cpi	r25, 0x04	; 4
    2584:	0c f0       	brlt	.+2      	; 0x2588 <menu+0xa24>
    2586:	46 c0       	rjmp	.+140    	; 0x2614 <menu+0xab0>
						// Display init
						menu_display_h = " Ail     Ele    ";
						menu_display_l = " Thr     Rud    ";
						
						// Aileron
						if (trim[AILERON] < 0)
    2588:	e7 eb       	ldi	r30, 0xB7	; 183
    258a:	f5 e0       	ldi	r31, 0x05	; 5
    258c:	90 81       	ld	r25, Z
    258e:	99 23       	and	r25, r25
    2590:	44 f4       	brge	.+16     	; 0x25a2 <menu+0xa3e>
						{
							menu_display_h[5] = '-';
    2592:	f6 01       	movw	r30, r12
    2594:	a5 82       	std	Z+5, r10	; 0x05
							menu_display_h[6] = 48 - trim[AILERON];
    2596:	f4 2d       	mov	r31, r4
    2598:	f9 1b       	sub	r31, r25
    259a:	9f 2f       	mov	r25, r31
    259c:	f6 01       	movw	r30, r12
    259e:	96 83       	std	Z+6, r25	; 0x06
    25a0:	04 c0       	rjmp	.+8      	; 0x25aa <menu+0xa46>
						}
						else
						{
							menu_display_h[5] = ' ';
    25a2:	f6 01       	movw	r30, r12
    25a4:	b5 82       	std	Z+5, r11	; 0x05
							menu_display_h[6] = trim[AILERON] + 48;
    25a6:	90 5d       	subi	r25, 0xD0	; 208
    25a8:	96 83       	std	Z+6, r25	; 0x06
						}
						// Elevator
						if (trim[ELEVATOR] < 0)
    25aa:	90 91 b8 05 	lds	r25, 0x05B8	; 0x8005b8 <trim+0x1>
    25ae:	99 23       	and	r25, r25
    25b0:	44 f4       	brge	.+16     	; 0x25c2 <menu+0xa5e>
						{	
							menu_display_h[13] = '-';
    25b2:	f6 01       	movw	r30, r12
    25b4:	a5 86       	std	Z+13, r10	; 0x0d
							menu_display_h[14] = 48 - trim[ELEVATOR];
    25b6:	f4 2d       	mov	r31, r4
    25b8:	f9 1b       	sub	r31, r25
    25ba:	9f 2f       	mov	r25, r31
    25bc:	f6 01       	movw	r30, r12
    25be:	96 87       	std	Z+14, r25	; 0x0e
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <menu+0xa66>
						}
						else
						{	
							menu_display_h[13] = ' ';
    25c2:	f6 01       	movw	r30, r12
    25c4:	b5 86       	std	Z+13, r11	; 0x0d
							menu_display_h[14] = trim[ELEVATOR] + 48;
    25c6:	90 5d       	subi	r25, 0xD0	; 208
    25c8:	96 87       	std	Z+14, r25	; 0x0e
						}
						// Throttle
						if (trim[THROTTLE] < 0)
    25ca:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <trim+0x2>
    25ce:	99 23       	and	r25, r25
    25d0:	44 f4       	brge	.+16     	; 0x25e2 <menu+0xa7e>
						{
							menu_display_l[5] = '-';
    25d2:	f7 01       	movw	r30, r14
    25d4:	a5 82       	std	Z+5, r10	; 0x05
							menu_display_l[6] = 48 - trim[THROTTLE];
    25d6:	f4 2d       	mov	r31, r4
    25d8:	f9 1b       	sub	r31, r25
    25da:	9f 2f       	mov	r25, r31
    25dc:	f7 01       	movw	r30, r14
    25de:	96 83       	std	Z+6, r25	; 0x06
    25e0:	04 c0       	rjmp	.+8      	; 0x25ea <menu+0xa86>
						}
						else
						{	
							menu_display_l[5] = ' ';
    25e2:	f7 01       	movw	r30, r14
    25e4:	b5 82       	std	Z+5, r11	; 0x05
							menu_display_l[6] = trim[THROTTLE] + 48;
    25e6:	90 5d       	subi	r25, 0xD0	; 208
    25e8:	96 83       	std	Z+6, r25	; 0x06
						}
						// Rudder
						if (trim[RUDDER] < 0)
    25ea:	90 91 ba 05 	lds	r25, 0x05BA	; 0x8005ba <trim+0x3>
    25ee:	99 23       	and	r25, r25
    25f0:	54 f4       	brge	.+20     	; 0x2606 <menu+0xaa2>
						{	
							menu_display_l[13] = '-';
    25f2:	f7 01       	movw	r30, r14
    25f4:	a5 86       	std	Z+13, r10	; 0x0d
							menu_display_l[14] = 48 - trim[RUDDER];
    25f6:	f4 2d       	mov	r31, r4
    25f8:	f9 1b       	sub	r31, r25
    25fa:	9f 2f       	mov	r25, r31
    25fc:	f7 01       	movw	r30, r14
    25fe:	96 87       	std	Z+14, r25	; 0x0e
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
						menu_display_l = " Thr     Rud    ";
    2600:	17 01       	movw	r2, r14

					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
    2602:	86 01       	movw	r16, r12
    2604:	40 c0       	rjmp	.+128    	; 0x2686 <menu+0xb22>
							menu_display_l[13] = '-';
							menu_display_l[14] = 48 - trim[RUDDER];
						}
						else
						{	
							menu_display_l[13] = ' ';
    2606:	f7 01       	movw	r30, r14
    2608:	b5 86       	std	Z+13, r11	; 0x0d
							menu_display_l[14] = trim[RUDDER] + 48;
    260a:	90 5d       	subi	r25, 0xD0	; 208
    260c:	96 87       	std	Z+14, r25	; 0x0e
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
						menu_display_l = " Thr     Rud    ";
    260e:	17 01       	movw	r2, r14

					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " Ail     Ele    ";
    2610:	86 01       	movw	r16, r12
    2612:	39 c0       	rjmp	.+114    	; 0x2686 <menu+0xb22>
						// Display init
						menu_display_h = " Thr     Rud    ";
						menu_display_l = " CH5     Exit   ";
						
						// Throttle
						if (trim[THROTTLE] < 0)
    2614:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <trim+0x2>
    2618:	99 23       	and	r25, r25
    261a:	1c f4       	brge	.+6      	; 0x2622 <menu+0xabe>
						{
							menu_display_h[5] = '-';
    261c:	f7 01       	movw	r30, r14
    261e:	a5 82       	std	Z+5, r10	; 0x05
    2620:	04 c0       	rjmp	.+8      	; 0x262a <menu+0xac6>
							menu_display_l[6] = 48 - trim[THROTTLE];
						}
						else
						{
							menu_display_h[5] = ' ';
    2622:	f7 01       	movw	r30, r14
    2624:	b5 82       	std	Z+5, r11	; 0x05
							menu_display_h[6] = trim[THROTTLE] + 48;
    2626:	90 5d       	subi	r25, 0xD0	; 208
    2628:	96 83       	std	Z+6, r25	; 0x06
						}
						// Rudder
						if (trim[RUDDER] < 0)
    262a:	90 91 ba 05 	lds	r25, 0x05BA	; 0x8005ba <trim+0x3>
    262e:	99 23       	and	r25, r25
    2630:	44 f4       	brge	.+16     	; 0x2642 <menu+0xade>
						{
							menu_display_h[13] = '-';
    2632:	f7 01       	movw	r30, r14
    2634:	a5 86       	std	Z+13, r10	; 0x0d
							menu_display_h[14] = 48 - trim[RUDDER];
    2636:	f4 2d       	mov	r31, r4
    2638:	f9 1b       	sub	r31, r25
    263a:	9f 2f       	mov	r25, r31
    263c:	f7 01       	movw	r30, r14
    263e:	96 87       	std	Z+14, r25	; 0x0e
    2640:	04 c0       	rjmp	.+8      	; 0x264a <menu+0xae6>
						}
						else
						{
							menu_display_h[13] = ' ';
    2642:	f7 01       	movw	r30, r14
    2644:	b5 86       	std	Z+13, r11	; 0x0d
							menu_display_h[14] = trim[RUDDER] + 48;
    2646:	90 5d       	subi	r25, 0xD0	; 208
    2648:	96 87       	std	Z+14, r25	; 0x0e
						}
						
						// CH5
						if (trim[CH5] < 0)
    264a:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <trim+0x4>
    264e:	99 23       	and	r25, r25
    2650:	74 f4       	brge	.+28     	; 0x266e <menu+0xb0a>
						{
							menu_display_l[5] = '-';
    2652:	a0 92 9d 02 	sts	0x029D, r10	; 0x80029d <battery_alarm+0x159>
							menu_display_l[6] = 48 - trim[CH5];
    2656:	f4 2d       	mov	r31, r4
    2658:	f9 1b       	sub	r31, r25
    265a:	f0 93 9e 02 	sts	0x029E, r31	; 0x80029e <battery_alarm+0x15a>
					}
					else
					{
						// Display init
						menu_display_h = " Thr     Rud    ";
						menu_display_l = " CH5     Exit   ";
    265e:	0f 2e       	mov	r0, r31
    2660:	f8 e9       	ldi	r31, 0x98	; 152
    2662:	2f 2e       	mov	r2, r31
    2664:	f2 e0       	ldi	r31, 0x02	; 2
    2666:	3f 2e       	mov	r3, r31
    2668:	f0 2d       	mov	r31, r0
						
					}
					else
					{
						// Display init
						menu_display_h = " Thr     Rud    ";
    266a:	87 01       	movw	r16, r14
    266c:	0c c0       	rjmp	.+24     	; 0x2686 <menu+0xb22>
							menu_display_l[5] = '-';
							menu_display_l[6] = 48 - trim[CH5];
						}
						else
						{
							menu_display_l[5] = ' ';
    266e:	b0 92 9d 02 	sts	0x029D, r11	; 0x80029d <battery_alarm+0x159>
							menu_display_l[6] = trim[CH5] + 48;
    2672:	90 5d       	subi	r25, 0xD0	; 208
    2674:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <battery_alarm+0x15a>
					}
					else
					{
						// Display init
						menu_display_h = " Thr     Rud    ";
						menu_display_l = " CH5     Exit   ";
    2678:	0f 2e       	mov	r0, r31
    267a:	f8 e9       	ldi	r31, 0x98	; 152
    267c:	2f 2e       	mov	r2, r31
    267e:	f2 e0       	ldi	r31, 0x02	; 2
    2680:	3f 2e       	mov	r3, r31
    2682:	f0 2d       	mov	r31, r0
						
					}
					else
					{
						// Display init
						menu_display_h = " Thr     Rud    ";
    2684:	87 01       	movw	r16, r14
					}
					
					
					// Cursor move & val set //////////
					// Aileron
					if (menu_input == 0)
    2686:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    268a:	91 11       	cpse	r25, r1
    268c:	42 c0       	rjmp	.+132    	; 0x2712 <menu+0xbae>
					{
						// Cursor move
						menu_display_h[0] = '>';
    268e:	9e e3       	ldi	r25, 0x3E	; 62
    2690:	f8 01       	movw	r30, r16
    2692:	90 83       	st	Z, r25
						
						if (enter)
    2694:	88 23       	and	r24, r24
    2696:	11 f4       	brne	.+4      	; 0x269c <menu+0xb38>
    2698:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <menu+0x266e>
								{
									trim[AILERON] -= menu_input;
									
									// Trim limit
									if (trim[AILERON] > TRIM_LIM)
										trim[AILERON] = TRIM_LIM;
    269c:	0f 2e       	mov	r0, r31
    269e:	f9 e0       	ldi	r31, 0x09	; 9
    26a0:	7f 2e       	mov	r7, r31
    26a2:	f0 2d       	mov	r31, r0
						{
							// menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    26a4:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								
								// if menu button is pressed
								if (menu_input)
    26a8:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    26ac:	99 23       	and	r25, r25
    26ae:	a1 f0       	breq	.+40     	; 0x26d8 <menu+0xb74>
								{
									trim[AILERON] -= menu_input;
    26b0:	e7 eb       	ldi	r30, 0xB7	; 183
    26b2:	f5 e0       	ldi	r31, 0x05	; 5
    26b4:	20 81       	ld	r18, Z
    26b6:	29 1b       	sub	r18, r25
									
									// Trim limit
									if (trim[AILERON] > TRIM_LIM)
    26b8:	2a 30       	cpi	r18, 0x0A	; 10
    26ba:	14 f0       	brlt	.+4      	; 0x26c0 <menu+0xb5c>
										trim[AILERON] = TRIM_LIM;
    26bc:	70 82       	st	Z, r7
    26be:	0a c0       	rjmp	.+20     	; 0x26d4 <menu+0xb70>
									else if (trim[AILERON] < -TRIM_LIM)
    26c0:	27 3f       	cpi	r18, 0xF7	; 247
    26c2:	24 f0       	brlt	.+8      	; 0x26cc <menu+0xb68>
								enter = menu_read();
								
								// if menu button is pressed
								if (menu_input)
								{
									trim[AILERON] -= menu_input;
    26c4:	e7 eb       	ldi	r30, 0xB7	; 183
    26c6:	f5 e0       	ldi	r31, 0x05	; 5
    26c8:	20 83       	st	Z, r18
    26ca:	04 c0       	rjmp	.+8      	; 0x26d4 <menu+0xb70>
									
									// Trim limit
									if (trim[AILERON] > TRIM_LIM)
										trim[AILERON] = TRIM_LIM;
									else if (trim[AILERON] < -TRIM_LIM)
										trim[AILERON] = -TRIM_LIM;
    26cc:	27 ef       	ldi	r18, 0xF7	; 247
    26ce:	e7 eb       	ldi	r30, 0xB7	; 183
    26d0:	f5 e0       	ldi	r31, 0x05	; 5
    26d2:	20 83       	st	Z, r18
										
									menu_input = 0;
    26d4:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								
								// Exit
								if (enter)
    26d8:	81 11       	cpse	r24, r1
    26da:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <menu+0x262c>
								{
									//menu_input = 0;
									break;
								}
								// Display
								if (trim[AILERON] < 0)
    26de:	e7 eb       	ldi	r30, 0xB7	; 183
    26e0:	f5 e0       	ldi	r31, 0x05	; 5
    26e2:	80 81       	ld	r24, Z
    26e4:	88 23       	and	r24, r24
    26e6:	44 f4       	brge	.+16     	; 0x26f8 <menu+0xb94>
								{
									menu_display_h[5] = '-';
    26e8:	f8 01       	movw	r30, r16
    26ea:	a5 82       	std	Z+5, r10	; 0x05
									menu_display_h[6] = 48 - trim[AILERON];
    26ec:	f4 2d       	mov	r31, r4
    26ee:	f8 1b       	sub	r31, r24
    26f0:	8f 2f       	mov	r24, r31
    26f2:	f8 01       	movw	r30, r16
    26f4:	86 83       	std	Z+6, r24	; 0x06
    26f6:	04 c0       	rjmp	.+8      	; 0x2700 <menu+0xb9c>
								}
								else
								{
									menu_display_h[5] = ' ';
    26f8:	f8 01       	movw	r30, r16
    26fa:	b5 82       	std	Z+5, r11	; 0x05
									menu_display_h[6] = trim[AILERON] + 48;
    26fc:	80 5d       	subi	r24, 0xD0	; 208
    26fe:	86 83       	std	Z+6, r24	; 0x06
								}
								
								// LCD drive
								LCD_string(menu_display_h, 16);
    2700:	60 e1       	ldi	r22, 0x10	; 16
    2702:	c8 01       	movw	r24, r16
    2704:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								LCD_home();
    2708:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								
								// Buzzer drive
								buzzer_switch();
    270c:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    2710:	c9 cf       	rjmp	.-110    	; 0x26a4 <menu+0xb40>
							
						} //if (enter)
					} //if (menu_input == 0)
					else
						menu_display_h[0] = ' ';
    2712:	f8 01       	movw	r30, r16
    2714:	b0 82       	st	Z, r11
					
					// Elevator
					if (menu_input == 1)
    2716:	91 30       	cpi	r25, 0x01	; 1
    2718:	09 f0       	breq	.+2      	; 0x271c <menu+0xbb8>
    271a:	42 c0       	rjmp	.+132    	; 0x27a0 <menu+0xc3c>
					{
						// Cursor move
						menu_display_h[8] = '>';
    271c:	9e e3       	ldi	r25, 0x3E	; 62
    271e:	90 87       	std	Z+8, r25	; 0x08
						
						if (enter)
    2720:	88 23       	and	r24, r24
    2722:	09 f4       	brne	.+2      	; 0x2726 <menu+0xbc2>
    2724:	89 c0       	rjmp	.+274    	; 0x2838 <menu+0xcd4>
						{
							menu_input = 0;
    2726:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								{
									trim[ELEVATOR] -= menu_input;
									
									// Trim limit
									if (trim[ELEVATOR] > TRIM_LIM)
										trim[ELEVATOR] = TRIM_LIM;
    272a:	0f 2e       	mov	r0, r31
    272c:	f9 e0       	ldi	r31, 0x09	; 9
    272e:	7f 2e       	mov	r7, r31
    2730:	f0 2d       	mov	r31, r0
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    2732:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								
								// if menu button is pressed
								if (menu_input)
    2736:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    273a:	99 23       	and	r25, r25
    273c:	91 f0       	breq	.+36     	; 0x2762 <menu+0xbfe>
								{
									trim[ELEVATOR] -= menu_input;
    273e:	20 91 b8 05 	lds	r18, 0x05B8	; 0x8005b8 <trim+0x1>
    2742:	29 1b       	sub	r18, r25
									
									// Trim limit
									if (trim[ELEVATOR] > TRIM_LIM)
    2744:	2a 30       	cpi	r18, 0x0A	; 10
    2746:	1c f0       	brlt	.+6      	; 0x274e <menu+0xbea>
										trim[ELEVATOR] = TRIM_LIM;
    2748:	70 92 b8 05 	sts	0x05B8, r7	; 0x8005b8 <trim+0x1>
    274c:	08 c0       	rjmp	.+16     	; 0x275e <menu+0xbfa>
									else if (trim[ELEVATOR] < -TRIM_LIM)
    274e:	27 3f       	cpi	r18, 0xF7	; 247
    2750:	1c f0       	brlt	.+6      	; 0x2758 <menu+0xbf4>
								enter = menu_read();
								
								// if menu button is pressed
								if (menu_input)
								{
									trim[ELEVATOR] -= menu_input;
    2752:	20 93 b8 05 	sts	0x05B8, r18	; 0x8005b8 <trim+0x1>
    2756:	03 c0       	rjmp	.+6      	; 0x275e <menu+0xbfa>
									
									// Trim limit
									if (trim[ELEVATOR] > TRIM_LIM)
										trim[ELEVATOR] = TRIM_LIM;
									else if (trim[ELEVATOR] < -TRIM_LIM)
										trim[ELEVATOR] = -TRIM_LIM;
    2758:	f7 ef       	ldi	r31, 0xF7	; 247
    275a:	f0 93 b8 05 	sts	0x05B8, r31	; 0x8005b8 <trim+0x1>
									
									menu_input = 0;
    275e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								
								// Exit
								if (enter)
    2762:	88 23       	and	r24, r24
    2764:	21 f0       	breq	.+8      	; 0x276e <menu+0xc0a>
								{
									menu_input = 1;
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
									break;
    276c:	65 c0       	rjmp	.+202    	; 0x2838 <menu+0xcd4>
								}
								// Display
								if (trim[ELEVATOR] < 0)
    276e:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <trim+0x1>
    2772:	88 23       	and	r24, r24
    2774:	44 f4       	brge	.+16     	; 0x2786 <menu+0xc22>
								{
									menu_display_h[13] = '-';
    2776:	f8 01       	movw	r30, r16
    2778:	a5 86       	std	Z+13, r10	; 0x0d
									menu_display_h[14] = 48 - trim[ELEVATOR];
    277a:	f4 2d       	mov	r31, r4
    277c:	f8 1b       	sub	r31, r24
    277e:	8f 2f       	mov	r24, r31
    2780:	f8 01       	movw	r30, r16
    2782:	86 87       	std	Z+14, r24	; 0x0e
    2784:	04 c0       	rjmp	.+8      	; 0x278e <menu+0xc2a>
								}
								else
								{
									menu_display_h[13] = ' ';
    2786:	f8 01       	movw	r30, r16
    2788:	b5 86       	std	Z+13, r11	; 0x0d
									menu_display_h[14] = trim[ELEVATOR] + 48;
    278a:	80 5d       	subi	r24, 0xD0	; 208
    278c:	86 87       	std	Z+14, r24	; 0x0e
								}
								
								// LCD drive
								LCD_string(menu_display_h, 16);
    278e:	60 e1       	ldi	r22, 0x10	; 16
    2790:	c8 01       	movw	r24, r16
    2792:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								LCD_home();
    2796:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								
								// Buzzer drive
								buzzer_switch();
    279a:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    279e:	c9 cf       	rjmp	.-110    	; 0x2732 <menu+0xbce>
							
						} //if(enter)
					}
					else
						menu_display_h[8] = ' ';
    27a0:	f8 01       	movw	r30, r16
    27a2:	b0 86       	std	Z+8, r11	; 0x08
					
					// Throttle
					if (menu_input == 2)
    27a4:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    27a8:	92 30       	cpi	r25, 0x02	; 2
    27aa:	09 f0       	breq	.+2      	; 0x27ae <menu+0xc4a>
    27ac:	45 c0       	rjmp	.+138    	; 0x2838 <menu+0xcd4>
					{
						// Cursor move
						menu_display_l[0] = '>';
    27ae:	9e e3       	ldi	r25, 0x3E	; 62
    27b0:	f1 01       	movw	r30, r2
    27b2:	90 83       	st	Z, r25
						
						if (enter)
    27b4:	88 23       	and	r24, r24
    27b6:	09 f4       	brne	.+2      	; 0x27ba <menu+0xc56>
    27b8:	8a c0       	rjmp	.+276    	; 0x28ce <menu+0xd6a>
						{
							menu_input = 0;
    27ba:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								{
									trim[THROTTLE] -= menu_input;
									
									// Trim limit
									if (trim[THROTTLE] > TRIM_LIM)
										trim[THROTTLE] = TRIM_LIM;
    27be:	0f 2e       	mov	r0, r31
    27c0:	f9 e0       	ldi	r31, 0x09	; 9
    27c2:	7f 2e       	mov	r7, r31
    27c4:	f0 2d       	mov	r31, r0
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    27c6:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								
								// if menu button is pressed
								if (menu_input)
    27ca:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    27ce:	99 23       	and	r25, r25
    27d0:	91 f0       	breq	.+36     	; 0x27f6 <menu+0xc92>
								{
									trim[THROTTLE] -= menu_input;
    27d2:	20 91 b9 05 	lds	r18, 0x05B9	; 0x8005b9 <trim+0x2>
    27d6:	29 1b       	sub	r18, r25
									
									// Trim limit
									if (trim[THROTTLE] > TRIM_LIM)
    27d8:	2a 30       	cpi	r18, 0x0A	; 10
    27da:	1c f0       	brlt	.+6      	; 0x27e2 <menu+0xc7e>
										trim[THROTTLE] = TRIM_LIM;
    27dc:	70 92 b9 05 	sts	0x05B9, r7	; 0x8005b9 <trim+0x2>
    27e0:	08 c0       	rjmp	.+16     	; 0x27f2 <menu+0xc8e>
									else if (trim[THROTTLE] < -TRIM_LIM)
    27e2:	27 3f       	cpi	r18, 0xF7	; 247
    27e4:	1c f0       	brlt	.+6      	; 0x27ec <menu+0xc88>
								enter = menu_read();
								
								// if menu button is pressed
								if (menu_input)
								{
									trim[THROTTLE] -= menu_input;
    27e6:	20 93 b9 05 	sts	0x05B9, r18	; 0x8005b9 <trim+0x2>
    27ea:	03 c0       	rjmp	.+6      	; 0x27f2 <menu+0xc8e>
									
									// Trim limit
									if (trim[THROTTLE] > TRIM_LIM)
										trim[THROTTLE] = TRIM_LIM;
									else if (trim[THROTTLE] < -TRIM_LIM)
										trim[THROTTLE] = -TRIM_LIM;
    27ec:	f7 ef       	ldi	r31, 0xF7	; 247
    27ee:	f0 93 b9 05 	sts	0x05B9, r31	; 0x8005b9 <trim+0x2>
									
									menu_input = 0;
    27f2:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								
								// Exit
								if (enter)
    27f6:	88 23       	and	r24, r24
    27f8:	21 f0       	breq	.+8      	; 0x2802 <menu+0xc9e>
								{
									menu_input = 2;
    27fa:	92 e0       	ldi	r25, 0x02	; 2
    27fc:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
									break;
    2800:	66 c0       	rjmp	.+204    	; 0x28ce <menu+0xd6a>
								}
								// Display
								if (trim[THROTTLE] < 0)
    2802:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <trim+0x2>
    2806:	88 23       	and	r24, r24
    2808:	44 f4       	brge	.+16     	; 0x281a <menu+0xcb6>
								{
									menu_display_l[5] = '-';
    280a:	f1 01       	movw	r30, r2
    280c:	a5 82       	std	Z+5, r10	; 0x05
									menu_display_l[6] = 48 - trim[THROTTLE];
    280e:	f4 2d       	mov	r31, r4
    2810:	f8 1b       	sub	r31, r24
    2812:	8f 2f       	mov	r24, r31
    2814:	f1 01       	movw	r30, r2
    2816:	86 83       	std	Z+6, r24	; 0x06
    2818:	04 c0       	rjmp	.+8      	; 0x2822 <menu+0xcbe>
								}
								else
								{
									menu_display_l[5] = ' ';
    281a:	f1 01       	movw	r30, r2
    281c:	b5 82       	std	Z+5, r11	; 0x05
									menu_display_l[6] = trim[THROTTLE] + 48;
    281e:	80 5d       	subi	r24, 0xD0	; 208
    2820:	86 83       	std	Z+6, r24	; 0x06
								}
								
								// LCD drive
								LCD_home();
    2822:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    2826:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    282a:	60 e1       	ldi	r22, 0x10	; 16
    282c:	c1 01       	movw	r24, r2
    282e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    2832:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    2836:	c7 cf       	rjmp	.-114    	; 0x27c6 <menu+0xc62>
							
						} // if(enter)
					} // if(menu_input == 2)
					else
						menu_display_l[0] = ' ';
    2838:	f1 01       	movw	r30, r2
    283a:	b0 82       	st	Z, r11
					
					// Rudder
					if (menu_input == 3)
    283c:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2840:	93 30       	cpi	r25, 0x03	; 3
    2842:	09 f0       	breq	.+2      	; 0x2846 <menu+0xce2>
    2844:	44 c0       	rjmp	.+136    	; 0x28ce <menu+0xd6a>
					{
						// Cursor move
						menu_display_l[8] = '>';
    2846:	9e e3       	ldi	r25, 0x3E	; 62
    2848:	90 87       	std	Z+8, r25	; 0x08
						
						if (enter)
    284a:	88 23       	and	r24, r24
    284c:	09 f4       	brne	.+2      	; 0x2850 <menu+0xcec>
    284e:	a0 c0       	rjmp	.+320    	; 0x2990 <menu+0xe2c>
						{
							menu_input = 0;
    2850:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								{
									trim[RUDDER] -= menu_input;
									
									// Trim limit
									if (trim[RUDDER] > TRIM_LIM)
										trim[RUDDER] = TRIM_LIM;
    2854:	0f 2e       	mov	r0, r31
    2856:	f9 e0       	ldi	r31, 0x09	; 9
    2858:	7f 2e       	mov	r7, r31
    285a:	f0 2d       	mov	r31, r0
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    285c:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								
								// if menu button is pressed
								if (menu_input)
    2860:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2864:	99 23       	and	r25, r25
    2866:	91 f0       	breq	.+36     	; 0x288c <menu+0xd28>
								{
									trim[RUDDER] -= menu_input;
    2868:	20 91 ba 05 	lds	r18, 0x05BA	; 0x8005ba <trim+0x3>
    286c:	29 1b       	sub	r18, r25
									
									// Trim limit
									if (trim[RUDDER] > TRIM_LIM)
    286e:	2a 30       	cpi	r18, 0x0A	; 10
    2870:	1c f0       	brlt	.+6      	; 0x2878 <menu+0xd14>
										trim[RUDDER] = TRIM_LIM;
    2872:	70 92 ba 05 	sts	0x05BA, r7	; 0x8005ba <trim+0x3>
    2876:	08 c0       	rjmp	.+16     	; 0x2888 <menu+0xd24>
									else if (trim[RUDDER] < -TRIM_LIM)
    2878:	27 3f       	cpi	r18, 0xF7	; 247
    287a:	1c f0       	brlt	.+6      	; 0x2882 <menu+0xd1e>
								enter = menu_read();
								
								// if menu button is pressed
								if (menu_input)
								{
									trim[RUDDER] -= menu_input;
    287c:	20 93 ba 05 	sts	0x05BA, r18	; 0x8005ba <trim+0x3>
    2880:	03 c0       	rjmp	.+6      	; 0x2888 <menu+0xd24>
									
									// Trim limit
									if (trim[RUDDER] > TRIM_LIM)
										trim[RUDDER] = TRIM_LIM;
									else if (trim[RUDDER] < -TRIM_LIM)
										trim[RUDDER] = -TRIM_LIM;
    2882:	f7 ef       	ldi	r31, 0xF7	; 247
    2884:	f0 93 ba 05 	sts	0x05BA, r31	; 0x8005ba <trim+0x3>
									
									menu_input = 0;
    2888:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								
								// Exit
								if (enter)
    288c:	88 23       	and	r24, r24
    288e:	21 f0       	breq	.+8      	; 0x2898 <menu+0xd34>
								{
									menu_input = 3;
    2890:	83 e0       	ldi	r24, 0x03	; 3
    2892:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    2896:	7c c0       	rjmp	.+248    	; 0x2990 <menu+0xe2c>
								}
								// Display
								if (trim[RUDDER] < 0)
    2898:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <trim+0x3>
    289c:	88 23       	and	r24, r24
    289e:	44 f4       	brge	.+16     	; 0x28b0 <menu+0xd4c>
								{
									menu_display_l[13] = '-';
    28a0:	f1 01       	movw	r30, r2
    28a2:	a5 86       	std	Z+13, r10	; 0x0d
									menu_display_l[14] = 48 - trim[RUDDER];
    28a4:	f4 2d       	mov	r31, r4
    28a6:	f8 1b       	sub	r31, r24
    28a8:	8f 2f       	mov	r24, r31
    28aa:	f1 01       	movw	r30, r2
    28ac:	86 87       	std	Z+14, r24	; 0x0e
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <menu+0xd54>
								}
								else
								{
									menu_display_l[13] = ' ';
    28b0:	f1 01       	movw	r30, r2
    28b2:	b5 86       	std	Z+13, r11	; 0x0d
									menu_display_l[14] = trim[RUDDER] + 48;
    28b4:	80 5d       	subi	r24, 0xD0	; 208
    28b6:	86 87       	std	Z+14, r24	; 0x0e
								}
								
								// LCD drive
								LCD_home();
    28b8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    28bc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    28c0:	60 e1       	ldi	r22, 0x10	; 16
    28c2:	c1 01       	movw	r24, r2
    28c4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    28c8:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    28cc:	c7 cf       	rjmp	.-114    	; 0x285c <menu+0xcf8>
							
						} // if(enter)
					} // if (menu_input == 3)
					else
						menu_display_l[8] = ' ';
    28ce:	f1 01       	movw	r30, r2
    28d0:	b0 86       	std	Z+8, r11	; 0x08
					
					// CH5
					if (menu_input == 4)
    28d2:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    28d6:	94 30       	cpi	r25, 0x04	; 4
    28d8:	09 f0       	breq	.+2      	; 0x28dc <menu+0xd78>
    28da:	47 c0       	rjmp	.+142    	; 0x296a <menu+0xe06>
					{
						// Cursor move
						menu_display_h[8] = ' ';
    28dc:	f8 01       	movw	r30, r16
    28de:	b0 86       	std	Z+8, r11	; 0x08
						menu_display_l[0] = '>';
    28e0:	9e e3       	ldi	r25, 0x3E	; 62
    28e2:	f1 01       	movw	r30, r2
    28e4:	90 83       	st	Z, r25
						menu_display_l[8] = ' ';
						
						if (enter)
    28e6:	88 23       	and	r24, r24
    28e8:	09 f4       	brne	.+2      	; 0x28ec <menu+0xd88>
    28ea:	52 c0       	rjmp	.+164    	; 0x2990 <menu+0xe2c>
						{
							menu_input = 0;
    28ec:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								{
									trim[CH5] -= menu_input;
									
									// Trim limit
									if (trim[CH5] > TRIM_LIM)
										trim[CH5] = TRIM_LIM;
    28f0:	0f 2e       	mov	r0, r31
    28f2:	f9 e0       	ldi	r31, 0x09	; 9
    28f4:	7f 2e       	mov	r7, r31
    28f6:	f0 2d       	mov	r31, r0
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    28f8:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								
								// if menu button is pressed
								if (menu_input)
    28fc:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2900:	99 23       	and	r25, r25
    2902:	91 f0       	breq	.+36     	; 0x2928 <menu+0xdc4>
								{
									trim[CH5] -= menu_input;
    2904:	20 91 bb 05 	lds	r18, 0x05BB	; 0x8005bb <trim+0x4>
    2908:	29 1b       	sub	r18, r25
									
									// Trim limit
									if (trim[CH5] > TRIM_LIM)
    290a:	2a 30       	cpi	r18, 0x0A	; 10
    290c:	1c f0       	brlt	.+6      	; 0x2914 <menu+0xdb0>
										trim[CH5] = TRIM_LIM;
    290e:	70 92 bb 05 	sts	0x05BB, r7	; 0x8005bb <trim+0x4>
    2912:	08 c0       	rjmp	.+16     	; 0x2924 <menu+0xdc0>
									else if (trim[CH5] < -TRIM_LIM)
    2914:	27 3f       	cpi	r18, 0xF7	; 247
    2916:	1c f0       	brlt	.+6      	; 0x291e <menu+0xdba>
								enter = menu_read();
								
								// if menu button is pressed
								if (menu_input)
								{
									trim[CH5] -= menu_input;
    2918:	20 93 bb 05 	sts	0x05BB, r18	; 0x8005bb <trim+0x4>
    291c:	03 c0       	rjmp	.+6      	; 0x2924 <menu+0xdc0>
									
									// Trim limit
									if (trim[CH5] > TRIM_LIM)
										trim[CH5] = TRIM_LIM;
									else if (trim[CH5] < -TRIM_LIM)
										trim[CH5] = -TRIM_LIM;
    291e:	f7 ef       	ldi	r31, 0xF7	; 247
    2920:	f0 93 bb 05 	sts	0x05BB, r31	; 0x8005bb <trim+0x4>
									
									menu_input = 0;
    2924:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								
								// Exit
								if (enter)
    2928:	88 23       	and	r24, r24
    292a:	21 f0       	breq	.+8      	; 0x2934 <menu+0xdd0>
								{
									menu_input = 4;
    292c:	84 e0       	ldi	r24, 0x04	; 4
    292e:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    2932:	2e c0       	rjmp	.+92     	; 0x2990 <menu+0xe2c>
								}
								// Display
								if (trim[CH5] < 0)
    2934:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <trim+0x4>
    2938:	88 23       	and	r24, r24
    293a:	44 f4       	brge	.+16     	; 0x294c <menu+0xde8>
								{
									menu_display_l[5] = '-';
    293c:	f1 01       	movw	r30, r2
    293e:	a5 82       	std	Z+5, r10	; 0x05
									menu_display_l[6] = 48 - trim[CH5];
    2940:	f4 2d       	mov	r31, r4
    2942:	f8 1b       	sub	r31, r24
    2944:	8f 2f       	mov	r24, r31
    2946:	f1 01       	movw	r30, r2
    2948:	86 83       	std	Z+6, r24	; 0x06
    294a:	04 c0       	rjmp	.+8      	; 0x2954 <menu+0xdf0>
								}
								else
								{
									menu_display_l[5] = ' ';
    294c:	f1 01       	movw	r30, r2
    294e:	b5 82       	std	Z+5, r11	; 0x05
									menu_display_l[6] = trim[CH5] + 48;
    2950:	80 5d       	subi	r24, 0xD0	; 208
    2952:	86 83       	std	Z+6, r24	; 0x06
								}
								
								// LCD drive
								LCD_home();
    2954:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    2958:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    295c:	60 e1       	ldi	r22, 0x10	; 16
    295e:	c1 01       	movw	r24, r2
    2960:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    2964:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    2968:	c7 cf       	rjmp	.-114    	; 0x28f8 <menu+0xd94>
							
						} //if (enter)
					} //if (menu_input == 4)
					
					// Exit
					if (menu_input == 5)
    296a:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    296e:	95 30       	cpi	r25, 0x05	; 5
    2970:	79 f4       	brne	.+30     	; 0x2990 <menu+0xe2c>
					{
						// Cursor move
						menu_display_l[0] = ' ';
    2972:	f1 01       	movw	r30, r2
    2974:	b0 82       	st	Z, r11
						menu_display_l[8] = '>';
    2976:	9e e3       	ldi	r25, 0x3E	; 62
    2978:	90 87       	std	Z+8, r25	; 0x08
						
						if (enter)
    297a:	88 23       	and	r24, r24
    297c:	49 f0       	breq	.+18     	; 0x2990 <menu+0xe2c>
    297e:	76 2c       	mov	r7, r6
    2980:	69 2c       	mov	r6, r9
    2982:	89 80       	ldd	r8, Y+1	; 0x01
    2984:	9a 80       	ldd	r9, Y+2	; 0x02
						{
							menu_input = menu_input_temp;
    2986:	84 e0       	ldi	r24, 0x04	; 4
    2988:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
							break;
    298c:	0c 94 80 20 	jmp	0x4100	; 0x4100 <menu+0x259c>
						}
					}
					
					
					// LCD drive
					LCD_home();
    2990:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					LCD_string(menu_display_h, 16);
    2994:	60 e1       	ldi	r22, 0x10	; 16
    2996:	c8 01       	movw	r24, r16
    2998:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    299c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    29a0:	60 e1       	ldi	r22, 0x10	; 16
    29a2:	c1 01       	movw	r24, r2
    29a4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					
					
					// Buzzer drive
					buzzer_switch();
    29a8:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
				} // while
    29ac:	db cd       	rjmp	.-1098   	; 0x2564 <menu+0xa00>
			} // if (enter)
		} // else if (menu_input == 4)
		
		
		////////// Servo delay ///////////////////////////////////////////////////
		else if (menu_input == 5)
    29ae:	95 30       	cpi	r25, 0x05	; 5
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <menu+0xe50>
    29b2:	92 c0       	rjmp	.+292    	; 0x2ad8 <menu+0xf74>
		{
			// Display
			menu_display_h = " Trim           ";
			menu_display_l = ">Servo Delay    ";
			
			if (enter)
    29b4:	88 23       	and	r24, r24
    29b6:	11 f4       	brne	.+4      	; 0x29bc <menu+0xe58>
    29b8:	0c 94 39 20 	jmp	0x4072	; 0x4072 <menu+0x250e>
			{
				menu_input_temp = menu_input;
				menu_input = 0;
    29bc:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
				LCD_CLEAR();
    29c0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
				{
					enter = menu_read();
					if (menu_input < 0)
						menu_input = 0;
					else if (menu_input > 2)
						menu_input = 2;
    29c4:	68 94       	set
    29c6:	cc 24       	eor	r12, r12
    29c8:	c1 f8       	bld	r12, 1
					
					// CH5
					if (mixing_val_3 & SERVO_DEL_1)
						menu_display_h[6] = 'D';
					else
						menu_display_h[6] = ' ';
    29ca:	68 94       	set
    29cc:	ff 24       	eor	r15, r15
    29ce:	f5 f8       	bld	r15, 5
						menu_input = 2;
					
					
					// CH5
					if (mixing_val_3 & SERVO_DEL_1)
						menu_display_h[6] = 'D';
    29d0:	0f 2e       	mov	r0, r31
    29d2:	f4 e4       	ldi	r31, 0x44	; 68
    29d4:	df 2e       	mov	r13, r31
    29d6:	f0 2d       	mov	r31, r0
							menu_input = menu_input_temp;
							break;
						}
					}
					else
						menu_display_l[0] = ' ';
    29d8:	06 e6       	ldi	r16, 0x66	; 102
    29da:	12 e0       	ldi	r17, 0x02	; 2
					// Exit
					if (menu_input == 2)
					{
						// Cursor move
						menu_display_h[8] = ' ';
						menu_display_l[0] = '>';
    29dc:	0f 2e       	mov	r0, r31
    29de:	fe e3       	ldi	r31, 0x3E	; 62
    29e0:	ef 2e       	mov	r14, r31
    29e2:	f0 2d       	mov	r31, r0
				menu_display_h = " CH5     CH6    ";
				menu_display_l = " Exit           ";
				
				while (1)
				{
					enter = menu_read();
    29e4:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)
    29e8:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    29ec:	99 23       	and	r25, r25
    29ee:	1c f4       	brge	.+6      	; 0x29f6 <menu+0xe92>
						menu_input = 0;
    29f0:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    29f4:	04 c0       	rjmp	.+8      	; 0x29fe <menu+0xe9a>
					else if (menu_input > 2)
    29f6:	93 30       	cpi	r25, 0x03	; 3
    29f8:	14 f0       	brlt	.+4      	; 0x29fe <menu+0xe9a>
						menu_input = 2;
    29fa:	c0 92 ce 05 	sts	0x05CE, r12	; 0x8005ce <menu_input>
					
					
					// CH5
					if (mixing_val_3 & SERVO_DEL_1)
    29fe:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <mixing_val_3>
    2a02:	94 ff       	sbrs	r25, 4
    2a04:	03 c0       	rjmp	.+6      	; 0x2a0c <menu+0xea8>
						menu_display_h[6] = 'D';
    2a06:	d0 92 26 03 	sts	0x0326, r13	; 0x800326 <battery_alarm+0x1e2>
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <menu+0xeac>
					else
						menu_display_h[6] = ' ';
    2a0c:	f0 92 26 03 	sts	0x0326, r15	; 0x800326 <battery_alarm+0x1e2>
					// test
					if (mixing_val_3 & SERVO_DEL_2)
    2a10:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <mixing_val_3>
    2a14:	95 ff       	sbrs	r25, 5
    2a16:	03 c0       	rjmp	.+6      	; 0x2a1e <menu+0xeba>
						menu_display_h[14] = 'D';
    2a18:	d0 92 2e 03 	sts	0x032E, r13	; 0x80032e <battery_alarm+0x1ea>
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <menu+0xebe>
					else
						menu_display_h[14] = ' ';
    2a1e:	f0 92 2e 03 	sts	0x032E, r15	; 0x80032e <battery_alarm+0x1ea>
					
					
					// Cursor move & val set //////////
					// CH5
					if (menu_input == 0)
    2a22:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2a26:	91 11       	cpse	r25, r1
    2a28:	15 c0       	rjmp	.+42     	; 0x2a54 <menu+0xef0>
					{
						// Cursor move
						menu_display_h[0] = '>';
    2a2a:	e0 e2       	ldi	r30, 0x20	; 32
    2a2c:	f3 e0       	ldi	r31, 0x03	; 3
    2a2e:	e0 82       	st	Z, r14
						
						if (enter)
    2a30:	88 23       	and	r24, r24
    2a32:	f1 f1       	breq	.+124    	; 0x2ab0 <menu+0xf4c>
						{
							if (mixing_val_3 & SERVO_DEL_1)
    2a34:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    2a38:	84 ff       	sbrs	r24, 4
    2a3a:	06 c0       	rjmp	.+12     	; 0x2a48 <menu+0xee4>
								mixing_val_3 &= ~SERVO_DEL_1;
    2a3c:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    2a40:	8f 7e       	andi	r24, 0xEF	; 239
    2a42:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <mixing_val_3>
    2a46:	34 c0       	rjmp	.+104    	; 0x2ab0 <menu+0xf4c>
							else
								mixing_val_3 |= SERVO_DEL_1;
    2a48:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    2a4c:	80 61       	ori	r24, 0x10	; 16
    2a4e:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <mixing_val_3>
    2a52:	2e c0       	rjmp	.+92     	; 0x2ab0 <menu+0xf4c>
						}
					}
					else
						menu_display_h[0] = ' ';
    2a54:	e0 e2       	ldi	r30, 0x20	; 32
    2a56:	f3 e0       	ldi	r31, 0x03	; 3
    2a58:	f0 82       	st	Z, r15
					
					
					// Ch6
					if (menu_input == 1)
    2a5a:	91 30       	cpi	r25, 0x01	; 1
    2a5c:	a1 f4       	brne	.+40     	; 0x2a86 <menu+0xf22>
					{
						// Cursor move
						menu_display_h[8] = '>';
    2a5e:	e0 92 28 03 	sts	0x0328, r14	; 0x800328 <battery_alarm+0x1e4>
						
						if (enter)
    2a62:	88 23       	and	r24, r24
    2a64:	39 f1       	breq	.+78     	; 0x2ab4 <menu+0xf50>
						{
							if (mixing_val_3 & SERVO_DEL_2)
    2a66:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    2a6a:	85 ff       	sbrs	r24, 5
    2a6c:	06 c0       	rjmp	.+12     	; 0x2a7a <menu+0xf16>
								mixing_val_3 &= ~SERVO_DEL_2;
    2a6e:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    2a72:	8f 7d       	andi	r24, 0xDF	; 223
    2a74:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <mixing_val_3>
    2a78:	1d c0       	rjmp	.+58     	; 0x2ab4 <menu+0xf50>
							else
								mixing_val_3 |= SERVO_DEL_2;
    2a7a:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    2a7e:	80 62       	ori	r24, 0x20	; 32
    2a80:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <mixing_val_3>
    2a84:	17 c0       	rjmp	.+46     	; 0x2ab4 <menu+0xf50>
					else
						menu_display_h[8] = ' ';
					
					
					// Exit
					if (menu_input == 2)
    2a86:	92 30       	cpi	r25, 0x02	; 2
    2a88:	99 f4       	brne	.+38     	; 0x2ab0 <menu+0xf4c>
					{
						// Cursor move
						menu_display_h[8] = ' ';
    2a8a:	f0 92 28 03 	sts	0x0328, r15	; 0x800328 <battery_alarm+0x1e4>
						menu_display_l[0] = '>';
    2a8e:	f8 01       	movw	r30, r16
    2a90:	e0 82       	st	Z, r14
						
						if (enter)
    2a92:	88 23       	and	r24, r24
    2a94:	89 f0       	breq	.+34     	; 0x2ab8 <menu+0xf54>
						{
							menu_input = menu_input_temp;
    2a96:	85 e0       	ldi	r24, 0x05	; 5
    2a98:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
				menu_input_temp = menu_input;
				menu_input = 0;
				LCD_CLEAR();
				// Display init
				menu_display_h = " CH5     CH6    ";
				menu_display_l = " Exit           ";
    2a9c:	0f 2e       	mov	r0, r31
    2a9e:	f6 e6       	ldi	r31, 0x66	; 102
    2aa0:	2f 2e       	mov	r2, r31
    2aa2:	f2 e0       	ldi	r31, 0x02	; 2
    2aa4:	3f 2e       	mov	r3, r31
    2aa6:	f0 2d       	mov	r31, r0
			{
				menu_input_temp = menu_input;
				menu_input = 0;
				LCD_CLEAR();
				// Display init
				menu_display_h = " CH5     CH6    ";
    2aa8:	00 e2       	ldi	r16, 0x20	; 32
    2aaa:	13 e0       	ldi	r17, 0x03	; 3
						menu_display_l[0] = '>';
						
						if (enter)
						{
							menu_input = menu_input_temp;
							break;
    2aac:	0c 94 80 20 	jmp	0x4100	; 0x4100 <menu+0x259c>
							else
								mixing_val_3 |= SERVO_DEL_2;
						}
					}
					else
						menu_display_h[8] = ' ';
    2ab0:	f0 92 28 03 	sts	0x0328, r15	; 0x800328 <battery_alarm+0x1e4>
							menu_input = menu_input_temp;
							break;
						}
					}
					else
						menu_display_l[0] = ' ';
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	f0 82       	st	Z, r15
					
					
					// LCD drive
					LCD_string(menu_display_h, 16);
    2ab8:	60 e1       	ldi	r22, 0x10	; 16
    2aba:	80 e2       	ldi	r24, 0x20	; 32
    2abc:	93 e0       	ldi	r25, 0x03	; 3
    2abe:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    2ac2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    2ac6:	60 e1       	ldi	r22, 0x10	; 16
    2ac8:	c8 01       	movw	r24, r16
    2aca:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_home();
    2ace:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					
					// Buzzer drive
					buzzer_switch();
    2ad2:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
				} // while (1)
    2ad6:	86 cf       	rjmp	.-244    	; 0x29e4 <menu+0xe80>
			}// if (enter)
		} // else if (menu_input == 5)
		
		
		////////// On board airplane battery charger control /////////////////////
		else if (menu_input == 6)
    2ad8:	96 30       	cpi	r25, 0x06	; 6
    2ada:	09 f0       	breq	.+2      	; 0x2ade <menu+0xf7a>
    2adc:	3f c1       	rjmp	.+638    	; 0x2d5c <menu+0x11f8>
		{
			// Display
			menu_display_h = " Servo Delay    ";
			menu_display_l = ">Bat Charger    ";
			
			if (enter)
    2ade:	88 23       	and	r24, r24
    2ae0:	11 f4       	brne	.+4      	; 0x2ae6 <menu+0xf82>
    2ae2:	0c 94 42 20 	jmp	0x4084	; 0x4084 <menu+0x2520>
			{
				menu_input_temp = menu_input;
				menu_input = 0;
    2ae6:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
				
				// Display init
				menu_display_h = "Battery Charger ";
				menu_display_l = " 30 mah     Exit";
				
				LCD_CLEAR();
    2aea:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
				LCD_string(menu_display_h, 16);
    2aee:	60 e1       	ldi	r22, 0x10	; 16
    2af0:	82 e4       	ldi	r24, 0x42	; 66
    2af2:	93 e0       	ldi	r25, 0x03	; 3
    2af4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
				{
					enter = menu_read();
					if (menu_input < 0)
						menu_input = 0;
					else if (menu_input > 2)
						menu_input = 2;
    2af8:	68 94       	set
    2afa:	22 24       	eor	r2, r2
    2afc:	21 f8       	bld	r2, 1
							menu_display_l[2] = '5';
							menu_display_l[3] = ' ';
							break;
						
						case CHG_120MAH:
							menu_display_l[1] = '1';
    2afe:	0f 2e       	mov	r0, r31
    2b00:	f1 e3       	ldi	r31, 0x31	; 49
    2b02:	bf 2e       	mov	r11, r31
    2b04:	f0 2d       	mov	r31, r0
							menu_display_l[2] = '2';
    2b06:	0f 2e       	mov	r0, r31
    2b08:	f2 e3       	ldi	r31, 0x32	; 50
    2b0a:	3f 2e       	mov	r3, r31
    2b0c:	f0 2d       	mov	r31, r0
							menu_display_l[3] = '0';
    2b0e:	10 e3       	ldi	r17, 0x30	; 48
							break;
						
						case CHG_150MAH:
							menu_display_l[1] = '1';
							menu_display_l[2] = '5';
    2b10:	0f 2e       	mov	r0, r31
    2b12:	f5 e3       	ldi	r31, 0x35	; 53
    2b14:	cf 2e       	mov	r12, r31
    2b16:	f0 2d       	mov	r31, r0
							menu_display_l[3] = '0';
							break;
						
						case CHG_300MAH:
							menu_display_l[1] = '3';
    2b18:	0f 2e       	mov	r0, r31
    2b1a:	f3 e3       	ldi	r31, 0x33	; 51
    2b1c:	df 2e       	mov	r13, r31
    2b1e:	f0 2d       	mov	r31, r0
									
									case 4:
										batCharger &= ~BATCHARG_CAP_MASK;
										batCharger |= CHG_300MAH;
										
										menu_display_l[1] = '3';
    2b20:	21 e3       	ldi	r18, 0x31	; 49
    2b22:	33 e0       	ldi	r19, 0x03	; 3
    2b24:	f2 2e       	mov	r15, r18
    2b26:	03 2f       	mov	r16, r19
				LCD_CLEAR();
				LCD_string(menu_display_h, 16);
				
				while (1)
				{
					enter = menu_read();
    2b28:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)
    2b2c:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2b30:	99 23       	and	r25, r25
    2b32:	1c f4       	brge	.+6      	; 0x2b3a <menu+0xfd6>
						menu_input = 0;
    2b34:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    2b38:	04 c0       	rjmp	.+8      	; 0x2b42 <menu+0xfde>
					else if (menu_input > 2)
    2b3a:	93 30       	cpi	r25, 0x03	; 3
    2b3c:	14 f0       	brlt	.+4      	; 0x2b42 <menu+0xfde>
						menu_input = 2;
    2b3e:	20 92 ce 05 	sts	0x05CE, r2	; 0x8005ce <menu_input>
					
					// Display & stat /////////////////
					if (batCharger & ON)
    2b42:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <batCharger>
    2b46:	90 ff       	sbrs	r25, 0
    2b48:	0a c0       	rjmp	.+20     	; 0x2b5e <menu+0xffa>
					{
						menu_display_l[8]  = 'O';
    2b4a:	9f e4       	ldi	r25, 0x4F	; 79
    2b4c:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <battery_alarm+0x1f5>
						menu_display_l[9]  = 'n';
    2b50:	9e e6       	ldi	r25, 0x6E	; 110
    2b52:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <battery_alarm+0x1f6>
						menu_display_l[10] = ' ';
    2b56:	90 e2       	ldi	r25, 0x20	; 32
    2b58:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <battery_alarm+0x1f7>
    2b5c:	08 c0       	rjmp	.+16     	; 0x2b6e <menu+0x100a>
					}
					else
					{
						menu_display_l[8]  = 'O';
    2b5e:	9f e4       	ldi	r25, 0x4F	; 79
    2b60:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <battery_alarm+0x1f5>
						menu_display_l[9]  = 'f';
    2b64:	96 e6       	ldi	r25, 0x66	; 102
    2b66:	90 93 3a 03 	sts	0x033A, r25	; 0x80033a <battery_alarm+0x1f6>
						menu_display_l[10] = 'f';
    2b6a:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <battery_alarm+0x1f7>
					}
					
					switch (batCharger&BATCHARG_CAP_MASK)
    2b6e:	20 91 a8 05 	lds	r18, 0x05A8	; 0x8005a8 <batCharger>
    2b72:	92 2f       	mov	r25, r18
    2b74:	9c 71       	andi	r25, 0x1C	; 28
    2b76:	9c 30       	cpi	r25, 0x0C	; 12
    2b78:	e1 f0       	breq	.+56     	; 0x2bb2 <menu+0x104e>
    2b7a:	28 f4       	brcc	.+10     	; 0x2b86 <menu+0x1022>
    2b7c:	94 30       	cpi	r25, 0x04	; 4
    2b7e:	41 f0       	breq	.+16     	; 0x2b90 <menu+0x102c>
    2b80:	98 30       	cpi	r25, 0x08	; 8
    2b82:	71 f0       	breq	.+28     	; 0x2ba0 <menu+0x103c>
    2b84:	2a c0       	rjmp	.+84     	; 0x2bda <menu+0x1076>
    2b86:	90 31       	cpi	r25, 0x10	; 16
    2b88:	d9 f0       	breq	.+54     	; 0x2bc0 <menu+0x105c>
    2b8a:	94 31       	cpi	r25, 0x14	; 20
    2b8c:	01 f1       	breq	.+64     	; 0x2bce <menu+0x106a>
    2b8e:	25 c0       	rjmp	.+74     	; 0x2bda <menu+0x1076>
					{
						case CHG_30MAH:
							menu_display_l[1] = '3';
    2b90:	d0 92 32 03 	sts	0x0332, r13	; 0x800332 <battery_alarm+0x1ee>
							menu_display_l[2] = '0';
    2b94:	10 93 33 03 	sts	0x0333, r17	; 0x800333 <battery_alarm+0x1ef>
							menu_display_l[3] = ' ';
    2b98:	90 e2       	ldi	r25, 0x20	; 32
    2b9a:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <battery_alarm+0x1f0>
							break;
    2b9e:	1d c0       	rjmp	.+58     	; 0x2bda <menu+0x1076>
						
						case CHG_85MAH:
							menu_display_l[1] = '8';
    2ba0:	98 e3       	ldi	r25, 0x38	; 56
    2ba2:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <battery_alarm+0x1ee>
							menu_display_l[2] = '5';
    2ba6:	c0 92 33 03 	sts	0x0333, r12	; 0x800333 <battery_alarm+0x1ef>
							menu_display_l[3] = ' ';
    2baa:	90 e2       	ldi	r25, 0x20	; 32
    2bac:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <battery_alarm+0x1f0>
							break;
    2bb0:	14 c0       	rjmp	.+40     	; 0x2bda <menu+0x1076>
						
						case CHG_120MAH:
							menu_display_l[1] = '1';
    2bb2:	b0 92 32 03 	sts	0x0332, r11	; 0x800332 <battery_alarm+0x1ee>
							menu_display_l[2] = '2';
    2bb6:	30 92 33 03 	sts	0x0333, r3	; 0x800333 <battery_alarm+0x1ef>
							menu_display_l[3] = '0';
    2bba:	10 93 34 03 	sts	0x0334, r17	; 0x800334 <battery_alarm+0x1f0>
							break;
    2bbe:	0d c0       	rjmp	.+26     	; 0x2bda <menu+0x1076>
						
						case CHG_150MAH:
							menu_display_l[1] = '1';
    2bc0:	b0 92 32 03 	sts	0x0332, r11	; 0x800332 <battery_alarm+0x1ee>
							menu_display_l[2] = '5';
    2bc4:	c0 92 33 03 	sts	0x0333, r12	; 0x800333 <battery_alarm+0x1ef>
							menu_display_l[3] = '0';
    2bc8:	10 93 34 03 	sts	0x0334, r17	; 0x800334 <battery_alarm+0x1f0>
							break;
    2bcc:	06 c0       	rjmp	.+12     	; 0x2bda <menu+0x1076>
						
						case CHG_300MAH:
							menu_display_l[1] = '3';
    2bce:	d0 92 32 03 	sts	0x0332, r13	; 0x800332 <battery_alarm+0x1ee>
							menu_display_l[2] = '0';
    2bd2:	10 93 33 03 	sts	0x0333, r17	; 0x800333 <battery_alarm+0x1ef>
							menu_display_l[3] = '0';
    2bd6:	10 93 34 03 	sts	0x0334, r17	; 0x800334 <battery_alarm+0x1f0>
						
					}
					
					
					// Setting
					if (menu_input == 0)
    2bda:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2bde:	91 11       	cpse	r25, r1
    2be0:	83 c0       	rjmp	.+262    	; 0x2ce8 <menu+0x1184>
					{
						menu_display_l[0]  = '>';
    2be2:	9e e3       	ldi	r25, 0x3E	; 62
    2be4:	e1 e3       	ldi	r30, 0x31	; 49
    2be6:	f3 e0       	ldi	r31, 0x03	; 3
    2be8:	90 83       	st	Z, r25
						menu_display_l[7]  = ' ';
    2bea:	90 e2       	ldi	r25, 0x20	; 32
    2bec:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <battery_alarm+0x1f4>
						menu_display_l[11] = ' ';
    2bf0:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <battery_alarm+0x1f8>
						
						if (enter)
    2bf4:	88 23       	and	r24, r24
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <menu+0x1096>
    2bf8:	a5 c0       	rjmp	.+330    	; 0x2d44 <menu+0x11e0>
									
									case 1:
										batCharger &= ~BATCHARG_CAP_MASK;
										batCharger |= CHG_85MAH;
										
										menu_display_l[1] = '8';
    2bfa:	0f 2e       	mov	r0, r31
    2bfc:	f8 e3       	ldi	r31, 0x38	; 56
    2bfe:	4f 2e       	mov	r4, r31
    2c00:	f0 2d       	mov	r31, r0
										menu_display_l[2] = '5';
										menu_display_l[3] = ' ';
    2c02:	68 94       	set
    2c04:	aa 24       	eor	r10, r10
    2c06:	a5 f8       	bld	r10, 5
							{
								enter = menu_read();
								if (menu_input < 0)
									menu_input = 0;
								else if (menu_input > 4)
									menu_input = 4;
    2c08:	68 94       	set
    2c0a:	ee 24       	eor	r14, r14
    2c0c:	e2 f8       	bld	r14, 2
						
						if (enter)
						{
							while(1)
							{
								enter = menu_read();
    2c0e:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    2c12:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2c16:	99 23       	and	r25, r25
    2c18:	1c f4       	brge	.+6      	; 0x2c20 <menu+0x10bc>
									menu_input = 0;
    2c1a:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    2c1e:	13 c0       	rjmp	.+38     	; 0x2c46 <menu+0x10e2>
								else if (menu_input > 4)
    2c20:	95 30       	cpi	r25, 0x05	; 5
    2c22:	1c f0       	brlt	.+6      	; 0x2c2a <menu+0x10c6>
									menu_input = 4;
    2c24:	e0 92 ce 05 	sts	0x05CE, r14	; 0x8005ce <menu_input>
    2c28:	42 c0       	rjmp	.+132    	; 0x2cae <menu+0x114a>
								
								switch (menu_input)
    2c2a:	92 30       	cpi	r25, 0x02	; 2
    2c2c:	31 f1       	breq	.+76     	; 0x2c7a <menu+0x1116>
    2c2e:	2c f4       	brge	.+10     	; 0x2c3a <menu+0x10d6>
    2c30:	99 23       	and	r25, r25
    2c32:	49 f0       	breq	.+18     	; 0x2c46 <menu+0x10e2>
    2c34:	91 30       	cpi	r25, 0x01	; 1
    2c36:	a1 f0       	breq	.+40     	; 0x2c60 <menu+0x10fc>
    2c38:	46 c0       	rjmp	.+140    	; 0x2cc6 <menu+0x1162>
    2c3a:	93 30       	cpi	r25, 0x03	; 3
    2c3c:	59 f1       	breq	.+86     	; 0x2c94 <menu+0x1130>
    2c3e:	94 30       	cpi	r25, 0x04	; 4
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <menu+0x10e0>
    2c42:	41 c0       	rjmp	.+130    	; 0x2cc6 <menu+0x1162>
    2c44:	34 c0       	rjmp	.+104    	; 0x2cae <menu+0x114a>
								{
									case 0:
										batCharger &= ~BATCHARG_CAP_MASK;
										batCharger |= CHG_30MAH;
    2c46:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <batCharger>
    2c4a:	93 7e       	andi	r25, 0xE3	; 227
    2c4c:	94 60       	ori	r25, 0x04	; 4
    2c4e:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <batCharger>
									
										menu_display_l[1] = '3';
    2c52:	d0 92 32 03 	sts	0x0332, r13	; 0x800332 <battery_alarm+0x1ee>
										menu_display_l[2] = '0';
    2c56:	10 93 33 03 	sts	0x0333, r17	; 0x800333 <battery_alarm+0x1ef>
										menu_display_l[3] = ' ';
    2c5a:	a0 92 34 03 	sts	0x0334, r10	; 0x800334 <battery_alarm+0x1f0>
										break;
    2c5e:	33 c0       	rjmp	.+102    	; 0x2cc6 <menu+0x1162>
									
									case 1:
										batCharger &= ~BATCHARG_CAP_MASK;
										batCharger |= CHG_85MAH;
    2c60:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <batCharger>
    2c64:	93 7e       	andi	r25, 0xE3	; 227
    2c66:	98 60       	ori	r25, 0x08	; 8
    2c68:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <batCharger>
										
										menu_display_l[1] = '8';
    2c6c:	40 92 32 03 	sts	0x0332, r4	; 0x800332 <battery_alarm+0x1ee>
										menu_display_l[2] = '5';
    2c70:	c0 92 33 03 	sts	0x0333, r12	; 0x800333 <battery_alarm+0x1ef>
										menu_display_l[3] = ' ';
    2c74:	a0 92 34 03 	sts	0x0334, r10	; 0x800334 <battery_alarm+0x1f0>
										break;
    2c78:	26 c0       	rjmp	.+76     	; 0x2cc6 <menu+0x1162>
									
									case 2:
										batCharger &= ~BATCHARG_CAP_MASK;
										batCharger |= CHG_120MAH;
    2c7a:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <batCharger>
    2c7e:	93 7e       	andi	r25, 0xE3	; 227
    2c80:	9c 60       	ori	r25, 0x0C	; 12
    2c82:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <batCharger>
										
										menu_display_l[1] = '1';
    2c86:	b0 92 32 03 	sts	0x0332, r11	; 0x800332 <battery_alarm+0x1ee>
										menu_display_l[2] = '2';
    2c8a:	30 92 33 03 	sts	0x0333, r3	; 0x800333 <battery_alarm+0x1ef>
										menu_display_l[3] = '0';
    2c8e:	10 93 34 03 	sts	0x0334, r17	; 0x800334 <battery_alarm+0x1f0>
										break;
    2c92:	19 c0       	rjmp	.+50     	; 0x2cc6 <menu+0x1162>
									
									case 3:
										batCharger &= ~BATCHARG_CAP_MASK;
										batCharger |= CHG_150MAH;
    2c94:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <batCharger>
    2c98:	93 7e       	andi	r25, 0xE3	; 227
    2c9a:	90 61       	ori	r25, 0x10	; 16
    2c9c:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <batCharger>
										
										menu_display_l[1] = '1';
    2ca0:	b0 92 32 03 	sts	0x0332, r11	; 0x800332 <battery_alarm+0x1ee>
										menu_display_l[2] = '5';
    2ca4:	c0 92 33 03 	sts	0x0333, r12	; 0x800333 <battery_alarm+0x1ef>
										menu_display_l[3] = '0';
    2ca8:	10 93 34 03 	sts	0x0334, r17	; 0x800334 <battery_alarm+0x1f0>
									break;
    2cac:	0c c0       	rjmp	.+24     	; 0x2cc6 <menu+0x1162>
									
									case 4:
										batCharger &= ~BATCHARG_CAP_MASK;
										batCharger |= CHG_300MAH;
    2cae:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <batCharger>
    2cb2:	93 7e       	andi	r25, 0xE3	; 227
    2cb4:	94 61       	ori	r25, 0x14	; 20
    2cb6:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <batCharger>
										
										menu_display_l[1] = '3';
    2cba:	d0 92 32 03 	sts	0x0332, r13	; 0x800332 <battery_alarm+0x1ee>
										menu_display_l[2] = '0';
    2cbe:	10 93 33 03 	sts	0x0333, r17	; 0x800333 <battery_alarm+0x1ef>
										menu_display_l[3] = '0';
    2cc2:	10 93 34 03 	sts	0x0334, r17	; 0x800334 <battery_alarm+0x1f0>
										break;
									
								}
								
								if (enter)
    2cc6:	88 23       	and	r24, r24
    2cc8:	19 f0       	breq	.+6      	; 0x2cd0 <menu+0x116c>
								{
									menu_input = 0;
    2cca:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
									break;
    2cce:	3a c0       	rjmp	.+116    	; 0x2d44 <menu+0x11e0>
								} //if (enter)
								
								// LCD drive
								LCD_home();
    2cd0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    2cd4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    2cd8:	60 e1       	ldi	r22, 0x10	; 16
    2cda:	8f 2d       	mov	r24, r15
    2cdc:	90 2f       	mov	r25, r16
    2cde:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    2ce2:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
								
							} //while(1)
    2ce6:	93 cf       	rjmp	.-218    	; 0x2c0e <menu+0x10aa>
							
						}  // if (enter)
						
					} //if (menu_input == 0)
					else if (menu_input == 1)
    2ce8:	91 30       	cpi	r25, 0x01	; 1
    2cea:	a9 f4       	brne	.+42     	; 0x2d16 <menu+0x11b2>
					{
						menu_display_l[0]  = ' ';
    2cec:	90 e2       	ldi	r25, 0x20	; 32
    2cee:	e1 e3       	ldi	r30, 0x31	; 49
    2cf0:	f3 e0       	ldi	r31, 0x03	; 3
    2cf2:	90 83       	st	Z, r25
						menu_display_l[7]  = '>';
    2cf4:	3e e3       	ldi	r19, 0x3E	; 62
    2cf6:	30 93 38 03 	sts	0x0338, r19	; 0x800338 <battery_alarm+0x1f4>
						menu_display_l[11] = ' ';
    2cfa:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <battery_alarm+0x1f8>
						
						if (enter)
    2cfe:	88 23       	and	r24, r24
    2d00:	09 f1       	breq	.+66     	; 0x2d44 <menu+0x11e0>
						{
							if (batCharger & ON)
    2d02:	20 ff       	sbrs	r18, 0
    2d04:	04 c0       	rjmp	.+8      	; 0x2d0e <menu+0x11aa>
								batCharger &= ~ON;
    2d06:	2e 7f       	andi	r18, 0xFE	; 254
    2d08:	20 93 a8 05 	sts	0x05A8, r18	; 0x8005a8 <batCharger>
    2d0c:	1b c0       	rjmp	.+54     	; 0x2d44 <menu+0x11e0>
							else
								batCharger |= ON;
    2d0e:	21 60       	ori	r18, 0x01	; 1
    2d10:	20 93 a8 05 	sts	0x05A8, r18	; 0x8005a8 <batCharger>
    2d14:	17 c0       	rjmp	.+46     	; 0x2d44 <menu+0x11e0>
						}
						
					}
					else if (menu_input == 2)
    2d16:	92 30       	cpi	r25, 0x02	; 2
    2d18:	a9 f4       	brne	.+42     	; 0x2d44 <menu+0x11e0>
					{
						// Cursor move
						menu_display_l[7]  = ' ';
    2d1a:	90 e2       	ldi	r25, 0x20	; 32
    2d1c:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <battery_alarm+0x1f4>
						menu_display_l[11] = '>';
    2d20:	9e e3       	ldi	r25, 0x3E	; 62
    2d22:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <battery_alarm+0x1f8>
						
						if (enter)
    2d26:	88 23       	and	r24, r24
    2d28:	69 f0       	breq	.+26     	; 0x2d44 <menu+0x11e0>
						{
							menu_input = menu_input_temp;
    2d2a:	86 e0       	ldi	r24, 0x06	; 6
    2d2c:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
				menu_input_temp = menu_input;
				menu_input = 0;
				
				// Display init
				menu_display_h = "Battery Charger ";
				menu_display_l = " 30 mah     Exit";
    2d30:	0f 2e       	mov	r0, r31
    2d32:	f1 e3       	ldi	r31, 0x31	; 49
    2d34:	2f 2e       	mov	r2, r31
    2d36:	f3 e0       	ldi	r31, 0x03	; 3
    2d38:	3f 2e       	mov	r3, r31
    2d3a:	f0 2d       	mov	r31, r0
			{
				menu_input_temp = menu_input;
				menu_input = 0;
				
				// Display init
				menu_display_h = "Battery Charger ";
    2d3c:	02 e4       	ldi	r16, 0x42	; 66
    2d3e:	13 e0       	ldi	r17, 0x03	; 3
						menu_display_l[11] = '>';
						
						if (enter)
						{
							menu_input = menu_input_temp;
							break;
    2d40:	0c 94 80 20 	jmp	0x4100	; 0x4100 <menu+0x259c>
					// Charger comm
					// i2c
					
					
					// LCD drive
					LCD_home();
    2d44:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					LCD_NWL();
    2d48:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    2d4c:	60 e1       	ldi	r22, 0x10	; 16
    2d4e:	81 e3       	ldi	r24, 0x31	; 49
    2d50:	93 e0       	ldi	r25, 0x03	; 3
    2d52:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					
					// Buzzer drive
					buzzer_switch();
    2d56:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
				}// while(1)
    2d5a:	e6 ce       	rjmp	.-564    	; 0x2b28 <menu+0xfc4>
			
		} // else if (menu_input == 6)
		
		
		////////// Servo/Actuator tester /////////////////////////////////////////
		else if (menu_input == 7)
    2d5c:	97 30       	cpi	r25, 0x07	; 7
    2d5e:	c9 f5       	brne	.+114    	; 0x2dd2 <menu+0x126e>
		{
			// Display
			menu_display_h = " Bat Charger    ";
			menu_display_l = ">Servo Test     ";
			
			if (enter)
    2d60:	88 23       	and	r24, r24
    2d62:	11 f4       	brne	.+4      	; 0x2d68 <menu+0x1204>
    2d64:	0c 94 4b 20 	jmp	0x4096	; 0x4096 <menu+0x2532>
			{
				menu_input_temp = menu_input;
				menu_input = 0;
    2d68:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
				LCD_CLEAR();
    2d6c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
				menu_display_h = "Servo test (Rud)";
				lcd2 =           "          >Exit ";
    2d70:	8d e0       	ldi	r24, 0x0D	; 13
    2d72:	95 e0       	ldi	r25, 0x05	; 5
    2d74:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <lcd2+0x1>
    2d78:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <lcd2>
				
				while (1)
				{
					stick_read();
    2d7c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <stick_read>
					LCD_guage(channel[RUDDER], 2);
    2d80:	62 e0       	ldi	r22, 0x02	; 2
    2d82:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <channel+0x3>
    2d86:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_guage>
					
					if (menu_read())
    2d8a:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
    2d8e:	88 23       	and	r24, r24
    2d90:	69 f0       	breq	.+26     	; 0x2dac <menu+0x1248>
					{
						menu_input = menu_input_temp;
    2d92:	87 e0       	ldi	r24, 0x07	; 7
    2d94:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
		////////// Servo/Actuator tester /////////////////////////////////////////
		else if (menu_input == 7)
		{
			// Display
			menu_display_h = " Bat Charger    ";
			menu_display_l = ">Servo Test     ";
    2d98:	0f 2e       	mov	r0, r31
    2d9a:	f3 e5       	ldi	r31, 0x53	; 83
    2d9c:	2f 2e       	mov	r2, r31
    2d9e:	f3 e0       	ldi	r31, 0x03	; 3
    2da0:	3f 2e       	mov	r3, r31
    2da2:	f0 2d       	mov	r31, r0
			if (enter)
			{
				menu_input_temp = menu_input;
				menu_input = 0;
				LCD_CLEAR();
				menu_display_h = "Servo test (Rud)";
    2da4:	04 e6       	ldi	r16, 0x64	; 100
    2da6:	13 e0       	ldi	r17, 0x03	; 3
					LCD_guage(channel[RUDDER], 2);
					
					if (menu_read())
					{
						menu_input = menu_input_temp;
						break;
    2da8:	0c 94 80 20 	jmp	0x4100	; 0x4100 <menu+0x259c>
					// Communication with BO board
					//i2c
					
					
					// LCD drive
					LCD_string(menu_display_h, 16);
    2dac:	60 e1       	ldi	r22, 0x10	; 16
    2dae:	84 e6       	ldi	r24, 0x64	; 100
    2db0:	93 e0       	ldi	r25, 0x03	; 3
    2db2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    2db6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(lcd2, 16);
    2dba:	60 e1       	ldi	r22, 0x10	; 16
    2dbc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <lcd2>
    2dc0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <lcd2+0x1>
    2dc4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_home();
    2dc8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					
					// Buzzer drive
					buzzer_switch();
    2dcc:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
				}
    2dd0:	d5 cf       	rjmp	.-86     	; 0x2d7c <menu+0x1218>
			}
		} // else if (menu_input == 7)
		
		
		////////// Mute //////////////////////////////////////////////////////////
		else if (menu_input == 8)
    2dd2:	98 30       	cpi	r25, 0x08	; 8
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <menu+0x1274>
    2dd6:	71 c0       	rjmp	.+226    	; 0x2eba <menu+0x1356>
		{
			// Display
			menu_display_h = " Servo Test     ";
			menu_display_l = ">Speaker Mute   ";
			
			if (enter)
    2dd8:	88 23       	and	r24, r24
    2dda:	11 f4       	brne	.+4      	; 0x2de0 <menu+0x127c>
    2ddc:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <menu+0x2544>
			{
				menu_input_temp = menu_input;
				menu_input = 0;
    2de0:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
				LCD_CLEAR();
    2de4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
				{
					enter = menu_read();
					if (menu_input < 0)
						menu_input = 0;
					else if (menu_input > 1)
						menu_input = 1;
    2de8:	cc 24       	eor	r12, r12
    2dea:	c3 94       	inc	r12
						menu_display_l[2] = 'n';
						menu_display_l[3] = ' ';
					}
					else
					{
						menu_display_l[1] = 'O';
    2dec:	0f 2e       	mov	r0, r31
    2dee:	ff e4       	ldi	r31, 0x4F	; 79
    2df0:	ff 2e       	mov	r15, r31
    2df2:	f0 2d       	mov	r31, r0
						menu_display_l[2] = 'f';
    2df4:	06 e6       	ldi	r16, 0x66	; 102
					
					// Value display
					if (buzzer_volume)
					{
						menu_display_l[1] = 'O';
						menu_display_l[2] = 'n';
    2df6:	0f 2e       	mov	r0, r31
    2df8:	fe e6       	ldi	r31, 0x6E	; 110
    2dfa:	df 2e       	mov	r13, r31
    2dfc:	f0 2d       	mov	r31, r0
						menu_display_l[3] = ' ';
    2dfe:	10 e2       	ldi	r17, 0x20	; 32
					
					// Exit
					if (menu_input == 1)
					{
						// Cursor move
						menu_display_l[9] = '>';
    2e00:	0f 2e       	mov	r0, r31
    2e02:	fe e3       	ldi	r31, 0x3E	; 62
    2e04:	ef 2e       	mov	r14, r31
    2e06:	f0 2d       	mov	r31, r0
						if (enter)
						{
							if (buzzer_volume)
								buzzer_volume = 0;
							else
								buzzer_volume = 50;
    2e08:	0f 2e       	mov	r0, r31
    2e0a:	f2 e3       	ldi	r31, 0x32	; 50
    2e0c:	bf 2e       	mov	r11, r31
    2e0e:	f0 2d       	mov	r31, r0
				menu_display_h = " Speaker Volume ";
				menu_display_l = "          Exit  ";
				
				while (1)
				{
					enter = menu_read();
    2e10:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)
    2e14:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2e18:	99 23       	and	r25, r25
    2e1a:	1c f4       	brge	.+6      	; 0x2e22 <menu+0x12be>
						menu_input = 0;
    2e1c:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    2e20:	04 c0       	rjmp	.+8      	; 0x2e2a <menu+0x12c6>
					else if (menu_input > 1)
    2e22:	92 30       	cpi	r25, 0x02	; 2
    2e24:	14 f0       	brlt	.+4      	; 0x2e2a <menu+0x12c6>
						menu_input = 1;
    2e26:	c0 92 ce 05 	sts	0x05CE, r12	; 0x8005ce <menu_input>
					
					// Value display
					if (buzzer_volume)
    2e2a:	90 91 da 05 	lds	r25, 0x05DA	; 0x8005da <buzzer_volume>
    2e2e:	99 23       	and	r25, r25
    2e30:	39 f0       	breq	.+14     	; 0x2e40 <menu+0x12dc>
					{
						menu_display_l[1] = 'O';
    2e32:	f0 92 76 03 	sts	0x0376, r15	; 0x800376 <battery_alarm+0x232>
						menu_display_l[2] = 'n';
    2e36:	d0 92 77 03 	sts	0x0377, r13	; 0x800377 <battery_alarm+0x233>
						menu_display_l[3] = ' ';
    2e3a:	10 93 78 03 	sts	0x0378, r17	; 0x800378 <battery_alarm+0x234>
    2e3e:	06 c0       	rjmp	.+12     	; 0x2e4c <menu+0x12e8>
					}
					else
					{
						menu_display_l[1] = 'O';
    2e40:	f0 92 76 03 	sts	0x0376, r15	; 0x800376 <battery_alarm+0x232>
						menu_display_l[2] = 'f';
    2e44:	00 93 77 03 	sts	0x0377, r16	; 0x800377 <battery_alarm+0x233>
						menu_display_l[3] = 'f';
    2e48:	00 93 78 03 	sts	0x0378, r16	; 0x800378 <battery_alarm+0x234>
						
					}
					
					
					// Volume On-Off
					if (menu_input == 0)
    2e4c:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2e50:	91 11       	cpse	r25, r1
    2e52:	0f c0       	rjmp	.+30     	; 0x2e72 <menu+0x130e>
					{
						// Cursor move
						menu_display_l[0] = '>';
    2e54:	e5 e7       	ldi	r30, 0x75	; 117
    2e56:	f3 e0       	ldi	r31, 0x03	; 3
    2e58:	e0 82       	st	Z, r14
						
						if (enter)
    2e5a:	88 23       	and	r24, r24
    2e5c:	d9 f0       	breq	.+54     	; 0x2e94 <menu+0x1330>
						{
							if (buzzer_volume)
    2e5e:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <buzzer_volume>
    2e62:	88 23       	and	r24, r24
    2e64:	19 f0       	breq	.+6      	; 0x2e6c <menu+0x1308>
								buzzer_volume = 0;
    2e66:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <buzzer_volume>
    2e6a:	14 c0       	rjmp	.+40     	; 0x2e94 <menu+0x1330>
							else
								buzzer_volume = 50;
    2e6c:	b0 92 da 05 	sts	0x05DA, r11	; 0x8005da <buzzer_volume>
    2e70:	11 c0       	rjmp	.+34     	; 0x2e94 <menu+0x1330>
						}
					}
					else
						menu_display_l[0] = ' ';
    2e72:	e5 e7       	ldi	r30, 0x75	; 117
    2e74:	f3 e0       	ldi	r31, 0x03	; 3
    2e76:	10 83       	st	Z, r17
					
					// Exit
					if (menu_input == 1)
    2e78:	91 30       	cpi	r25, 0x01	; 1
    2e7a:	61 f4       	brne	.+24     	; 0x2e94 <menu+0x1330>
					{
						// Cursor move
						menu_display_l[9] = '>';
    2e7c:	e0 92 7e 03 	sts	0x037E, r14	; 0x80037e <battery_alarm+0x23a>
										
						if (enter)
    2e80:	88 23       	and	r24, r24
    2e82:	51 f0       	breq	.+20     	; 0x2e98 <menu+0x1334>
						{
							menu_input = 8;
    2e84:	88 e0       	ldi	r24, 0x08	; 8
    2e86:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
			{
				menu_input_temp = menu_input;
				menu_input = 0;
				LCD_CLEAR();
				menu_display_h = " Speaker Volume ";
				menu_display_l = "          Exit  ";
    2e8a:	1f 01       	movw	r2, r30
			if (enter)
			{
				menu_input_temp = menu_input;
				menu_input = 0;
				LCD_CLEAR();
				menu_display_h = " Speaker Volume ";
    2e8c:	06 e8       	ldi	r16, 0x86	; 134
    2e8e:	13 e0       	ldi	r17, 0x03	; 3
						menu_display_l[9] = '>';
										
						if (enter)
						{
							menu_input = 8;
							break;
    2e90:	0c 94 80 20 	jmp	0x4100	; 0x4100 <menu+0x259c>
						}
					}
					else
						menu_display_l[9] = ' ';
    2e94:	10 93 7e 03 	sts	0x037E, r17	; 0x80037e <battery_alarm+0x23a>
					
					
					// LCD drive
					LCD_string(menu_display_h, 16);
    2e98:	60 e1       	ldi	r22, 0x10	; 16
    2e9a:	86 e8       	ldi	r24, 0x86	; 134
    2e9c:	93 e0       	ldi	r25, 0x03	; 3
    2e9e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    2ea2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    2ea6:	60 e1       	ldi	r22, 0x10	; 16
    2ea8:	85 e7       	ldi	r24, 0x75	; 117
    2eaa:	93 e0       	ldi	r25, 0x03	; 3
    2eac:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_home();
    2eb0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					
					// Buzzer drive
					buzzer_switch();
    2eb4:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
				} // while (1)
    2eb8:	ab cf       	rjmp	.-170    	; 0x2e10 <menu+0x12ac>
		} // else if (menu_input == 8)
		
		
		
		////////// Power saving mode time set ////////////////////////////////////
		else if (menu_input == 9)
    2eba:	99 30       	cpi	r25, 0x09	; 9
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <menu+0x135c>
    2ebe:	5e c1       	rjmp	.+700    	; 0x317c <menu+0x1618>
		{
			// Display
			menu_display_h = " Speaker Mute   ";
			menu_display_l = ">Power off time ";
			
			if (enter)
    2ec0:	88 23       	and	r24, r24
    2ec2:	11 f4       	brne	.+4      	; 0x2ec8 <menu+0x1364>
    2ec4:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <menu+0x2556>
			{
				menu_input = 0;
    2ec8:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
				LCD_CLEAR();
    2ecc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
				menu_display_h = " Power off time ";
				menu_display_l = "           Exit ";
				
				switch (runtime_set)
    2ed0:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <runtime_set>
    2ed4:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <runtime_set+0x1>
    2ed8:	88 35       	cpi	r24, 0x58	; 88
    2eda:	f2 e0       	ldi	r31, 0x02	; 2
    2edc:	9f 07       	cpc	r25, r31
    2ede:	d9 f0       	breq	.+54     	; 0x2f16 <menu+0x13b2>
    2ee0:	18 f4       	brcc	.+6      	; 0x2ee8 <menu+0x1384>
    2ee2:	0a 97       	sbiw	r24, 0x0a	; 10
    2ee4:	49 f0       	breq	.+18     	; 0x2ef8 <menu+0x1394>
    2ee6:	50 c0       	rjmp	.+160    	; 0x2f88 <menu+0x1424>
    2ee8:	84 38       	cpi	r24, 0x84	; 132
    2eea:	33 e0       	ldi	r19, 0x03	; 3
    2eec:	93 07       	cpc	r25, r19
    2eee:	11 f1       	breq	.+68     	; 0x2f34 <menu+0x13d0>
    2ef0:	88 30       	cpi	r24, 0x08	; 8
    2ef2:	97 40       	sbci	r25, 0x07	; 7
    2ef4:	d1 f1       	breq	.+116    	; 0x2f6a <menu+0x1406>
    2ef6:	48 c0       	rjmp	.+144    	; 0x2f88 <menu+0x1424>
				{
					case RUNTIME10s:
						menu_display_l[1] = '1';
    2ef8:	e7 e9       	ldi	r30, 0x97	; 151
    2efa:	f3 e0       	ldi	r31, 0x03	; 3
    2efc:	81 e3       	ldi	r24, 0x31	; 49
    2efe:	81 83       	std	Z+1, r24	; 0x01
						menu_display_l[2] = '0';
    2f00:	80 e3       	ldi	r24, 0x30	; 48
    2f02:	82 83       	std	Z+2, r24	; 0x02
						menu_display_l[3] = ' ';
    2f04:	80 e2       	ldi	r24, 0x20	; 32
    2f06:	83 83       	std	Z+3, r24	; 0x03
						menu_display_l[4] = 's';
    2f08:	83 e7       	ldi	r24, 0x73	; 115
    2f0a:	84 83       	std	Z+4, r24	; 0x04
						menu_display_l[5] = 'e';
    2f0c:	85 e6       	ldi	r24, 0x65	; 101
    2f0e:	85 83       	std	Z+5, r24	; 0x05
						menu_display_l[6] = 'c';
    2f10:	83 e6       	ldi	r24, 0x63	; 99
    2f12:	86 83       	std	Z+6, r24	; 0x06
						break;
    2f14:	1d c0       	rjmp	.+58     	; 0x2f50 <menu+0x13ec>
					
					case RUNTIME10:
						menu_display_l[1] = '1';
    2f16:	e7 e9       	ldi	r30, 0x97	; 151
    2f18:	f3 e0       	ldi	r31, 0x03	; 3
    2f1a:	81 e3       	ldi	r24, 0x31	; 49
    2f1c:	81 83       	std	Z+1, r24	; 0x01
						menu_display_l[2] = '0';
    2f1e:	80 e3       	ldi	r24, 0x30	; 48
    2f20:	82 83       	std	Z+2, r24	; 0x02
						menu_display_l[3] = ' ';
    2f22:	80 e2       	ldi	r24, 0x20	; 32
    2f24:	83 83       	std	Z+3, r24	; 0x03
						menu_display_l[4] = 'm';
    2f26:	8d e6       	ldi	r24, 0x6D	; 109
    2f28:	84 83       	std	Z+4, r24	; 0x04
						menu_display_l[5] = 'i';
    2f2a:	89 e6       	ldi	r24, 0x69	; 105
    2f2c:	85 83       	std	Z+5, r24	; 0x05
						menu_display_l[6] = 'n';
    2f2e:	8e e6       	ldi	r24, 0x6E	; 110
    2f30:	86 83       	std	Z+6, r24	; 0x06
						break;
    2f32:	0e c0       	rjmp	.+28     	; 0x2f50 <menu+0x13ec>
					
					case RUNTIME15:
						menu_display_l[1] = '1';
    2f34:	e7 e9       	ldi	r30, 0x97	; 151
    2f36:	f3 e0       	ldi	r31, 0x03	; 3
    2f38:	81 e3       	ldi	r24, 0x31	; 49
    2f3a:	81 83       	std	Z+1, r24	; 0x01
						menu_display_l[2] = '5';
    2f3c:	85 e3       	ldi	r24, 0x35	; 53
    2f3e:	82 83       	std	Z+2, r24	; 0x02
						menu_display_l[3] = ' ';
    2f40:	80 e2       	ldi	r24, 0x20	; 32
    2f42:	83 83       	std	Z+3, r24	; 0x03
						menu_display_l[4] = 'm';
    2f44:	8d e6       	ldi	r24, 0x6D	; 109
    2f46:	84 83       	std	Z+4, r24	; 0x04
						menu_display_l[5] = 'i';
    2f48:	89 e6       	ldi	r24, 0x69	; 105
    2f4a:	85 83       	std	Z+5, r24	; 0x05
						menu_display_l[6] = 'n';
    2f4c:	8e e6       	ldi	r24, 0x6E	; 110
    2f4e:	86 83       	std	Z+6, r24	; 0x06
										break;
										
									case 0:
										runtime_set = RUNTIME30;
										menu_display_l[1] = '3';
										menu_display_l[2] = '0';
    2f50:	0f 2e       	mov	r0, r31
    2f52:	f0 e3       	ldi	r31, 0x30	; 48
    2f54:	3f 2e       	mov	r3, r31
    2f56:	f0 2d       	mov	r31, r0
										menu_display_l[5] = 'i';
										menu_display_l[6] = 'n';
										break;
									
									case 1:
										runtime_set = RUNTIME15;
    2f58:	0f 2e       	mov	r0, r31
    2f5a:	f4 e8       	ldi	r31, 0x84	; 132
    2f5c:	ef 2e       	mov	r14, r31
    2f5e:	f3 e0       	ldi	r31, 0x03	; 3
    2f60:	ff 2e       	mov	r15, r31
    2f62:	f0 2d       	mov	r31, r0
										menu_display_l[5] = 'e';
										menu_display_l[6] = 'c';
										break;
									
									case 2:
										runtime_set = RUNTIME10;
    2f64:	08 e5       	ldi	r16, 0x58	; 88
    2f66:	12 e0       	ldi	r17, 0x02	; 2
    2f68:	17 c0       	rjmp	.+46     	; 0x2f98 <menu+0x1434>
						menu_display_l[5] = 'i';
						menu_display_l[6] = 'n';
						break;
					
					case RUNTIME30:
						menu_display_l[1] = '3';
    2f6a:	e7 e9       	ldi	r30, 0x97	; 151
    2f6c:	f3 e0       	ldi	r31, 0x03	; 3
    2f6e:	83 e3       	ldi	r24, 0x33	; 51
    2f70:	81 83       	std	Z+1, r24	; 0x01
						menu_display_l[2] = '0';
    2f72:	80 e3       	ldi	r24, 0x30	; 48
    2f74:	82 83       	std	Z+2, r24	; 0x02
						menu_display_l[3] = ' ';
    2f76:	80 e2       	ldi	r24, 0x20	; 32
    2f78:	83 83       	std	Z+3, r24	; 0x03
						menu_display_l[4] = 'm';
    2f7a:	8d e6       	ldi	r24, 0x6D	; 109
    2f7c:	84 83       	std	Z+4, r24	; 0x04
						menu_display_l[5] = 'i';
    2f7e:	89 e6       	ldi	r24, 0x69	; 105
    2f80:	85 83       	std	Z+5, r24	; 0x05
						menu_display_l[6] = 'n';
    2f82:	8e e6       	ldi	r24, 0x6E	; 110
    2f84:	86 83       	std	Z+6, r24	; 0x06
						break;
    2f86:	e4 cf       	rjmp	.-56     	; 0x2f50 <menu+0x13ec>
					
					default:
						menu_display_l[1] = 'E';
    2f88:	e7 e9       	ldi	r30, 0x97	; 151
    2f8a:	f3 e0       	ldi	r31, 0x03	; 3
    2f8c:	85 e4       	ldi	r24, 0x45	; 69
    2f8e:	81 83       	std	Z+1, r24	; 0x01
						menu_display_l[2] = 'R';
    2f90:	82 e5       	ldi	r24, 0x52	; 82
    2f92:	82 83       	std	Z+2, r24	; 0x02
						menu_display_l[3] = 'R';
    2f94:	83 83       	std	Z+3, r24	; 0x03
						break;
    2f96:	dc cf       	rjmp	.-72     	; 0x2f50 <menu+0x13ec>
				} //switch (runtime_set)
				
				
				while (1)
				{
					enter = menu_read();
    2f98:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)
    2f9c:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    2fa0:	99 23       	and	r25, r25
    2fa2:	1c f4       	brge	.+6      	; 0x2faa <menu+0x1446>
						menu_input = 0;
    2fa4:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    2fa8:	08 c0       	rjmp	.+16     	; 0x2fba <menu+0x1456>
					else if (menu_input > 1)
    2faa:	92 30       	cpi	r25, 0x02	; 2
    2fac:	24 f0       	brlt	.+8      	; 0x2fb6 <menu+0x1452>
						menu_input = 1;
    2fae:	91 e0       	ldi	r25, 0x01	; 1
    2fb0:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    2fb4:	c2 c0       	rjmp	.+388    	; 0x313a <menu+0x15d6>
					
					if (menu_input == 0)
    2fb6:	91 11       	cpse	r25, r1
    2fb8:	be c0       	rjmp	.+380    	; 0x3136 <menu+0x15d2>
					{
						menu_display_l[0]  = '>';
    2fba:	9e e3       	ldi	r25, 0x3E	; 62
    2fbc:	e7 e9       	ldi	r30, 0x97	; 151
    2fbe:	f3 e0       	ldi	r31, 0x03	; 3
    2fc0:	90 83       	st	Z, r25
						menu_display_l[10] = ' ';
    2fc2:	90 e2       	ldi	r25, 0x20	; 32
    2fc4:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <battery_alarm+0x25d>
						
						if (enter)
    2fc8:	88 23       	and	r24, r24
    2fca:	09 f4       	brne	.+2      	; 0x2fce <menu+0x146a>
    2fcc:	c6 c0       	rjmp	.+396    	; 0x315a <menu+0x15f6>
						{
							switch (runtime_set)
    2fce:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <runtime_set>
    2fd2:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <runtime_set+0x1>
    2fd6:	88 35       	cpi	r24, 0x58	; 88
    2fd8:	f2 e0       	ldi	r31, 0x02	; 2
    2fda:	9f 07       	cpc	r25, r31
    2fdc:	49 f1       	breq	.+82     	; 0x3030 <menu+0x14cc>
    2fde:	18 f4       	brcc	.+6      	; 0x2fe6 <menu+0x1482>
    2fe0:	0a 97       	sbiw	r24, 0x0a	; 10
    2fe2:	51 f1       	breq	.+84     	; 0x3038 <menu+0x14d4>
    2fe4:	0d c0       	rjmp	.+26     	; 0x3000 <menu+0x149c>
    2fe6:	84 38       	cpi	r24, 0x84	; 132
    2fe8:	33 e0       	ldi	r19, 0x03	; 3
    2fea:	93 07       	cpc	r25, r19
    2fec:	31 f0       	breq	.+12     	; 0x2ffa <menu+0x1496>
    2fee:	88 30       	cpi	r24, 0x08	; 8
    2ff0:	97 40       	sbci	r25, 0x07	; 7
    2ff2:	31 f4       	brne	.+12     	; 0x3000 <menu+0x149c>
							{
								case RUNTIME30:
									menu_input = 0;
    2ff4:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
									break;
    2ff8:	03 c0       	rjmp	.+6      	; 0x3000 <menu+0x149c>
								case RUNTIME15:
									menu_input = 1;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
										
									case 0:
										runtime_set = RUNTIME30;
										menu_display_l[1] = '3';
										menu_display_l[2] = '0';
										menu_display_l[3] = ' ';
    3000:	68 94       	set
    3002:	dd 24       	eor	r13, r13
    3004:	d5 f8       	bld	r13, 5
										menu_display_l[4] = 'm';
    3006:	0f 2e       	mov	r0, r31
    3008:	fd e6       	ldi	r31, 0x6D	; 109
    300a:	4f 2e       	mov	r4, r31
    300c:	f0 2d       	mov	r31, r0
										menu_display_l[5] = 'i';
    300e:	0f 2e       	mov	r0, r31
    3010:	f9 e6       	ldi	r31, 0x69	; 105
    3012:	af 2e       	mov	r10, r31
    3014:	f0 2d       	mov	r31, r0
										menu_display_l[6] = 'n';
    3016:	0f 2e       	mov	r0, r31
    3018:	fe e6       	ldi	r31, 0x6E	; 110
    301a:	bf 2e       	mov	r11, r31
    301c:	f0 2d       	mov	r31, r0
								
								switch (menu_input)
								{
									case 3:
										runtime_set = RUNTIME10s;
										menu_display_l[1] = '1';
    301e:	0f 2e       	mov	r0, r31
    3020:	f1 e3       	ldi	r31, 0x31	; 49
    3022:	cf 2e       	mov	r12, r31
    3024:	f0 2d       	mov	r31, r0
										menu_display_l[2] = '0';
										menu_display_l[3] = ' ';
										menu_display_l[4] = 's';
    3026:	0f 2e       	mov	r0, r31
    3028:	f3 e7       	ldi	r31, 0x73	; 115
    302a:	2f 2e       	mov	r2, r31
    302c:	f0 2d       	mov	r31, r0
    302e:	08 c0       	rjmp	.+16     	; 0x3040 <menu+0x14dc>
									break;
								case RUNTIME15:
									menu_input = 1;
									break;
								case RUNTIME10:
									menu_input = 2;
    3030:	82 e0       	ldi	r24, 0x02	; 2
    3032:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    3036:	e4 cf       	rjmp	.-56     	; 0x3000 <menu+0x149c>
								case RUNTIME10s:
									menu_input = 3;
    3038:	83 e0       	ldi	r24, 0x03	; 3
    303a:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    303e:	e0 cf       	rjmp	.-64     	; 0x3000 <menu+0x149c>
								
							}
							
							while (1)
							{
								enter = menu_read();
    3040:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    3044:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    3048:	99 23       	and	r25, r25
    304a:	1c f4       	brge	.+6      	; 0x3052 <menu+0x14ee>
									menu_input = 0;
    304c:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    3050:	49 c0       	rjmp	.+146    	; 0x30e4 <menu+0x1580>
								else if (menu_input > 3)
    3052:	94 30       	cpi	r25, 0x04	; 4
    3054:	24 f0       	brlt	.+8      	; 0x305e <menu+0x14fa>
									menu_input = 3;
    3056:	93 e0       	ldi	r25, 0x03	; 3
    3058:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    305c:	0b c0       	rjmp	.+22     	; 0x3074 <menu+0x1510>
								
								switch (menu_input)
    305e:	91 30       	cpi	r25, 0x01	; 1
    3060:	79 f1       	breq	.+94     	; 0x30c0 <menu+0x155c>
    3062:	1c f4       	brge	.+6      	; 0x306a <menu+0x1506>
    3064:	91 11       	cpse	r25, r1
    3066:	51 c0       	rjmp	.+162    	; 0x310a <menu+0x15a6>
    3068:	3d c0       	rjmp	.+122    	; 0x30e4 <menu+0x1580>
    306a:	92 30       	cpi	r25, 0x02	; 2
    306c:	c1 f0       	breq	.+48     	; 0x309e <menu+0x153a>
    306e:	93 30       	cpi	r25, 0x03	; 3
    3070:	09 f0       	breq	.+2      	; 0x3074 <menu+0x1510>
    3072:	4b c0       	rjmp	.+150    	; 0x310a <menu+0x15a6>
								{
									case 3:
										runtime_set = RUNTIME10s;
    3074:	2a e0       	ldi	r18, 0x0A	; 10
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	30 93 d1 05 	sts	0x05D1, r19	; 0x8005d1 <runtime_set+0x1>
    307c:	20 93 d0 05 	sts	0x05D0, r18	; 0x8005d0 <runtime_set>
										menu_display_l[1] = '1';
    3080:	c0 92 98 03 	sts	0x0398, r12	; 0x800398 <battery_alarm+0x254>
										menu_display_l[2] = '0';
    3084:	30 92 99 03 	sts	0x0399, r3	; 0x800399 <battery_alarm+0x255>
										menu_display_l[3] = ' ';
    3088:	d0 92 9a 03 	sts	0x039A, r13	; 0x80039a <battery_alarm+0x256>
										menu_display_l[4] = 's';
    308c:	20 92 9b 03 	sts	0x039B, r2	; 0x80039b <battery_alarm+0x257>
										menu_display_l[5] = 'e';
    3090:	95 e6       	ldi	r25, 0x65	; 101
    3092:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <battery_alarm+0x258>
										menu_display_l[6] = 'c';
    3096:	93 e6       	ldi	r25, 0x63	; 99
    3098:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <battery_alarm+0x259>
										break;
    309c:	36 c0       	rjmp	.+108    	; 0x310a <menu+0x15a6>
									
									case 2:
										runtime_set = RUNTIME10;
    309e:	10 93 d1 05 	sts	0x05D1, r17	; 0x8005d1 <runtime_set+0x1>
    30a2:	00 93 d0 05 	sts	0x05D0, r16	; 0x8005d0 <runtime_set>
										menu_display_l[1] = '1';
    30a6:	c0 92 98 03 	sts	0x0398, r12	; 0x800398 <battery_alarm+0x254>
										menu_display_l[2] = '0';
    30aa:	30 92 99 03 	sts	0x0399, r3	; 0x800399 <battery_alarm+0x255>
										menu_display_l[3] = ' ';
    30ae:	d0 92 9a 03 	sts	0x039A, r13	; 0x80039a <battery_alarm+0x256>
										menu_display_l[4] = 'm';
    30b2:	40 92 9b 03 	sts	0x039B, r4	; 0x80039b <battery_alarm+0x257>
										menu_display_l[5] = 'i';
    30b6:	a0 92 9c 03 	sts	0x039C, r10	; 0x80039c <battery_alarm+0x258>
										menu_display_l[6] = 'n';
    30ba:	b0 92 9d 03 	sts	0x039D, r11	; 0x80039d <battery_alarm+0x259>
										break;
    30be:	25 c0       	rjmp	.+74     	; 0x310a <menu+0x15a6>
									
									case 1:
										runtime_set = RUNTIME15;
    30c0:	f0 92 d1 05 	sts	0x05D1, r15	; 0x8005d1 <runtime_set+0x1>
    30c4:	e0 92 d0 05 	sts	0x05D0, r14	; 0x8005d0 <runtime_set>
										menu_display_l[1] = '1';
    30c8:	c0 92 98 03 	sts	0x0398, r12	; 0x800398 <battery_alarm+0x254>
										menu_display_l[2] = '5';
    30cc:	95 e3       	ldi	r25, 0x35	; 53
    30ce:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <battery_alarm+0x255>
										menu_display_l[3] = ' ';
    30d2:	d0 92 9a 03 	sts	0x039A, r13	; 0x80039a <battery_alarm+0x256>
										menu_display_l[4] = 'm';
    30d6:	40 92 9b 03 	sts	0x039B, r4	; 0x80039b <battery_alarm+0x257>
										menu_display_l[5] = 'i';
    30da:	a0 92 9c 03 	sts	0x039C, r10	; 0x80039c <battery_alarm+0x258>
										menu_display_l[6] = 'n';
    30de:	b0 92 9d 03 	sts	0x039D, r11	; 0x80039d <battery_alarm+0x259>
										break;
    30e2:	13 c0       	rjmp	.+38     	; 0x310a <menu+0x15a6>
										
									case 0:
										runtime_set = RUNTIME30;
    30e4:	e8 e0       	ldi	r30, 0x08	; 8
    30e6:	f7 e0       	ldi	r31, 0x07	; 7
    30e8:	f0 93 d1 05 	sts	0x05D1, r31	; 0x8005d1 <runtime_set+0x1>
    30ec:	e0 93 d0 05 	sts	0x05D0, r30	; 0x8005d0 <runtime_set>
										menu_display_l[1] = '3';
    30f0:	f3 e3       	ldi	r31, 0x33	; 51
    30f2:	f0 93 98 03 	sts	0x0398, r31	; 0x800398 <battery_alarm+0x254>
										menu_display_l[2] = '0';
    30f6:	30 92 99 03 	sts	0x0399, r3	; 0x800399 <battery_alarm+0x255>
										menu_display_l[3] = ' ';
    30fa:	d0 92 9a 03 	sts	0x039A, r13	; 0x80039a <battery_alarm+0x256>
										menu_display_l[4] = 'm';
    30fe:	40 92 9b 03 	sts	0x039B, r4	; 0x80039b <battery_alarm+0x257>
										menu_display_l[5] = 'i';
    3102:	a0 92 9c 03 	sts	0x039C, r10	; 0x80039c <battery_alarm+0x258>
										menu_display_l[6] = 'n';
    3106:	b0 92 9d 03 	sts	0x039D, r11	; 0x80039d <battery_alarm+0x259>
										break;
										
									
								} //switch (menu_input)
								
								if (enter)
    310a:	88 23       	and	r24, r24
    310c:	19 f0       	breq	.+6      	; 0x3114 <menu+0x15b0>
								{
									menu_input = 0;
    310e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
									break;
    3112:	23 c0       	rjmp	.+70     	; 0x315a <menu+0x15f6>
								}
								
								
								// LCD drive
								LCD_string(menu_display_h, 16);
    3114:	60 e1       	ldi	r22, 0x10	; 16
    3116:	88 ea       	ldi	r24, 0xA8	; 168
    3118:	93 e0       	ldi	r25, 0x03	; 3
    311a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								LCD_NWL();
    311e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    3122:	60 e1       	ldi	r22, 0x10	; 16
    3124:	87 e9       	ldi	r24, 0x97	; 151
    3126:	93 e0       	ldi	r25, 0x03	; 3
    3128:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								LCD_home();
    312c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								
								// Buzzer drive
								buzzer_switch();
    3130:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    3134:	85 cf       	rjmp	.-246    	; 0x3040 <menu+0x14dc>
						} //if (enter)
						
					}
					
					// Exit
					else if (menu_input == 1)
    3136:	91 30       	cpi	r25, 0x01	; 1
    3138:	81 f4       	brne	.+32     	; 0x315a <menu+0x15f6>
					{
						menu_display_l[0]  = ' ';
    313a:	90 e2       	ldi	r25, 0x20	; 32
    313c:	e7 e9       	ldi	r30, 0x97	; 151
    313e:	f3 e0       	ldi	r31, 0x03	; 3
    3140:	90 83       	st	Z, r25
						menu_display_l[10] = '>';
    3142:	9e e3       	ldi	r25, 0x3E	; 62
    3144:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <battery_alarm+0x25d>
						
						if (enter)
    3148:	88 23       	and	r24, r24
    314a:	39 f0       	breq	.+14     	; 0x315a <menu+0x15f6>
						{
							menu_input = 9;
    314c:	89 e0       	ldi	r24, 0x09	; 9
    314e:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
			if (enter)
			{
				menu_input = 0;
				LCD_CLEAR();
				menu_display_h = " Power off time ";
				menu_display_l = "           Exit ";
    3152:	1f 01       	movw	r2, r30
			
			if (enter)
			{
				menu_input = 0;
				LCD_CLEAR();
				menu_display_h = " Power off time ";
    3154:	08 ea       	ldi	r16, 0xA8	; 168
    3156:	13 e0       	ldi	r17, 0x03	; 3
						menu_display_l[10] = '>';
						
						if (enter)
						{
							menu_input = 9;
							break;
    3158:	d3 c7       	rjmp	.+4006   	; 0x4100 <menu+0x259c>
						}
					} //if (menu_input == 1)
					
					
					// LCD drive
					LCD_string(menu_display_h, 16);
    315a:	60 e1       	ldi	r22, 0x10	; 16
    315c:	88 ea       	ldi	r24, 0xA8	; 168
    315e:	93 e0       	ldi	r25, 0x03	; 3
    3160:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    3164:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    3168:	60 e1       	ldi	r22, 0x10	; 16
    316a:	87 e9       	ldi	r24, 0x97	; 151
    316c:	93 e0       	ldi	r25, 0x03	; 3
    316e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_home();
    3172:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					
					// Buzzer drive
					buzzer_switch();
    3176:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
				} //while (1)
    317a:	0e cf       	rjmp	.-484    	; 0x2f98 <menu+0x1434>
			} //if (enter)
		} //else if (menu_input == 9)
		
		////////// RF mode ///////////////////////////////////////////////////////
		else if (menu_input == 10)
    317c:	9a 30       	cpi	r25, 0x0A	; 10
    317e:	09 f0       	breq	.+2      	; 0x3182 <menu+0x161e>
    3180:	dc c0       	rjmp	.+440    	; 0x333a <menu+0x17d6>
		{
			uint8_t mixing_val_3_temp;
			mixing_val_3_temp = (mixing_val_3 & (~RF_MODE_MASK));
    3182:	10 91 d6 05 	lds	r17, 0x05D6	; 0x8005d6 <mixing_val_3>
			// Display
			menu_display_h = " Power off time ";
			menu_display_l = ">Output mode    ";
			
			if (enter)
    3186:	88 23       	and	r24, r24
    3188:	09 f4       	brne	.+2      	; 0x318c <menu+0x1628>
    318a:	a0 c7       	rjmp	.+3904   	; 0x40cc <menu+0x2568>
		
		////////// RF mode ///////////////////////////////////////////////////////
		else if (menu_input == 10)
		{
			uint8_t mixing_val_3_temp;
			mixing_val_3_temp = (mixing_val_3 & (~RF_MODE_MASK));
    318c:	10 7f       	andi	r17, 0xF0	; 240
			menu_display_l = ">Output mode    ";
			
			if (enter)
			{
				menu_input_temp = menu_input;
				menu_input = 0;
    318e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
				LCD_CLEAR();
    3192:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
							menu_display_l[6] = ' ';
						// CH5
						if ((mixing_val_3 & RF_MODE_MASK) == BLE)
							menu_display_l[13] = 'V';
						else
							menu_display_l[13] = ' ';
    3196:	68 94       	set
    3198:	bb 24       	eor	r11, r11
    319a:	b5 f8       	bld	r11, 5
					
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " JF24    NRF    ";
    319c:	0f 2e       	mov	r0, r31
    319e:	fa eb       	ldi	r31, 0xBA	; 186
    31a0:	ef 2e       	mov	r14, r31
    31a2:	f2 e0       	ldi	r31, 0x02	; 2
    31a4:	ff 2e       	mov	r15, r31
    31a6:	f0 2d       	mov	r31, r0
							menu_display_l[6] = 'V';
						else
							menu_display_l[6] = ' ';
						// CH5
						if ((mixing_val_3 & RF_MODE_MASK) == BLE)
							menu_display_l[13] = 'V';
    31a8:	0f 2e       	mov	r0, r31
    31aa:	f6 e5       	ldi	r31, 0x56	; 86
    31ac:	af 2e       	mov	r10, r31
    31ae:	f0 2d       	mov	r31, r0
					}
					else
					{
						// Display init
						menu_display_h = " UART    BLE    ";
						menu_display_l = " Exit           ";
    31b0:	0f 2e       	mov	r0, r31
    31b2:	f6 e6       	ldi	r31, 0x66	; 102
    31b4:	cf 2e       	mov	r12, r31
    31b6:	f2 e0       	ldi	r31, 0x02	; 2
    31b8:	df 2e       	mov	r13, r31
    31ba:	f0 2d       	mov	r31, r0
					// Exit
					if (menu_input == 4)
					{
						// Cursor move
						menu_display_h[8] = ' ';
						menu_display_l[0] = '>';
    31bc:	0f 2e       	mov	r0, r31
    31be:	fe e3       	ldi	r31, 0x3E	; 62
    31c0:	4f 2e       	mov	r4, r31
    31c2:	f0 2d       	mov	r31, r0
						// Cursor move
						menu_display_l[8] = '>';
						
						if (enter)
						{
							mixing_val_3 = BLE|mixing_val_3_temp;
    31c4:	f1 2f       	mov	r31, r17
    31c6:	f4 60       	ori	r31, 0x04	; 4
    31c8:	f9 83       	std	Y+1, r31	; 0x01
						// Cursor move
						menu_display_l[0] = '>';
						
						if (enter)
						{
							mixing_val_3 = UART|mixing_val_3_temp;
    31ca:	21 2f       	mov	r18, r17
    31cc:	23 60       	ori	r18, 0x03	; 3
    31ce:	2c 83       	std	Y+4, r18	; 0x04
						// Cursor move
						menu_display_h[8] = '>';
						
						if (enter)
						{
							mixing_val_3 = NRF|mixing_val_3_temp;
    31d0:	31 2f       	mov	r19, r17
    31d2:	32 60       	ori	r19, 0x02	; 2
    31d4:	3d 83       	std	Y+5, r19	; 0x05
						// Cursor move
						menu_display_h[0] = '>';
						
						if (enter)
						{
							mixing_val_3 = JF24|mixing_val_3_temp;
    31d6:	11 60       	ori	r17, 0x01	; 1
    31d8:	1e 83       	std	Y+6, r17	; 0x06
				menu_input = 0;
				LCD_CLEAR();
				
				while (1)
				{
					enter = menu_read();
    31da:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)
    31de:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    31e2:	99 23       	and	r25, r25
    31e4:	1c f4       	brge	.+6      	; 0x31ec <menu+0x1688>
						menu_input = 0;
    31e6:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    31ea:	08 c0       	rjmp	.+16     	; 0x31fc <menu+0x1698>
					else if (menu_input > 4)
    31ec:	95 30       	cpi	r25, 0x05	; 5
    31ee:	24 f0       	brlt	.+8      	; 0x31f8 <menu+0x1694>
						menu_input = 4;
    31f0:	94 e0       	ldi	r25, 0x04	; 4
    31f2:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    31f6:	39 c0       	rjmp	.+114    	; 0x326a <menu+0x1706>
					
					
					// Display init & stat ////////////
					if (menu_input < 4)
    31f8:	94 30       	cpi	r25, 0x04	; 4
    31fa:	bc f5       	brge	.+110    	; 0x326a <menu+0x1706>
						// Display init
						menu_display_h = " JF24    NRF    ";
						menu_display_l = " UART    BLE    ";
						
						// Aileron
						if ((mixing_val_3 & RF_MODE_MASK) == JF24)
    31fc:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <mixing_val_3>
    3200:	9f 70       	andi	r25, 0x0F	; 15
    3202:	91 30       	cpi	r25, 0x01	; 1
    3204:	19 f4       	brne	.+6      	; 0x320c <menu+0x16a8>
							menu_display_h[6] = 'V';
    3206:	f7 01       	movw	r30, r14
    3208:	a6 82       	std	Z+6, r10	; 0x06
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <menu+0x16ac>
						else
							menu_display_h[6] = ' ';
    320c:	f7 01       	movw	r30, r14
    320e:	b6 82       	std	Z+6, r11	; 0x06
						// Elevator
						if ((mixing_val_3 & RF_MODE_MASK) == NRF)
    3210:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <mixing_val_3>
    3214:	9f 70       	andi	r25, 0x0F	; 15
    3216:	92 30       	cpi	r25, 0x02	; 2
    3218:	19 f4       	brne	.+6      	; 0x3220 <menu+0x16bc>
							menu_display_h[13] = 'V';
    321a:	f7 01       	movw	r30, r14
    321c:	a5 86       	std	Z+13, r10	; 0x0d
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <menu+0x16c0>
						else
							menu_display_h[13] = ' ';
    3220:	f7 01       	movw	r30, r14
    3222:	b5 86       	std	Z+13, r11	; 0x0d
						// Rudder
						if ((mixing_val_3 & RF_MODE_MASK) == UART)
    3224:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <mixing_val_3>
    3228:	9f 70       	andi	r25, 0x0F	; 15
    322a:	93 30       	cpi	r25, 0x03	; 3
    322c:	19 f4       	brne	.+6      	; 0x3234 <menu+0x16d0>
							menu_display_l[6] = 'V';
    322e:	a0 92 af 02 	sts	0x02AF, r10	; 0x8002af <battery_alarm+0x16b>
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <menu+0x16d4>
						else
							menu_display_l[6] = ' ';
    3234:	b0 92 af 02 	sts	0x02AF, r11	; 0x8002af <battery_alarm+0x16b>
						// CH5
						if ((mixing_val_3 & RF_MODE_MASK) == BLE)
    3238:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <mixing_val_3>
    323c:	9f 70       	andi	r25, 0x0F	; 15
    323e:	94 30       	cpi	r25, 0x04	; 4
    3240:	51 f4       	brne	.+20     	; 0x3256 <menu+0x16f2>
							menu_display_l[13] = 'V';
    3242:	a0 92 b6 02 	sts	0x02B6, r10	; 0x8002b6 <battery_alarm+0x172>
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " JF24    NRF    ";
						menu_display_l = " UART    BLE    ";
    3246:	0f 2e       	mov	r0, r31
    3248:	f9 ea       	ldi	r31, 0xA9	; 169
    324a:	2f 2e       	mov	r2, r31
    324c:	f2 e0       	ldi	r31, 0x02	; 2
    324e:	3f 2e       	mov	r3, r31
    3250:	f0 2d       	mov	r31, r0
					
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " JF24    NRF    ";
    3252:	87 01       	movw	r16, r14
    3254:	24 c0       	rjmp	.+72     	; 0x329e <menu+0x173a>
							menu_display_l[6] = ' ';
						// CH5
						if ((mixing_val_3 & RF_MODE_MASK) == BLE)
							menu_display_l[13] = 'V';
						else
							menu_display_l[13] = ' ';
    3256:	b0 92 b6 02 	sts	0x02B6, r11	; 0x8002b6 <battery_alarm+0x172>
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " JF24    NRF    ";
						menu_display_l = " UART    BLE    ";
    325a:	0f 2e       	mov	r0, r31
    325c:	f9 ea       	ldi	r31, 0xA9	; 169
    325e:	2f 2e       	mov	r2, r31
    3260:	f2 e0       	ldi	r31, 0x02	; 2
    3262:	3f 2e       	mov	r3, r31
    3264:	f0 2d       	mov	r31, r0
					
					// Display init & stat ////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " JF24    NRF    ";
    3266:	87 01       	movw	r16, r14
    3268:	1a c0       	rjmp	.+52     	; 0x329e <menu+0x173a>
						// Display init
						menu_display_h = " UART    BLE    ";
						menu_display_l = " Exit           ";
						
						// Aileron
						if ((mixing_val_3 & RF_MODE_MASK) == UART)
    326a:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <mixing_val_3>
    326e:	9f 70       	andi	r25, 0x0F	; 15
    3270:	93 30       	cpi	r25, 0x03	; 3
    3272:	19 f4       	brne	.+6      	; 0x327a <menu+0x1716>
							menu_display_h[6] = 'V';
    3274:	a0 92 af 02 	sts	0x02AF, r10	; 0x8002af <battery_alarm+0x16b>
    3278:	02 c0       	rjmp	.+4      	; 0x327e <menu+0x171a>
						else
							menu_display_h[6] = ' ';
    327a:	b0 92 af 02 	sts	0x02AF, r11	; 0x8002af <battery_alarm+0x16b>
						// Elevator
						if ((mixing_val_3 & RF_MODE_MASK) == BLE)
    327e:	90 91 d6 05 	lds	r25, 0x05D6	; 0x8005d6 <mixing_val_3>
    3282:	9f 70       	andi	r25, 0x0F	; 15
    3284:	94 30       	cpi	r25, 0x04	; 4
    3286:	31 f4       	brne	.+12     	; 0x3294 <menu+0x1730>
							menu_display_h[13] = 'V';
    3288:	a0 92 b6 02 	sts	0x02B6, r10	; 0x8002b6 <battery_alarm+0x172>
					}
					else
					{
						// Display init
						menu_display_h = " UART    BLE    ";
						menu_display_l = " Exit           ";
    328c:	16 01       	movw	r2, r12
							menu_display_l[13] = ' ';
					}
					else
					{
						// Display init
						menu_display_h = " UART    BLE    ";
    328e:	09 ea       	ldi	r16, 0xA9	; 169
    3290:	12 e0       	ldi	r17, 0x02	; 2
    3292:	05 c0       	rjmp	.+10     	; 0x329e <menu+0x173a>
							menu_display_h[6] = ' ';
						// Elevator
						if ((mixing_val_3 & RF_MODE_MASK) == BLE)
							menu_display_h[13] = 'V';
						else
							menu_display_h[13] = ' ';
    3294:	b0 92 b6 02 	sts	0x02B6, r11	; 0x8002b6 <battery_alarm+0x172>
					}
					else
					{
						// Display init
						menu_display_h = " UART    BLE    ";
						menu_display_l = " Exit           ";
    3298:	16 01       	movw	r2, r12
							menu_display_l[13] = ' ';
					}
					else
					{
						// Display init
						menu_display_h = " UART    BLE    ";
    329a:	09 ea       	ldi	r16, 0xA9	; 169
    329c:	12 e0       	ldi	r17, 0x02	; 2
					}
					
					
					// Cursor move & val set //////////
					// Jiffa - PPM
					if (menu_input == 0)
    329e:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    32a2:	91 11       	cpse	r25, r1
    32a4:	09 c0       	rjmp	.+18     	; 0x32b8 <menu+0x1754>
					{
						// Cursor move
						menu_display_h[0] = '>';
    32a6:	f8 01       	movw	r30, r16
    32a8:	40 82       	st	Z, r4
						
						if (enter)
    32aa:	88 23       	and	r24, r24
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <menu+0x174c>
    32ae:	75 c7       	rjmp	.+3818   	; 0x419a <menu+0x2636>
						{
							mixing_val_3 = JF24|mixing_val_3_temp;
    32b0:	fe 81       	ldd	r31, Y+6	; 0x06
    32b2:	f0 93 d6 05 	sts	0x05D6, r31	; 0x8005d6 <mixing_val_3>
    32b6:	71 c7       	rjmp	.+3810   	; 0x419a <menu+0x2636>
						}
					}
					else
						menu_display_h[0] = ' ';
    32b8:	f8 01       	movw	r30, r16
    32ba:	b0 82       	st	Z, r11
					
					
					// NRF
					if (menu_input == 1)
    32bc:	91 30       	cpi	r25, 0x01	; 1
    32be:	41 f4       	brne	.+16     	; 0x32d0 <menu+0x176c>
					{
						// Cursor move
						menu_display_h[8] = '>';
    32c0:	40 86       	std	Z+8, r4	; 0x08
						
						if (enter)
    32c2:	88 23       	and	r24, r24
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <menu+0x1764>
    32c6:	6c c7       	rjmp	.+3800   	; 0x41a0 <menu+0x263c>
						{
							mixing_val_3 = NRF|mixing_val_3_temp;
    32c8:	fd 81       	ldd	r31, Y+5	; 0x05
    32ca:	f0 93 d6 05 	sts	0x05D6, r31	; 0x8005d6 <mixing_val_3>
    32ce:	68 c7       	rjmp	.+3792   	; 0x41a0 <menu+0x263c>
						}
					}
					else
						menu_display_h[8] = ' ';
    32d0:	f8 01       	movw	r30, r16
    32d2:	b0 86       	std	Z+8, r11	; 0x08
					
					
					// UART
					if (menu_input == 2)
    32d4:	92 30       	cpi	r25, 0x02	; 2
    32d6:	49 f4       	brne	.+18     	; 0x32ea <menu+0x1786>
					{
						// Cursor move
						menu_display_l[0] = '>';
    32d8:	f1 01       	movw	r30, r2
    32da:	40 82       	st	Z, r4
						
						if (enter)
    32dc:	88 23       	and	r24, r24
    32de:	09 f4       	brne	.+2      	; 0x32e2 <menu+0x177e>
    32e0:	62 c7       	rjmp	.+3780   	; 0x41a6 <menu+0x2642>
						{
							mixing_val_3 = UART|mixing_val_3_temp;
    32e2:	fc 81       	ldd	r31, Y+4	; 0x04
    32e4:	f0 93 d6 05 	sts	0x05D6, r31	; 0x8005d6 <mixing_val_3>
    32e8:	5e c7       	rjmp	.+3772   	; 0x41a6 <menu+0x2642>
						}
					}
					else
						menu_display_l[0] = ' ';
    32ea:	f1 01       	movw	r30, r2
    32ec:	b0 82       	st	Z, r11
					
					
					// BLE
					if (menu_input == 3)
    32ee:	93 30       	cpi	r25, 0x03	; 3
    32f0:	39 f4       	brne	.+14     	; 0x3300 <menu+0x179c>
					{
						// Cursor move
						menu_display_l[8] = '>';
    32f2:	40 86       	std	Z+8, r4	; 0x08
						
						if (enter)
    32f4:	88 23       	and	r24, r24
    32f6:	91 f0       	breq	.+36     	; 0x331c <menu+0x17b8>
						{
							mixing_val_3 = BLE|mixing_val_3_temp;
    32f8:	f9 81       	ldd	r31, Y+1	; 0x01
    32fa:	f0 93 d6 05 	sts	0x05D6, r31	; 0x8005d6 <mixing_val_3>
    32fe:	0e c0       	rjmp	.+28     	; 0x331c <menu+0x17b8>
						}
					}
					else
						menu_display_l[8] = ' ';
    3300:	f1 01       	movw	r30, r2
    3302:	b0 86       	std	Z+8, r11	; 0x08
					
					
					// Exit
					if (menu_input == 4)
    3304:	94 30       	cpi	r25, 0x04	; 4
    3306:	51 f4       	brne	.+20     	; 0x331c <menu+0x17b8>
					{
						// Cursor move
						menu_display_h[8] = ' ';
    3308:	f8 01       	movw	r30, r16
    330a:	b0 86       	std	Z+8, r11	; 0x08
						menu_display_l[0] = '>';
    330c:	f1 01       	movw	r30, r2
    330e:	40 82       	st	Z, r4
						menu_display_l[8] = ' ';
							
						if (enter)
    3310:	88 23       	and	r24, r24
    3312:	21 f0       	breq	.+8      	; 0x331c <menu+0x17b8>
						{
							menu_input = menu_input_temp;
    3314:	8a e0       	ldi	r24, 0x0A	; 10
    3316:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
							break;
    331a:	f2 c6       	rjmp	.+3556   	; 0x4100 <menu+0x259c>
						}
					}
					
						
					// LCD drive
					LCD_string(menu_display_h, 16);
    331c:	60 e1       	ldi	r22, 0x10	; 16
    331e:	c8 01       	movw	r24, r16
    3320:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    3324:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    3328:	60 e1       	ldi	r22, 0x10	; 16
    332a:	c1 01       	movw	r24, r2
    332c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_home();
    3330:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					
					// Buzzer drive
					buzzer_switch();
    3334:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
				} // while (1)
    3338:	50 cf       	rjmp	.-352    	; 0x31da <menu+0x1676>
			}// if (enter)
		} // else if (menu_input == 9)
		
		
		////////// Switch allocation /////////////////////////////////////////////
		else if (menu_input == 11)
    333a:	9b 30       	cpi	r25, 0x0B	; 11
    333c:	09 f0       	breq	.+2      	; 0x3340 <menu+0x17dc>
    333e:	65 c6       	rjmp	.+3274   	; 0x400a <menu+0x24a6>
		{
			// Display
			menu_display_h = " Output mode    ";
			menu_display_l = ">Switch allocate";
			
			if (enter)
    3340:	88 23       	and	r24, r24
    3342:	09 f4       	brne	.+2      	; 0x3346 <menu+0x17e2>
    3344:	cc c6       	rjmp	.+3480   	; 0x40de <menu+0x257a>
			{
				menu_input_temp = menu_input;
				menu_input = cur_model;
    3346:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <cur_model>
    334a:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
				LCD_CLEAR();
    334e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
					
					// Exit
					if (menu_input == 8)
					{
						// Cursor move
						menu_display_h[8] = ' ';
    3352:	68 94       	set
    3354:	44 24       	eor	r4, r4
    3356:	45 f8       	bld	r4, 5
									menu_input = 5;
								
								
								if (menu_input == 0)
								{
									menu_display_l[13] = 'N';
    3358:	0f 2e       	mov	r0, r31
    335a:	fe e4       	ldi	r31, 0x4E	; 78
    335c:	af 2e       	mov	r10, r31
    335e:	f0 2d       	mov	r31, r0
									menu_display_l[14] = 'C';
    3360:	0f 2e       	mov	r0, r31
    3362:	f3 e4       	ldi	r31, 0x43	; 67
    3364:	bf 2e       	mov	r11, r31
    3366:	f0 2d       	mov	r31, r0
									menu_display_l[15] = 'R';
									sw[7] = RUD_DR;
								}
								else if (menu_input == 5)
								{
									menu_display_l[13] = 'D';
    3368:	0f 2e       	mov	r0, r31
    336a:	f4 e4       	ldi	r31, 0x44	; 68
    336c:	cf 2e       	mov	r12, r31
    336e:	f0 2d       	mov	r31, r0
									menu_display_l[14] = 'R';
    3370:	0f 2e       	mov	r0, r31
    3372:	f2 e5       	ldi	r31, 0x52	; 82
    3374:	ff 2e       	mov	r15, r31
    3376:	f0 2d       	mov	r31, r0
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
    3378:	9a 82       	std	Y+2, r9	; 0x02
    337a:	89 82       	std	Y+1, r8	; 0x01
				menu_input_temp = menu_input;
				menu_input = cur_model;
				LCD_CLEAR();
				while (1)
				{
					enter = menu_read();
    337c:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
					if (menu_input < 0)
    3380:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    3384:	99 23       	and	r25, r25
    3386:	24 f4       	brge	.+8      	; 0x3390 <menu+0x182c>
						menu_input = 0;
    3388:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
					else if (menu_input > 8)
						menu_input = 8;			// 7 switches
					
					
					// Display & stat /////////////////
					if (menu_input < 4)
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	11 c0       	rjmp	.+34     	; 0x33b2 <menu+0x184e>
				while (1)
				{
					enter = menu_read();
					if (menu_input < 0)
						menu_input = 0;
					else if (menu_input > 8)
    3390:	99 30       	cpi	r25, 0x09	; 9
    3392:	64 f0       	brlt	.+24     	; 0x33ac <menu+0x1848>
						menu_input = 8;			// 7 switches
    3394:	98 e0       	ldi	r25, 0x08	; 8
    3396:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
					}
					else
					{
						// Display init
						menu_display_h = " SW7-    SW8-   ";
						menu_display_l = " Exit           ";
    339a:	0f 2e       	mov	r0, r31
    339c:	f6 e6       	ldi	r31, 0x66	; 102
    339e:	2f 2e       	mov	r2, r31
    33a0:	f2 e0       	ldi	r31, 0x02	; 2
    33a2:	3f 2e       	mov	r3, r31
    33a4:	f0 2d       	mov	r31, r0
						
					}
					else
					{
						// Display init
						menu_display_h = " SW7-    SW8-   ";
    33a6:	0e ef       	ldi	r16, 0xFE	; 254
    33a8:	12 e0       	ldi	r17, 0x02	; 2
    33aa:	0e c6       	rjmp	.+3100   	; 0x3fc8 <menu+0x2464>
					else if (menu_input > 8)
						menu_input = 8;			// 7 switches
					
					
					// Display & stat /////////////////
					if (menu_input < 4)
    33ac:	94 30       	cpi	r25, 0x04	; 4
    33ae:	0c f0       	brlt	.+2      	; 0x33b2 <menu+0x184e>
    33b0:	31 c1       	rjmp	.+610    	; 0x3614 <menu+0x1ab0>
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
						
						// SW1 initial value
						switch (sw[0])
    33b2:	ed ed       	ldi	r30, 0xDD	; 221
    33b4:	f5 e0       	ldi	r31, 0x05	; 5
    33b6:	40 81       	ld	r20, Z
    33b8:	50 e0       	ldi	r21, 0x00	; 0
    33ba:	41 32       	cpi	r20, 0x21	; 33
    33bc:	51 05       	cpc	r21, r1
    33be:	a0 f5       	brcc	.+104    	; 0x3428 <menu+0x18c4>
    33c0:	fa 01       	movw	r30, r20
    33c2:	e6 5a       	subi	r30, 0xA6	; 166
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__tablejump2__>
						{
							case 0:
								menu_display_h[5] = 'N';
    33ca:	ec ed       	ldi	r30, 0xDC	; 220
    33cc:	f2 e0       	ldi	r31, 0x02	; 2
    33ce:	a5 82       	std	Z+5, r10	; 0x05
								menu_display_h[6] = 'C';
    33d0:	b6 82       	std	Z+6, r11	; 0x06
								menu_display_h[7] = ' ';
    33d2:	47 82       	std	Z+7, r4	; 0x07
								break;
    33d4:	29 c0       	rjmp	.+82     	; 0x3428 <menu+0x18c4>
							
							case CH5_SW:
								menu_display_h[5] = 'C';
    33d6:	ec ed       	ldi	r30, 0xDC	; 220
    33d8:	f2 e0       	ldi	r31, 0x02	; 2
    33da:	b5 82       	std	Z+5, r11	; 0x05
								menu_display_h[6] = 'H';
    33dc:	28 e4       	ldi	r18, 0x48	; 72
    33de:	26 83       	std	Z+6, r18	; 0x06
								menu_display_h[7] = '5';
    33e0:	25 e3       	ldi	r18, 0x35	; 53
    33e2:	27 83       	std	Z+7, r18	; 0x07
								break;
    33e4:	21 c0       	rjmp	.+66     	; 0x3428 <menu+0x18c4>
							
							case AIL_DR:
								menu_display_h[5] = 'D';
    33e6:	ec ed       	ldi	r30, 0xDC	; 220
    33e8:	f2 e0       	ldi	r31, 0x02	; 2
    33ea:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_h[6] = 'R';
    33ec:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_h[7] = 'A';
    33ee:	21 e4       	ldi	r18, 0x41	; 65
    33f0:	27 83       	std	Z+7, r18	; 0x07
								break;
    33f2:	1a c0       	rjmp	.+52     	; 0x3428 <menu+0x18c4>
							
							case ELE_DR:
								menu_display_h[5] = 'D';
    33f4:	ec ed       	ldi	r30, 0xDC	; 220
    33f6:	f2 e0       	ldi	r31, 0x02	; 2
    33f8:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_h[6] = 'R';
    33fa:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_h[7] = 'E';
    33fc:	25 e4       	ldi	r18, 0x45	; 69
    33fe:	27 83       	std	Z+7, r18	; 0x07
								break;
    3400:	13 c0       	rjmp	.+38     	; 0x3428 <menu+0x18c4>
							
							case THR_DR:
								menu_display_h[5] = 'D';
    3402:	ec ed       	ldi	r30, 0xDC	; 220
    3404:	f2 e0       	ldi	r31, 0x02	; 2
    3406:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_h[6] = 'R';
    3408:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_h[7] = 'T';
    340a:	24 e5       	ldi	r18, 0x54	; 84
    340c:	27 83       	std	Z+7, r18	; 0x07
								break;
    340e:	0c c0       	rjmp	.+24     	; 0x3428 <menu+0x18c4>
							
							case RUD_DR:
								menu_display_h[5] = 'D';
    3410:	ec ed       	ldi	r30, 0xDC	; 220
    3412:	f2 e0       	ldi	r31, 0x02	; 2
    3414:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_h[6] = 'R';
    3416:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_h[7] = 'R';
    3418:	f7 82       	std	Z+7, r15	; 0x07
								break;
    341a:	06 c0       	rjmp	.+12     	; 0x3428 <menu+0x18c4>
							
							case CH5_DR:
								menu_display_h[5] = 'D';
    341c:	ec ed       	ldi	r30, 0xDC	; 220
    341e:	f2 e0       	ldi	r31, 0x02	; 2
    3420:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_h[6] = 'R';
    3422:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_h[7] = '5';
    3424:	25 e3       	ldi	r18, 0x35	; 53
    3426:	27 83       	std	Z+7, r18	; 0x07
								break;
						}
						// SW2 initial value
						switch (sw[1])
    3428:	40 91 de 05 	lds	r20, 0x05DE	; 0x8005de <sw+0x1>
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	41 32       	cpi	r20, 0x21	; 33
    3430:	51 05       	cpc	r21, r1
    3432:	a0 f5       	brcc	.+104    	; 0x349c <menu+0x1938>
    3434:	fa 01       	movw	r30, r20
    3436:	e5 58       	subi	r30, 0x85	; 133
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__tablejump2__>
						{
							case 0:
								menu_display_h[13] = 'N';
    343e:	ec ed       	ldi	r30, 0xDC	; 220
    3440:	f2 e0       	ldi	r31, 0x02	; 2
    3442:	a5 86       	std	Z+13, r10	; 0x0d
								menu_display_h[14] = 'C';
    3444:	b6 86       	std	Z+14, r11	; 0x0e
								menu_display_h[15] = ' ';
    3446:	47 86       	std	Z+15, r4	; 0x0f
								break;
    3448:	29 c0       	rjmp	.+82     	; 0x349c <menu+0x1938>
							
							case CH5_SW:
								menu_display_h[13] = 'C';
    344a:	ec ed       	ldi	r30, 0xDC	; 220
    344c:	f2 e0       	ldi	r31, 0x02	; 2
    344e:	b5 86       	std	Z+13, r11	; 0x0d
								menu_display_h[14] = 'H';
    3450:	28 e4       	ldi	r18, 0x48	; 72
    3452:	26 87       	std	Z+14, r18	; 0x0e
								menu_display_h[15] = '5';
    3454:	25 e3       	ldi	r18, 0x35	; 53
    3456:	27 87       	std	Z+15, r18	; 0x0f
								break;
    3458:	21 c0       	rjmp	.+66     	; 0x349c <menu+0x1938>
							
							case AIL_DR:
								menu_display_h[13] = 'D';
    345a:	ec ed       	ldi	r30, 0xDC	; 220
    345c:	f2 e0       	ldi	r31, 0x02	; 2
    345e:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_h[14] = 'R';
    3460:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_h[15] = 'A';
    3462:	21 e4       	ldi	r18, 0x41	; 65
    3464:	27 87       	std	Z+15, r18	; 0x0f
								break;
    3466:	1a c0       	rjmp	.+52     	; 0x349c <menu+0x1938>
							
							case ELE_DR:
								menu_display_h[13] = 'D';
    3468:	ec ed       	ldi	r30, 0xDC	; 220
    346a:	f2 e0       	ldi	r31, 0x02	; 2
    346c:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_h[14] = 'R';
    346e:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_h[15] = 'E';
    3470:	25 e4       	ldi	r18, 0x45	; 69
    3472:	27 87       	std	Z+15, r18	; 0x0f
								break;
    3474:	13 c0       	rjmp	.+38     	; 0x349c <menu+0x1938>
							
							case THR_DR:
								menu_display_h[13] = 'D';
    3476:	ec ed       	ldi	r30, 0xDC	; 220
    3478:	f2 e0       	ldi	r31, 0x02	; 2
    347a:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_h[14] = 'R';
    347c:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_h[15] = 'T';
    347e:	24 e5       	ldi	r18, 0x54	; 84
    3480:	27 87       	std	Z+15, r18	; 0x0f
								break;
    3482:	0c c0       	rjmp	.+24     	; 0x349c <menu+0x1938>
							
							case RUD_DR:
								menu_display_h[13] = 'D';
    3484:	ec ed       	ldi	r30, 0xDC	; 220
    3486:	f2 e0       	ldi	r31, 0x02	; 2
    3488:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_h[14] = 'R';
    348a:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_h[15] = 'R';
    348c:	f7 86       	std	Z+15, r15	; 0x0f
								break;
    348e:	06 c0       	rjmp	.+12     	; 0x349c <menu+0x1938>
							
							case CH5_DR:
								menu_display_h[13] = 'D';
    3490:	ec ed       	ldi	r30, 0xDC	; 220
    3492:	f2 e0       	ldi	r31, 0x02	; 2
    3494:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_h[14] = 'R';
    3496:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_h[15] = '5';
    3498:	25 e3       	ldi	r18, 0x35	; 53
    349a:	27 87       	std	Z+15, r18	; 0x0f
								break;
						}
						// SW3 initial value
						switch (sw[2])
    349c:	40 91 df 05 	lds	r20, 0x05DF	; 0x8005df <sw+0x2>
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	41 32       	cpi	r20, 0x21	; 33
    34a4:	51 05       	cpc	r21, r1
    34a6:	d8 f5       	brcc	.+118    	; 0x351e <menu+0x19ba>
    34a8:	fa 01       	movw	r30, r20
    34aa:	e4 56       	subi	r30, 0x64	; 100
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__tablejump2__>
						{
							case 0:
								menu_display_l[5] = 'N';
    34b2:	a0 92 d0 02 	sts	0x02D0, r10	; 0x8002d0 <battery_alarm+0x18c>
								menu_display_l[6] = 'C';
    34b6:	b0 92 d1 02 	sts	0x02D1, r11	; 0x8002d1 <battery_alarm+0x18d>
								menu_display_l[7] = ' ';
    34ba:	40 92 d2 02 	sts	0x02D2, r4	; 0x8002d2 <battery_alarm+0x18e>
								break;
    34be:	2f c0       	rjmp	.+94     	; 0x351e <menu+0x19ba>
							
							case CH5_SW:
								menu_display_l[5] = 'C';
    34c0:	b0 92 d0 02 	sts	0x02D0, r11	; 0x8002d0 <battery_alarm+0x18c>
								menu_display_l[6] = 'H';
    34c4:	28 e4       	ldi	r18, 0x48	; 72
    34c6:	20 93 d1 02 	sts	0x02D1, r18	; 0x8002d1 <battery_alarm+0x18d>
								menu_display_l[7] = '5';
    34ca:	25 e3       	ldi	r18, 0x35	; 53
    34cc:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <battery_alarm+0x18e>
								break;
    34d0:	26 c0       	rjmp	.+76     	; 0x351e <menu+0x19ba>
								
							case AIL_DR:
								menu_display_l[5] = 'D';
    34d2:	c0 92 d0 02 	sts	0x02D0, r12	; 0x8002d0 <battery_alarm+0x18c>
								menu_display_l[6] = 'R';
    34d6:	f0 92 d1 02 	sts	0x02D1, r15	; 0x8002d1 <battery_alarm+0x18d>
								menu_display_l[7] = 'A';
    34da:	21 e4       	ldi	r18, 0x41	; 65
    34dc:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <battery_alarm+0x18e>
								break;
    34e0:	1e c0       	rjmp	.+60     	; 0x351e <menu+0x19ba>
							
							case ELE_DR:
								menu_display_l[5] = 'D';
    34e2:	c0 92 d0 02 	sts	0x02D0, r12	; 0x8002d0 <battery_alarm+0x18c>
								menu_display_l[6] = 'R';
    34e6:	f0 92 d1 02 	sts	0x02D1, r15	; 0x8002d1 <battery_alarm+0x18d>
								menu_display_l[7] = 'E';
    34ea:	25 e4       	ldi	r18, 0x45	; 69
    34ec:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <battery_alarm+0x18e>
								break;
    34f0:	16 c0       	rjmp	.+44     	; 0x351e <menu+0x19ba>
							
							case THR_DR:
								menu_display_l[5] = 'D';
    34f2:	c0 92 d0 02 	sts	0x02D0, r12	; 0x8002d0 <battery_alarm+0x18c>
								menu_display_l[6] = 'R';
    34f6:	f0 92 d1 02 	sts	0x02D1, r15	; 0x8002d1 <battery_alarm+0x18d>
								menu_display_l[7] = 'T';
    34fa:	24 e5       	ldi	r18, 0x54	; 84
    34fc:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <battery_alarm+0x18e>
								break;
    3500:	0e c0       	rjmp	.+28     	; 0x351e <menu+0x19ba>
							
							case RUD_DR:
								menu_display_l[5] = 'D';
    3502:	c0 92 d0 02 	sts	0x02D0, r12	; 0x8002d0 <battery_alarm+0x18c>
								menu_display_l[6] = 'R';
    3506:	f0 92 d1 02 	sts	0x02D1, r15	; 0x8002d1 <battery_alarm+0x18d>
								menu_display_l[7] = 'R';
    350a:	f0 92 d2 02 	sts	0x02D2, r15	; 0x8002d2 <battery_alarm+0x18e>
								break;
    350e:	07 c0       	rjmp	.+14     	; 0x351e <menu+0x19ba>
							
							case CH5_DR:
								menu_display_l[5] = 'D';
    3510:	c0 92 d0 02 	sts	0x02D0, r12	; 0x8002d0 <battery_alarm+0x18c>
								menu_display_l[6] = 'R';
    3514:	f0 92 d1 02 	sts	0x02D1, r15	; 0x8002d1 <battery_alarm+0x18d>
								menu_display_l[7] = '5';
    3518:	25 e3       	ldi	r18, 0x35	; 53
    351a:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <battery_alarm+0x18e>
								break;
						}
						// SW4 initial value
						switch (sw[3])
    351e:	40 91 e0 05 	lds	r20, 0x05E0	; 0x8005e0 <sw+0x3>
    3522:	50 e0       	ldi	r21, 0x00	; 0
    3524:	41 32       	cpi	r20, 0x21	; 33
    3526:	51 05       	cpc	r21, r1
    3528:	08 f0       	brcs	.+2      	; 0x352c <menu+0x19c8>
    352a:	90 c1       	rjmp	.+800    	; 0x384c <menu+0x1ce8>
    352c:	fa 01       	movw	r30, r20
    352e:	e3 54       	subi	r30, 0x43	; 67
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__tablejump2__>
						{
							case 0:
								menu_display_l[13] = 'N';
    3536:	a0 92 d8 02 	sts	0x02D8, r10	; 0x8002d8 <battery_alarm+0x194>
								menu_display_l[14] = 'C';
    353a:	b0 92 d9 02 	sts	0x02D9, r11	; 0x8002d9 <battery_alarm+0x195>
								menu_display_l[15] = ' ';
    353e:	40 92 da 02 	sts	0x02DA, r4	; 0x8002da <battery_alarm+0x196>
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
    3542:	0f 2e       	mov	r0, r31
    3544:	fb ec       	ldi	r31, 0xCB	; 203
    3546:	2f 2e       	mov	r2, r31
    3548:	f2 e0       	ldi	r31, 0x02	; 2
    354a:	3f 2e       	mov	r3, r31
    354c:	f0 2d       	mov	r31, r0
					
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
    354e:	0c ed       	ldi	r16, 0xDC	; 220
    3550:	12 e0       	ldi	r17, 0x02	; 2
						{
							case 0:
								menu_display_l[13] = 'N';
								menu_display_l[14] = 'C';
								menu_display_l[15] = ' ';
								break;
    3552:	9f c1       	rjmp	.+830    	; 0x3892 <menu+0x1d2e>
							
							case CH5_SW:
								menu_display_l[13] = 'C';
    3554:	b0 92 d8 02 	sts	0x02D8, r11	; 0x8002d8 <battery_alarm+0x194>
								menu_display_l[14] = 'H';
    3558:	28 e4       	ldi	r18, 0x48	; 72
    355a:	20 93 d9 02 	sts	0x02D9, r18	; 0x8002d9 <battery_alarm+0x195>
								menu_display_l[15] = '5';
    355e:	25 e3       	ldi	r18, 0x35	; 53
    3560:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <battery_alarm+0x196>
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
    3564:	0f 2e       	mov	r0, r31
    3566:	fb ec       	ldi	r31, 0xCB	; 203
    3568:	2f 2e       	mov	r2, r31
    356a:	f2 e0       	ldi	r31, 0x02	; 2
    356c:	3f 2e       	mov	r3, r31
    356e:	f0 2d       	mov	r31, r0
					
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
    3570:	0c ed       	ldi	r16, 0xDC	; 220
    3572:	12 e0       	ldi	r17, 0x02	; 2
							
							case CH5_SW:
								menu_display_l[13] = 'C';
								menu_display_l[14] = 'H';
								menu_display_l[15] = '5';
								break;
    3574:	8e c1       	rjmp	.+796    	; 0x3892 <menu+0x1d2e>
							
							case AIL_DR:
								menu_display_l[13] = 'D';
    3576:	c0 92 d8 02 	sts	0x02D8, r12	; 0x8002d8 <battery_alarm+0x194>
								menu_display_l[14] = 'R';
    357a:	f0 92 d9 02 	sts	0x02D9, r15	; 0x8002d9 <battery_alarm+0x195>
								menu_display_l[15] = 'A';
    357e:	21 e4       	ldi	r18, 0x41	; 65
    3580:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <battery_alarm+0x196>
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
    3584:	0f 2e       	mov	r0, r31
    3586:	fb ec       	ldi	r31, 0xCB	; 203
    3588:	2f 2e       	mov	r2, r31
    358a:	f2 e0       	ldi	r31, 0x02	; 2
    358c:	3f 2e       	mov	r3, r31
    358e:	f0 2d       	mov	r31, r0
					
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
    3590:	0c ed       	ldi	r16, 0xDC	; 220
    3592:	12 e0       	ldi	r17, 0x02	; 2
							
							case AIL_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'A';
								break;
    3594:	7e c1       	rjmp	.+764    	; 0x3892 <menu+0x1d2e>
							
							case ELE_DR:
								menu_display_l[13] = 'D';
    3596:	c0 92 d8 02 	sts	0x02D8, r12	; 0x8002d8 <battery_alarm+0x194>
								menu_display_l[14] = 'R';
    359a:	f0 92 d9 02 	sts	0x02D9, r15	; 0x8002d9 <battery_alarm+0x195>
								menu_display_l[15] = 'E';
    359e:	25 e4       	ldi	r18, 0x45	; 69
    35a0:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <battery_alarm+0x196>
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
    35a4:	0f 2e       	mov	r0, r31
    35a6:	fb ec       	ldi	r31, 0xCB	; 203
    35a8:	2f 2e       	mov	r2, r31
    35aa:	f2 e0       	ldi	r31, 0x02	; 2
    35ac:	3f 2e       	mov	r3, r31
    35ae:	f0 2d       	mov	r31, r0
					
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
    35b0:	0c ed       	ldi	r16, 0xDC	; 220
    35b2:	12 e0       	ldi	r17, 0x02	; 2
							
							case ELE_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'E';
								break;
    35b4:	6e c1       	rjmp	.+732    	; 0x3892 <menu+0x1d2e>
							
							case THR_DR:
								menu_display_l[13] = 'D';
    35b6:	c0 92 d8 02 	sts	0x02D8, r12	; 0x8002d8 <battery_alarm+0x194>
								menu_display_l[14] = 'R';
    35ba:	f0 92 d9 02 	sts	0x02D9, r15	; 0x8002d9 <battery_alarm+0x195>
								menu_display_l[15] = 'T';
    35be:	24 e5       	ldi	r18, 0x54	; 84
    35c0:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <battery_alarm+0x196>
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
    35c4:	0f 2e       	mov	r0, r31
    35c6:	fb ec       	ldi	r31, 0xCB	; 203
    35c8:	2f 2e       	mov	r2, r31
    35ca:	f2 e0       	ldi	r31, 0x02	; 2
    35cc:	3f 2e       	mov	r3, r31
    35ce:	f0 2d       	mov	r31, r0
					
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
    35d0:	0c ed       	ldi	r16, 0xDC	; 220
    35d2:	12 e0       	ldi	r17, 0x02	; 2
							
							case THR_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'T';
								break;
    35d4:	5e c1       	rjmp	.+700    	; 0x3892 <menu+0x1d2e>
							
							case RUD_DR:
								menu_display_l[13] = 'D';
    35d6:	c0 92 d8 02 	sts	0x02D8, r12	; 0x8002d8 <battery_alarm+0x194>
								menu_display_l[14] = 'R';
    35da:	f0 92 d9 02 	sts	0x02D9, r15	; 0x8002d9 <battery_alarm+0x195>
								menu_display_l[15] = 'R';
    35de:	f0 92 da 02 	sts	0x02DA, r15	; 0x8002da <battery_alarm+0x196>
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
    35e2:	0f 2e       	mov	r0, r31
    35e4:	fb ec       	ldi	r31, 0xCB	; 203
    35e6:	2f 2e       	mov	r2, r31
    35e8:	f2 e0       	ldi	r31, 0x02	; 2
    35ea:	3f 2e       	mov	r3, r31
    35ec:	f0 2d       	mov	r31, r0
					
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
    35ee:	0c ed       	ldi	r16, 0xDC	; 220
    35f0:	12 e0       	ldi	r17, 0x02	; 2
							
							case RUD_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'R';
								break;
    35f2:	4f c1       	rjmp	.+670    	; 0x3892 <menu+0x1d2e>
							
							case CH5_DR:
								menu_display_l[13] = 'D';
    35f4:	c0 92 d8 02 	sts	0x02D8, r12	; 0x8002d8 <battery_alarm+0x194>
								menu_display_l[14] = 'R';
    35f8:	f0 92 d9 02 	sts	0x02D9, r15	; 0x8002d9 <battery_alarm+0x195>
								menu_display_l[15] = '5';
    35fc:	25 e3       	ldi	r18, 0x35	; 53
    35fe:	20 93 da 02 	sts	0x02DA, r18	; 0x8002da <battery_alarm+0x196>
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
    3602:	0f 2e       	mov	r0, r31
    3604:	fb ec       	ldi	r31, 0xCB	; 203
    3606:	2f 2e       	mov	r2, r31
    3608:	f2 e0       	ldi	r31, 0x02	; 2
    360a:	3f 2e       	mov	r3, r31
    360c:	f0 2d       	mov	r31, r0
					
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
    360e:	0c ed       	ldi	r16, 0xDC	; 220
    3610:	12 e0       	ldi	r17, 0x02	; 2
							
							case CH5_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = '5';
								break;
    3612:	3f c1       	rjmp	.+638    	; 0x3892 <menu+0x1d2e>
						}
						
						
					}
					else if (menu_input < 6)
    3614:	96 30       	cpi	r25, 0x06	; 6
    3616:	0c f0       	brlt	.+2      	; 0x361a <menu+0x1ab6>
    3618:	8b c0       	rjmp	.+278    	; 0x3730 <menu+0x1bcc>
						// Display init
						menu_display_h = " SW3-    SW4-   ";
						menu_display_l = " SW5-    SW6-   ";
						
						// SW5 initial value
						switch (sw[4])
    361a:	40 91 e1 05 	lds	r20, 0x05E1	; 0x8005e1 <sw+0x4>
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	41 32       	cpi	r20, 0x21	; 33
    3622:	51 05       	cpc	r21, r1
    3624:	a0 f5       	brcc	.+104    	; 0x368e <menu+0x1b2a>
    3626:	fa 01       	movw	r30, r20
    3628:	e2 52       	subi	r30, 0x22	; 34
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__tablejump2__>
						{
							case 0:
								menu_display_l[5] = 'N';
    3630:	ed ee       	ldi	r30, 0xED	; 237
    3632:	f2 e0       	ldi	r31, 0x02	; 2
    3634:	a5 82       	std	Z+5, r10	; 0x05
								menu_display_l[6] = 'C';
    3636:	b6 82       	std	Z+6, r11	; 0x06
								menu_display_l[7] = ' ';
    3638:	47 82       	std	Z+7, r4	; 0x07
								break;
    363a:	29 c0       	rjmp	.+82     	; 0x368e <menu+0x1b2a>
							
							case CH5_SW:
								menu_display_l[5] = 'C';
    363c:	ed ee       	ldi	r30, 0xED	; 237
    363e:	f2 e0       	ldi	r31, 0x02	; 2
    3640:	b5 82       	std	Z+5, r11	; 0x05
								menu_display_l[6] = 'H';
    3642:	28 e4       	ldi	r18, 0x48	; 72
    3644:	26 83       	std	Z+6, r18	; 0x06
								menu_display_l[7] = '5';
    3646:	25 e3       	ldi	r18, 0x35	; 53
    3648:	27 83       	std	Z+7, r18	; 0x07
								break;
    364a:	21 c0       	rjmp	.+66     	; 0x368e <menu+0x1b2a>
							
							case AIL_DR:
								menu_display_l[5] = 'D';
    364c:	ed ee       	ldi	r30, 0xED	; 237
    364e:	f2 e0       	ldi	r31, 0x02	; 2
    3650:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    3652:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = 'A';
    3654:	21 e4       	ldi	r18, 0x41	; 65
    3656:	27 83       	std	Z+7, r18	; 0x07
								break;
    3658:	1a c0       	rjmp	.+52     	; 0x368e <menu+0x1b2a>
							
							case ELE_DR:
								menu_display_l[5] = 'D';
    365a:	ed ee       	ldi	r30, 0xED	; 237
    365c:	f2 e0       	ldi	r31, 0x02	; 2
    365e:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    3660:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = 'E';
    3662:	25 e4       	ldi	r18, 0x45	; 69
    3664:	27 83       	std	Z+7, r18	; 0x07
								break;
    3666:	13 c0       	rjmp	.+38     	; 0x368e <menu+0x1b2a>
							
							case THR_DR:
								menu_display_l[5] = 'D';
    3668:	ed ee       	ldi	r30, 0xED	; 237
    366a:	f2 e0       	ldi	r31, 0x02	; 2
    366c:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    366e:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = 'T';
    3670:	24 e5       	ldi	r18, 0x54	; 84
    3672:	27 83       	std	Z+7, r18	; 0x07
								break;
    3674:	0c c0       	rjmp	.+24     	; 0x368e <menu+0x1b2a>
							
							case RUD_DR:
								menu_display_l[5] = 'D';
    3676:	ed ee       	ldi	r30, 0xED	; 237
    3678:	f2 e0       	ldi	r31, 0x02	; 2
    367a:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    367c:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = 'R';
    367e:	f7 82       	std	Z+7, r15	; 0x07
								break;
    3680:	06 c0       	rjmp	.+12     	; 0x368e <menu+0x1b2a>
							
							case CH5_DR:
								menu_display_l[5] = 'D';
    3682:	ed ee       	ldi	r30, 0xED	; 237
    3684:	f2 e0       	ldi	r31, 0x02	; 2
    3686:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    3688:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = '5';
    368a:	25 e3       	ldi	r18, 0x35	; 53
    368c:	27 83       	std	Z+7, r18	; 0x07
								break;
						}
						// SW6 initial value
						switch (sw[5])
    368e:	40 91 e2 05 	lds	r20, 0x05E2	; 0x8005e2 <sw+0x5>
    3692:	50 e0       	ldi	r21, 0x00	; 0
    3694:	41 32       	cpi	r20, 0x21	; 33
    3696:	51 05       	cpc	r21, r1
    3698:	08 f0       	brcs	.+2      	; 0x369c <menu+0x1b38>
    369a:	e1 c0       	rjmp	.+450    	; 0x385e <menu+0x1cfa>
    369c:	fa 01       	movw	r30, r20
    369e:	e1 50       	subi	r30, 0x01	; 1
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__tablejump2__>
						{
							case 0:
								menu_display_l[13] = 'N';
    36a6:	ed ee       	ldi	r30, 0xED	; 237
    36a8:	f2 e0       	ldi	r31, 0x02	; 2
    36aa:	a5 86       	std	Z+13, r10	; 0x0d
								menu_display_l[14] = 'C';
    36ac:	b6 86       	std	Z+14, r11	; 0x0e
								menu_display_l[15] = ' ';
    36ae:	47 86       	std	Z+15, r4	; 0x0f
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
						menu_display_l = " SW5-    SW6-   ";
    36b0:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
    36b2:	0b ec       	ldi	r16, 0xCB	; 203
    36b4:	12 e0       	ldi	r17, 0x02	; 2
						{
							case 0:
								menu_display_l[13] = 'N';
								menu_display_l[14] = 'C';
								menu_display_l[15] = ' ';
								break;
    36b6:	ed c0       	rjmp	.+474    	; 0x3892 <menu+0x1d2e>
							
							case CH5_SW:
								menu_display_l[13] = 'C';
    36b8:	ed ee       	ldi	r30, 0xED	; 237
    36ba:	f2 e0       	ldi	r31, 0x02	; 2
    36bc:	b5 86       	std	Z+13, r11	; 0x0d
								menu_display_l[14] = 'H';
    36be:	28 e4       	ldi	r18, 0x48	; 72
    36c0:	26 87       	std	Z+14, r18	; 0x0e
								menu_display_l[15] = '5';
    36c2:	25 e3       	ldi	r18, 0x35	; 53
    36c4:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
						menu_display_l = " SW5-    SW6-   ";
    36c6:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
    36c8:	0b ec       	ldi	r16, 0xCB	; 203
    36ca:	12 e0       	ldi	r17, 0x02	; 2
							
							case CH5_SW:
								menu_display_l[13] = 'C';
								menu_display_l[14] = 'H';
								menu_display_l[15] = '5';
								break;
    36cc:	e2 c0       	rjmp	.+452    	; 0x3892 <menu+0x1d2e>
							
							case AIL_DR:
								menu_display_l[13] = 'D';
    36ce:	ed ee       	ldi	r30, 0xED	; 237
    36d0:	f2 e0       	ldi	r31, 0x02	; 2
    36d2:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    36d4:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = 'A';
    36d6:	21 e4       	ldi	r18, 0x41	; 65
    36d8:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
						menu_display_l = " SW5-    SW6-   ";
    36da:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
    36dc:	0b ec       	ldi	r16, 0xCB	; 203
    36de:	12 e0       	ldi	r17, 0x02	; 2
							
							case AIL_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'A';
								break;
    36e0:	d8 c0       	rjmp	.+432    	; 0x3892 <menu+0x1d2e>
							
							case ELE_DR:
								menu_display_l[13] = 'D';
    36e2:	ed ee       	ldi	r30, 0xED	; 237
    36e4:	f2 e0       	ldi	r31, 0x02	; 2
    36e6:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    36e8:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = 'E';
    36ea:	25 e4       	ldi	r18, 0x45	; 69
    36ec:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
						menu_display_l = " SW5-    SW6-   ";
    36ee:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
    36f0:	0b ec       	ldi	r16, 0xCB	; 203
    36f2:	12 e0       	ldi	r17, 0x02	; 2
							
							case ELE_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'E';
								break;
    36f4:	ce c0       	rjmp	.+412    	; 0x3892 <menu+0x1d2e>
							
							case THR_DR:
								menu_display_l[13] = 'D';
    36f6:	ed ee       	ldi	r30, 0xED	; 237
    36f8:	f2 e0       	ldi	r31, 0x02	; 2
    36fa:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    36fc:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = 'T';
    36fe:	24 e5       	ldi	r18, 0x54	; 84
    3700:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
						menu_display_l = " SW5-    SW6-   ";
    3702:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
    3704:	0b ec       	ldi	r16, 0xCB	; 203
    3706:	12 e0       	ldi	r17, 0x02	; 2
							
							case THR_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'T';
								break;
    3708:	c4 c0       	rjmp	.+392    	; 0x3892 <menu+0x1d2e>
							
							case RUD_DR:
								menu_display_l[13] = 'D';
    370a:	ed ee       	ldi	r30, 0xED	; 237
    370c:	f2 e0       	ldi	r31, 0x02	; 2
    370e:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    3710:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = 'R';
    3712:	f7 86       	std	Z+15, r15	; 0x0f
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
						menu_display_l = " SW5-    SW6-   ";
    3714:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
    3716:	0b ec       	ldi	r16, 0xCB	; 203
    3718:	12 e0       	ldi	r17, 0x02	; 2
							
							case RUD_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'R';
								break;
    371a:	bb c0       	rjmp	.+374    	; 0x3892 <menu+0x1d2e>
							
							case CH5_DR:
								menu_display_l[13] = 'D';
    371c:	ed ee       	ldi	r30, 0xED	; 237
    371e:	f2 e0       	ldi	r31, 0x02	; 2
    3720:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    3722:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = '5';
    3724:	25 e3       	ldi	r18, 0x35	; 53
    3726:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
						menu_display_l = " SW5-    SW6-   ";
    3728:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
    372a:	0b ec       	ldi	r16, 0xCB	; 203
    372c:	12 e0       	ldi	r17, 0x02	; 2
							
							case CH5_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = '5';
								break;
    372e:	b1 c0       	rjmp	.+354    	; 0x3892 <menu+0x1d2e>
						}
						
					}
					else if (menu_input < 8)
    3730:	98 30       	cpi	r25, 0x08	; 8
    3732:	0c f0       	brlt	.+2      	; 0x3736 <menu+0x1bd2>
    3734:	9d c0       	rjmp	.+314    	; 0x3870 <menu+0x1d0c>
						// Display init
						menu_display_h = " SW5-    SW6-   ";
						menu_display_l = " SW7-    SW8-   ";
						
						// SW7 initial value
						switch (sw[6])
    3736:	40 91 e3 05 	lds	r20, 0x05E3	; 0x8005e3 <sw+0x6>
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	41 32       	cpi	r20, 0x21	; 33
    373e:	51 05       	cpc	r21, r1
    3740:	a0 f5       	brcc	.+104    	; 0x37aa <menu+0x1c46>
    3742:	fa 01       	movw	r30, r20
    3744:	e0 5e       	subi	r30, 0xE0	; 224
    3746:	fe 4f       	sbci	r31, 0xFE	; 254
    3748:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__tablejump2__>
						{
							case 0:
								menu_display_l[5] = 'N';
    374c:	ee ef       	ldi	r30, 0xFE	; 254
    374e:	f2 e0       	ldi	r31, 0x02	; 2
    3750:	a5 82       	std	Z+5, r10	; 0x05
								menu_display_l[6] = 'C';
    3752:	b6 82       	std	Z+6, r11	; 0x06
								menu_display_l[7] = ' ';
    3754:	47 82       	std	Z+7, r4	; 0x07
								break;
    3756:	29 c0       	rjmp	.+82     	; 0x37aa <menu+0x1c46>
							
							case CH5_SW:
								menu_display_l[5] = 'C';
    3758:	ee ef       	ldi	r30, 0xFE	; 254
    375a:	f2 e0       	ldi	r31, 0x02	; 2
    375c:	b5 82       	std	Z+5, r11	; 0x05
								menu_display_l[6] = 'H';
    375e:	28 e4       	ldi	r18, 0x48	; 72
    3760:	26 83       	std	Z+6, r18	; 0x06
								menu_display_l[7] = '5';
    3762:	25 e3       	ldi	r18, 0x35	; 53
    3764:	27 83       	std	Z+7, r18	; 0x07
								break;
    3766:	21 c0       	rjmp	.+66     	; 0x37aa <menu+0x1c46>
							
							case AIL_DR:
								menu_display_l[5] = 'D';
    3768:	ee ef       	ldi	r30, 0xFE	; 254
    376a:	f2 e0       	ldi	r31, 0x02	; 2
    376c:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    376e:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = 'A';
    3770:	21 e4       	ldi	r18, 0x41	; 65
    3772:	27 83       	std	Z+7, r18	; 0x07
								break;
    3774:	1a c0       	rjmp	.+52     	; 0x37aa <menu+0x1c46>
							
							case ELE_DR:
								menu_display_l[5] = 'D';
    3776:	ee ef       	ldi	r30, 0xFE	; 254
    3778:	f2 e0       	ldi	r31, 0x02	; 2
    377a:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    377c:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = 'E';
    377e:	25 e4       	ldi	r18, 0x45	; 69
    3780:	27 83       	std	Z+7, r18	; 0x07
								break;
    3782:	13 c0       	rjmp	.+38     	; 0x37aa <menu+0x1c46>
							
							case THR_DR:
								menu_display_l[5] = 'D';
    3784:	ee ef       	ldi	r30, 0xFE	; 254
    3786:	f2 e0       	ldi	r31, 0x02	; 2
    3788:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    378a:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = 'T';
    378c:	24 e5       	ldi	r18, 0x54	; 84
    378e:	27 83       	std	Z+7, r18	; 0x07
								break;
    3790:	0c c0       	rjmp	.+24     	; 0x37aa <menu+0x1c46>
							
							case RUD_DR:
								menu_display_l[5] = 'D';
    3792:	ee ef       	ldi	r30, 0xFE	; 254
    3794:	f2 e0       	ldi	r31, 0x02	; 2
    3796:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    3798:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = 'R';
    379a:	f7 82       	std	Z+7, r15	; 0x07
								break;
    379c:	06 c0       	rjmp	.+12     	; 0x37aa <menu+0x1c46>
							
							case CH5_DR:
								menu_display_l[5] = 'D';
    379e:	ee ef       	ldi	r30, 0xFE	; 254
    37a0:	f2 e0       	ldi	r31, 0x02	; 2
    37a2:	c5 82       	std	Z+5, r12	; 0x05
								menu_display_l[6] = 'R';
    37a4:	f6 82       	std	Z+6, r15	; 0x06
								menu_display_l[7] = '5';
    37a6:	25 e3       	ldi	r18, 0x35	; 53
    37a8:	27 83       	std	Z+7, r18	; 0x07
								break;
						}
						// SW8 initial value
						switch (sw[7])
    37aa:	40 91 e4 05 	lds	r20, 0x05E4	; 0x8005e4 <sw+0x7>
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	41 32       	cpi	r20, 0x21	; 33
    37b2:	51 05       	cpc	r21, r1
    37b4:	08 f0       	brcs	.+2      	; 0x37b8 <menu+0x1c54>
    37b6:	65 c0       	rjmp	.+202    	; 0x3882 <menu+0x1d1e>
    37b8:	fa 01       	movw	r30, r20
    37ba:	ef 5b       	subi	r30, 0xBF	; 191
    37bc:	fe 4f       	sbci	r31, 0xFE	; 254
    37be:	0c 94 ff 27 	jmp	0x4ffe	; 0x4ffe <__tablejump2__>
						{
							case 0:
								menu_display_l[13] = 'N';
    37c2:	ee ef       	ldi	r30, 0xFE	; 254
    37c4:	f2 e0       	ldi	r31, 0x02	; 2
    37c6:	a5 86       	std	Z+13, r10	; 0x0d
								menu_display_l[14] = 'C';
    37c8:	b6 86       	std	Z+14, r11	; 0x0e
								menu_display_l[15] = ' ';
    37ca:	47 86       	std	Z+15, r4	; 0x0f
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
						menu_display_l = " SW7-    SW8-   ";
    37cc:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
    37ce:	0d ee       	ldi	r16, 0xED	; 237
    37d0:	12 e0       	ldi	r17, 0x02	; 2
						{
							case 0:
								menu_display_l[13] = 'N';
								menu_display_l[14] = 'C';
								menu_display_l[15] = ' ';
								break;
    37d2:	5f c0       	rjmp	.+190    	; 0x3892 <menu+0x1d2e>
							
							case CH5_SW:
								menu_display_l[13] = 'C';
    37d4:	ee ef       	ldi	r30, 0xFE	; 254
    37d6:	f2 e0       	ldi	r31, 0x02	; 2
    37d8:	b5 86       	std	Z+13, r11	; 0x0d
								menu_display_l[14] = 'H';
    37da:	28 e4       	ldi	r18, 0x48	; 72
    37dc:	26 87       	std	Z+14, r18	; 0x0e
								menu_display_l[15] = '5';
    37de:	25 e3       	ldi	r18, 0x35	; 53
    37e0:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
						menu_display_l = " SW7-    SW8-   ";
    37e2:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
    37e4:	0d ee       	ldi	r16, 0xED	; 237
    37e6:	12 e0       	ldi	r17, 0x02	; 2
							
							case CH5_SW:
								menu_display_l[13] = 'C';
								menu_display_l[14] = 'H';
								menu_display_l[15] = '5';
								break;
    37e8:	54 c0       	rjmp	.+168    	; 0x3892 <menu+0x1d2e>
							
							case AIL_DR:
								menu_display_l[13] = 'D';
    37ea:	ee ef       	ldi	r30, 0xFE	; 254
    37ec:	f2 e0       	ldi	r31, 0x02	; 2
    37ee:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    37f0:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = 'A';
    37f2:	21 e4       	ldi	r18, 0x41	; 65
    37f4:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
						menu_display_l = " SW7-    SW8-   ";
    37f6:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
    37f8:	0d ee       	ldi	r16, 0xED	; 237
    37fa:	12 e0       	ldi	r17, 0x02	; 2
							
							case AIL_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'A';
								break;
    37fc:	4a c0       	rjmp	.+148    	; 0x3892 <menu+0x1d2e>
							
							case ELE_DR:
								menu_display_l[13] = 'D';
    37fe:	ee ef       	ldi	r30, 0xFE	; 254
    3800:	f2 e0       	ldi	r31, 0x02	; 2
    3802:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    3804:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = 'E';
    3806:	25 e4       	ldi	r18, 0x45	; 69
    3808:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
						menu_display_l = " SW7-    SW8-   ";
    380a:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
    380c:	0d ee       	ldi	r16, 0xED	; 237
    380e:	12 e0       	ldi	r17, 0x02	; 2
							
							case ELE_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'E';
								break;
    3810:	40 c0       	rjmp	.+128    	; 0x3892 <menu+0x1d2e>
							
							case THR_DR:
								menu_display_l[13] = 'D';
    3812:	ee ef       	ldi	r30, 0xFE	; 254
    3814:	f2 e0       	ldi	r31, 0x02	; 2
    3816:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    3818:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = 'T';
    381a:	24 e5       	ldi	r18, 0x54	; 84
    381c:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
						menu_display_l = " SW7-    SW8-   ";
    381e:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
    3820:	0d ee       	ldi	r16, 0xED	; 237
    3822:	12 e0       	ldi	r17, 0x02	; 2
							
							case THR_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'T';
								break;
    3824:	36 c0       	rjmp	.+108    	; 0x3892 <menu+0x1d2e>
							
							case RUD_DR:
								menu_display_l[13] = 'D';
    3826:	ee ef       	ldi	r30, 0xFE	; 254
    3828:	f2 e0       	ldi	r31, 0x02	; 2
    382a:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    382c:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = 'R';
    382e:	f7 86       	std	Z+15, r15	; 0x0f
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
						menu_display_l = " SW7-    SW8-   ";
    3830:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
    3832:	0d ee       	ldi	r16, 0xED	; 237
    3834:	12 e0       	ldi	r17, 0x02	; 2
							
							case RUD_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = 'R';
								break;
    3836:	2d c0       	rjmp	.+90     	; 0x3892 <menu+0x1d2e>
							
							case CH5_DR:
								menu_display_l[13] = 'D';
    3838:	ee ef       	ldi	r30, 0xFE	; 254
    383a:	f2 e0       	ldi	r31, 0x02	; 2
    383c:	c5 86       	std	Z+13, r12	; 0x0d
								menu_display_l[14] = 'R';
    383e:	f6 86       	std	Z+14, r15	; 0x0e
								menu_display_l[15] = '5';
    3840:	25 e3       	ldi	r18, 0x35	; 53
    3842:	27 87       	std	Z+15, r18	; 0x0f
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
						menu_display_l = " SW7-    SW8-   ";
    3844:	1f 01       	movw	r2, r30
						
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
    3846:	0d ee       	ldi	r16, 0xED	; 237
    3848:	12 e0       	ldi	r17, 0x02	; 2
							
							case CH5_DR:
								menu_display_l[13] = 'D';
								menu_display_l[14] = 'R';
								menu_display_l[15] = '5';
								break;
    384a:	23 c0       	rjmp	.+70     	; 0x3892 <menu+0x1d2e>
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
						menu_display_l = " SW3-    SW4-   ";
    384c:	0f 2e       	mov	r0, r31
    384e:	fb ec       	ldi	r31, 0xCB	; 203
    3850:	2f 2e       	mov	r2, r31
    3852:	f2 e0       	ldi	r31, 0x02	; 2
    3854:	3f 2e       	mov	r3, r31
    3856:	f0 2d       	mov	r31, r0
					
					// Display & stat /////////////////
					if (menu_input < 4)
					{
						// Display init
						menu_display_h = " SW1-    SW2-   ";
    3858:	0c ed       	ldi	r16, 0xDC	; 220
    385a:	12 e0       	ldi	r17, 0x02	; 2
    385c:	1a c0       	rjmp	.+52     	; 0x3892 <menu+0x1d2e>
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
						menu_display_l = " SW5-    SW6-   ";
    385e:	0f 2e       	mov	r0, r31
    3860:	fd ee       	ldi	r31, 0xED	; 237
    3862:	2f 2e       	mov	r2, r31
    3864:	f2 e0       	ldi	r31, 0x02	; 2
    3866:	3f 2e       	mov	r3, r31
    3868:	f0 2d       	mov	r31, r0
						
					}
					else if (menu_input < 6)
					{
						// Display init
						menu_display_h = " SW3-    SW4-   ";
    386a:	0b ec       	ldi	r16, 0xCB	; 203
    386c:	12 e0       	ldi	r17, 0x02	; 2
    386e:	11 c0       	rjmp	.+34     	; 0x3892 <menu+0x1d2e>
					}
					else
					{
						// Display init
						menu_display_h = " SW7-    SW8-   ";
						menu_display_l = " Exit           ";
    3870:	0f 2e       	mov	r0, r31
    3872:	f6 e6       	ldi	r31, 0x66	; 102
    3874:	2f 2e       	mov	r2, r31
    3876:	f2 e0       	ldi	r31, 0x02	; 2
    3878:	3f 2e       	mov	r3, r31
    387a:	f0 2d       	mov	r31, r0
						
					}
					else
					{
						// Display init
						menu_display_h = " SW7-    SW8-   ";
    387c:	0e ef       	ldi	r16, 0xFE	; 254
    387e:	12 e0       	ldi	r17, 0x02	; 2
    3880:	08 c0       	rjmp	.+16     	; 0x3892 <menu+0x1d2e>
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
						menu_display_l = " SW7-    SW8-   ";
    3882:	0f 2e       	mov	r0, r31
    3884:	fe ef       	ldi	r31, 0xFE	; 254
    3886:	2f 2e       	mov	r2, r31
    3888:	f2 e0       	ldi	r31, 0x02	; 2
    388a:	3f 2e       	mov	r3, r31
    388c:	f0 2d       	mov	r31, r0
						
					}
					else if (menu_input < 8)
					{
						// Display init
						menu_display_h = " SW5-    SW6-   ";
    388e:	0d ee       	ldi	r16, 0xED	; 237
    3890:	12 e0       	ldi	r17, 0x02	; 2
						menu_display_l = " Exit           ";
					}
					

					// Display & stat /////////////
					if (menu_input == 0)
    3892:	91 11       	cpse	r25, r1
    3894:	72 c0       	rjmp	.+228    	; 0x397a <menu+0x1e16>
					{
						// Cursor move
						menu_display_h[0] = '>';
    3896:	9e e3       	ldi	r25, 0x3E	; 62
    3898:	f8 01       	movw	r30, r16
    389a:	90 83       	st	Z, r25
						menu_display_h[8] = ' ';
    389c:	40 86       	std	Z+8, r4	; 0x08
						
						if (enter)
    389e:	88 23       	and	r24, r24
    38a0:	09 f4       	brne	.+2      	; 0x38a4 <menu+0x1d40>
    38a2:	a4 c3       	rjmp	.+1864   	; 0x3fec <menu+0x2488>
								}
								else if (menu_input == 5)
								{
									menu_display_h[5] = 'D';
									menu_display_h[6] = 'R';
									menu_display_h[7] = '5';
    38a4:	0f 2e       	mov	r0, r31
    38a6:	f5 e3       	ldi	r31, 0x35	; 53
    38a8:	df 2e       	mov	r13, r31
    38aa:	f0 2d       	mov	r31, r0
									sw[0] = CH5_DR;
    38ac:	68 94       	set
    38ae:	ee 24       	eor	r14, r14
    38b0:	e4 f8       	bld	r14, 4
								else if (menu_input == 2)
								{
									menu_display_h[5] = 'D';
									menu_display_h[6] = 'R';
									menu_display_h[7] = 'A';
									sw[0] = AIL_DR;
    38b2:	88 24       	eor	r8, r8
    38b4:	83 94       	inc	r8
									sw[0] = 0;
								}
								else if (menu_input == 1)
								{
									menu_display_h[5] = 'C';
									menu_display_h[6] = 'H';
    38b6:	0f 2e       	mov	r0, r31
    38b8:	f8 e4       	ldi	r31, 0x48	; 72
    38ba:	9f 2e       	mov	r9, r31
    38bc:	f0 2d       	mov	r31, r0
						
						if (enter)
						{
							while (1)
							{
								enter = menu_read();
    38be:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    38c2:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    38c6:	99 23       	and	r25, r25
    38c8:	1c f4       	brge	.+6      	; 0x38d0 <menu+0x1d6c>
									menu_input = 0;
    38ca:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    38ce:	08 c0       	rjmp	.+16     	; 0x38e0 <menu+0x1d7c>
								else if (menu_input > 5)
    38d0:	96 30       	cpi	r25, 0x06	; 6
    38d2:	24 f0       	brlt	.+8      	; 0x38dc <menu+0x1d78>
									menu_input = 5;
    38d4:	95 e0       	ldi	r25, 0x05	; 5
    38d6:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    38da:	38 c0       	rjmp	.+112    	; 0x394c <menu+0x1de8>
								
								
								if (menu_input == 0)
    38dc:	91 11       	cpse	r25, r1
    38de:	08 c0       	rjmp	.+16     	; 0x38f0 <menu+0x1d8c>
								{
									menu_display_h[5] = 'N';
    38e0:	f8 01       	movw	r30, r16
    38e2:	a5 82       	std	Z+5, r10	; 0x05
									menu_display_h[6] = 'C';
    38e4:	b6 82       	std	Z+6, r11	; 0x06
									menu_display_h[7] = ' ';
    38e6:	47 82       	std	Z+7, r4	; 0x07
									sw[0] = 0;
    38e8:	ed ed       	ldi	r30, 0xDD	; 221
    38ea:	f5 e0       	ldi	r31, 0x05	; 5
    38ec:	10 82       	st	Z, r1
    38ee:	35 c0       	rjmp	.+106    	; 0x395a <menu+0x1df6>
								}
								else if (menu_input == 1)
    38f0:	91 30       	cpi	r25, 0x01	; 1
    38f2:	41 f4       	brne	.+16     	; 0x3904 <menu+0x1da0>
								{
									menu_display_h[5] = 'C';
    38f4:	f8 01       	movw	r30, r16
    38f6:	b5 82       	std	Z+5, r11	; 0x05
									menu_display_h[6] = 'H';
    38f8:	96 82       	std	Z+6, r9	; 0x06
									menu_display_h[7] = '5';
    38fa:	d7 82       	std	Z+7, r13	; 0x07
									sw[0] = CH5_SW;
    38fc:	ed ed       	ldi	r30, 0xDD	; 221
    38fe:	f5 e0       	ldi	r31, 0x05	; 5
    3900:	40 82       	st	Z, r4
    3902:	2b c0       	rjmp	.+86     	; 0x395a <menu+0x1df6>
								}
								else if (menu_input == 2)
    3904:	92 30       	cpi	r25, 0x02	; 2
    3906:	49 f4       	brne	.+18     	; 0x391a <menu+0x1db6>
								{
									menu_display_h[5] = 'D';
    3908:	f8 01       	movw	r30, r16
    390a:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_h[6] = 'R';
    390c:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_h[7] = 'A';
    390e:	21 e4       	ldi	r18, 0x41	; 65
    3910:	27 83       	std	Z+7, r18	; 0x07
									sw[0] = AIL_DR;
    3912:	ed ed       	ldi	r30, 0xDD	; 221
    3914:	f5 e0       	ldi	r31, 0x05	; 5
    3916:	80 82       	st	Z, r8
    3918:	20 c0       	rjmp	.+64     	; 0x395a <menu+0x1df6>
								}
								else if (menu_input == 3)
    391a:	93 30       	cpi	r25, 0x03	; 3
    391c:	51 f4       	brne	.+20     	; 0x3932 <menu+0x1dce>
								{
									menu_display_h[5] = 'D';
    391e:	f8 01       	movw	r30, r16
    3920:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_h[6] = 'R';
    3922:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_h[7] = 'E';
    3924:	25 e4       	ldi	r18, 0x45	; 69
    3926:	27 83       	std	Z+7, r18	; 0x07
									sw[0] = ELE_DR;
    3928:	22 e0       	ldi	r18, 0x02	; 2
    392a:	ed ed       	ldi	r30, 0xDD	; 221
    392c:	f5 e0       	ldi	r31, 0x05	; 5
    392e:	20 83       	st	Z, r18
    3930:	14 c0       	rjmp	.+40     	; 0x395a <menu+0x1df6>
								}
								else if (menu_input == 4)
    3932:	94 30       	cpi	r25, 0x04	; 4
    3934:	49 f4       	brne	.+18     	; 0x3948 <menu+0x1de4>
								{
									menu_display_h[5] = 'D';
    3936:	f8 01       	movw	r30, r16
    3938:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_h[6] = 'R';
    393a:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_h[7] = 'R';
    393c:	f7 82       	std	Z+7, r15	; 0x07
									sw[0] = RUD_DR;
    393e:	28 e0       	ldi	r18, 0x08	; 8
    3940:	ed ed       	ldi	r30, 0xDD	; 221
    3942:	f5 e0       	ldi	r31, 0x05	; 5
    3944:	20 83       	st	Z, r18
    3946:	09 c0       	rjmp	.+18     	; 0x395a <menu+0x1df6>
								}
								else if (menu_input == 5)
    3948:	95 30       	cpi	r25, 0x05	; 5
    394a:	39 f4       	brne	.+14     	; 0x395a <menu+0x1df6>
								{
									menu_display_h[5] = 'D';
    394c:	f8 01       	movw	r30, r16
    394e:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_h[6] = 'R';
    3950:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_h[7] = '5';
    3952:	d7 82       	std	Z+7, r13	; 0x07
									sw[0] = CH5_DR;
    3954:	ed ed       	ldi	r30, 0xDD	; 221
    3956:	f5 e0       	ldi	r31, 0x05	; 5
    3958:	e0 82       	st	Z, r14
								}
								
								
								// Exit
								if (enter)
    395a:	88 23       	and	r24, r24
    395c:	19 f0       	breq	.+6      	; 0x3964 <menu+0x1e00>
								{
									menu_input = 0;
    395e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
									break;
    3962:	44 c3       	rjmp	.+1672   	; 0x3fec <menu+0x2488>
								}
								
								
								// LCD drive
								LCD_home();
    3964:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_string(menu_display_h, 16);
    3968:	6e 2d       	mov	r22, r14
    396a:	c8 01       	movw	r24, r16
    396c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								LCD_NWL();
    3970:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								
								// Buzzer drive
								buzzer_switch();
    3974:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    3978:	a2 cf       	rjmp	.-188    	; 0x38be <menu+0x1d5a>
							
						} // if(enter)
					} // if(menu_input == 0)
					
					else if (menu_input == 1)
    397a:	91 30       	cpi	r25, 0x01	; 1
    397c:	09 f0       	breq	.+2      	; 0x3980 <menu+0x1e1c>
    397e:	71 c0       	rjmp	.+226    	; 0x3a62 <menu+0x1efe>
					{
						// Cursor move
						menu_display_h[8] = '>';
    3980:	9e e3       	ldi	r25, 0x3E	; 62
    3982:	f8 01       	movw	r30, r16
    3984:	90 87       	std	Z+8, r25	; 0x08
						menu_display_h[0] = ' ';
    3986:	40 82       	st	Z, r4
						menu_display_l[0] = ' ';
    3988:	f1 01       	movw	r30, r2
    398a:	40 82       	st	Z, r4
						
						if (enter)
    398c:	88 23       	and	r24, r24
    398e:	09 f4       	brne	.+2      	; 0x3992 <menu+0x1e2e>
    3990:	2d c3       	rjmp	.+1626   	; 0x3fec <menu+0x2488>
						{
							menu_input = 0;
    3992:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								else if (menu_input == 5)
								{
									menu_display_h[13] = 'D';
									menu_display_h[14] = 'R';
									menu_display_h[15] = '5';
    3996:	0f 2e       	mov	r0, r31
    3998:	f5 e3       	ldi	r31, 0x35	; 53
    399a:	df 2e       	mov	r13, r31
    399c:	f0 2d       	mov	r31, r0
									sw[1] = CH5_DR;
    399e:	68 94       	set
    39a0:	ee 24       	eor	r14, r14
    39a2:	e4 f8       	bld	r14, 4
								}
								else if (menu_input == 2)
								{
									menu_display_h[13] = 'D';
									menu_display_h[14] = 'R';
									menu_display_h[15] = 'A';
    39a4:	0f 2e       	mov	r0, r31
    39a6:	f1 e4       	ldi	r31, 0x41	; 65
    39a8:	8f 2e       	mov	r8, r31
    39aa:	f0 2d       	mov	r31, r0
									sw[1] = AIL_DR;
    39ac:	99 24       	eor	r9, r9
    39ae:	93 94       	inc	r9
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    39b0:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    39b4:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    39b8:	99 23       	and	r25, r25
    39ba:	1c f4       	brge	.+6      	; 0x39c2 <menu+0x1e5e>
									menu_input = 0;
    39bc:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    39c0:	08 c0       	rjmp	.+16     	; 0x39d2 <menu+0x1e6e>
								else if (menu_input > 5)
    39c2:	96 30       	cpi	r25, 0x06	; 6
    39c4:	24 f0       	brlt	.+8      	; 0x39ce <menu+0x1e6a>
									menu_input = 5;
    39c6:	95 e0       	ldi	r25, 0x05	; 5
    39c8:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    39cc:	33 c0       	rjmp	.+102    	; 0x3a34 <menu+0x1ed0>
								
								
								// if menu button is pressed
								if (menu_input == 0)
    39ce:	91 11       	cpse	r25, r1
    39d0:	07 c0       	rjmp	.+14     	; 0x39e0 <menu+0x1e7c>
								{
									menu_display_h[13] = 'N';
    39d2:	f8 01       	movw	r30, r16
    39d4:	a5 86       	std	Z+13, r10	; 0x0d
									menu_display_h[14] = 'C';
    39d6:	b6 86       	std	Z+14, r11	; 0x0e
									menu_display_h[15] = ' ';
    39d8:	47 86       	std	Z+15, r4	; 0x0f
									sw[1] = 0;
    39da:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <sw+0x1>
    39de:	30 c0       	rjmp	.+96     	; 0x3a40 <menu+0x1edc>
								}
								else if (menu_input == 1)
    39e0:	91 30       	cpi	r25, 0x01	; 1
    39e2:	41 f4       	brne	.+16     	; 0x39f4 <menu+0x1e90>
								{
									menu_display_h[13] = 'C';
    39e4:	f8 01       	movw	r30, r16
    39e6:	b5 86       	std	Z+13, r11	; 0x0d
									menu_display_h[14] = 'H';
    39e8:	98 e4       	ldi	r25, 0x48	; 72
    39ea:	96 87       	std	Z+14, r25	; 0x0e
									menu_display_h[15] = '5';
    39ec:	d7 86       	std	Z+15, r13	; 0x0f
									sw[1] = CH5_SW;
    39ee:	40 92 de 05 	sts	0x05DE, r4	; 0x8005de <sw+0x1>
    39f2:	26 c0       	rjmp	.+76     	; 0x3a40 <menu+0x1edc>
								}
								else if (menu_input == 2)
    39f4:	92 30       	cpi	r25, 0x02	; 2
    39f6:	39 f4       	brne	.+14     	; 0x3a06 <menu+0x1ea2>
								{
									menu_display_h[13] = 'D';
    39f8:	f8 01       	movw	r30, r16
    39fa:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_h[14] = 'R';
    39fc:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_h[15] = 'A';
    39fe:	87 86       	std	Z+15, r8	; 0x0f
									sw[1] = AIL_DR;
    3a00:	90 92 de 05 	sts	0x05DE, r9	; 0x8005de <sw+0x1>
    3a04:	1d c0       	rjmp	.+58     	; 0x3a40 <menu+0x1edc>
								}
								else if (menu_input == 3)
    3a06:	93 30       	cpi	r25, 0x03	; 3
    3a08:	49 f4       	brne	.+18     	; 0x3a1c <menu+0x1eb8>
								{
									menu_display_h[13] = 'D';
    3a0a:	f8 01       	movw	r30, r16
    3a0c:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_h[14] = 'R';
    3a0e:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_h[15] = 'E';
    3a10:	25 e4       	ldi	r18, 0x45	; 69
    3a12:	27 87       	std	Z+15, r18	; 0x0f
									sw[1] = ELE_DR;
    3a14:	32 e0       	ldi	r19, 0x02	; 2
    3a16:	30 93 de 05 	sts	0x05DE, r19	; 0x8005de <sw+0x1>
    3a1a:	12 c0       	rjmp	.+36     	; 0x3a40 <menu+0x1edc>
								}
								else if (menu_input == 4)
    3a1c:	94 30       	cpi	r25, 0x04	; 4
    3a1e:	41 f4       	brne	.+16     	; 0x3a30 <menu+0x1ecc>
								{
									menu_display_h[13] = 'D';
    3a20:	f8 01       	movw	r30, r16
    3a22:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_h[14] = 'R';
    3a24:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_h[15] = 'R';
    3a26:	f7 86       	std	Z+15, r15	; 0x0f
									sw[1] = RUD_DR;
    3a28:	f8 e0       	ldi	r31, 0x08	; 8
    3a2a:	f0 93 de 05 	sts	0x05DE, r31	; 0x8005de <sw+0x1>
    3a2e:	08 c0       	rjmp	.+16     	; 0x3a40 <menu+0x1edc>
								}
								else if (menu_input == 5)
    3a30:	95 30       	cpi	r25, 0x05	; 5
    3a32:	31 f4       	brne	.+12     	; 0x3a40 <menu+0x1edc>
								{
									menu_display_h[13] = 'D';
    3a34:	f8 01       	movw	r30, r16
    3a36:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_h[14] = 'R';
    3a38:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_h[15] = '5';
    3a3a:	d7 86       	std	Z+15, r13	; 0x0f
									sw[1] = CH5_DR;
    3a3c:	e0 92 de 05 	sts	0x05DE, r14	; 0x8005de <sw+0x1>
								}
								
								// Exit
								if (enter)
    3a40:	88 23       	and	r24, r24
    3a42:	21 f0       	breq	.+8      	; 0x3a4c <menu+0x1ee8>
								{
									menu_input = 1;
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    3a4a:	d0 c2       	rjmp	.+1440   	; 0x3fec <menu+0x2488>
								}
								
								
								// LCD drive
								LCD_home();
    3a4c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_string(menu_display_h, 16);
    3a50:	6e 2d       	mov	r22, r14
    3a52:	c8 01       	movw	r24, r16
    3a54:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								LCD_NWL();
    3a58:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								
								// Buzzer drive
								buzzer_switch();
    3a5c:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    3a60:	a7 cf       	rjmp	.-178    	; 0x39b0 <menu+0x1e4c>
						} // if(enter)
						
					} // else if (menu_input == 1)
					
					else if (menu_input == 2)
    3a62:	92 30       	cpi	r25, 0x02	; 2
    3a64:	09 f0       	breq	.+2      	; 0x3a68 <menu+0x1f04>
    3a66:	72 c0       	rjmp	.+228    	; 0x3b4c <menu+0x1fe8>
					{
						// Cursor move
						menu_display_l[0] = '>';
    3a68:	9e e3       	ldi	r25, 0x3E	; 62
    3a6a:	f1 01       	movw	r30, r2
    3a6c:	90 83       	st	Z, r25
						menu_display_h[8] = ' ';
    3a6e:	f8 01       	movw	r30, r16
    3a70:	40 86       	std	Z+8, r4	; 0x08
						menu_display_l[8] = ' ';
    3a72:	f1 01       	movw	r30, r2
    3a74:	40 86       	std	Z+8, r4	; 0x08
						
						if (enter)
    3a76:	88 23       	and	r24, r24
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <menu+0x1f18>
    3a7a:	b8 c2       	rjmp	.+1392   	; 0x3fec <menu+0x2488>
						{
							menu_input = 0;
    3a7c:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								else if (menu_input == 5)
								{
									menu_display_l[5] = 'D';
									menu_display_l[6] = 'R';
									menu_display_l[7] = '5';
    3a80:	0f 2e       	mov	r0, r31
    3a82:	f5 e3       	ldi	r31, 0x35	; 53
    3a84:	df 2e       	mov	r13, r31
    3a86:	f0 2d       	mov	r31, r0
									sw[2] = CH5_DR;
    3a88:	68 94       	set
    3a8a:	ee 24       	eor	r14, r14
    3a8c:	e4 f8       	bld	r14, 4
								}
								else if (menu_input == 2)
								{
									menu_display_l[5] = 'D';
									menu_display_l[6] = 'R';
									menu_display_l[7] = 'A';
    3a8e:	0f 2e       	mov	r0, r31
    3a90:	f1 e4       	ldi	r31, 0x41	; 65
    3a92:	8f 2e       	mov	r8, r31
    3a94:	f0 2d       	mov	r31, r0
									sw[2] = AIL_DR;
    3a96:	99 24       	eor	r9, r9
    3a98:	93 94       	inc	r9
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    3a9a:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    3a9e:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    3aa2:	99 23       	and	r25, r25
    3aa4:	1c f4       	brge	.+6      	; 0x3aac <menu+0x1f48>
									menu_input = 0;
    3aa6:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    3aaa:	08 c0       	rjmp	.+16     	; 0x3abc <menu+0x1f58>
								else if (menu_input > 5)
    3aac:	96 30       	cpi	r25, 0x06	; 6
    3aae:	24 f0       	brlt	.+8      	; 0x3ab8 <menu+0x1f54>
									menu_input = 5;
    3ab0:	95 e0       	ldi	r25, 0x05	; 5
    3ab2:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    3ab6:	33 c0       	rjmp	.+102    	; 0x3b1e <menu+0x1fba>
								
								
								if (menu_input == 0)
    3ab8:	91 11       	cpse	r25, r1
    3aba:	07 c0       	rjmp	.+14     	; 0x3aca <menu+0x1f66>
								{
									menu_display_l[5] = 'N';
    3abc:	f1 01       	movw	r30, r2
    3abe:	a5 82       	std	Z+5, r10	; 0x05
									menu_display_l[6] = 'C';
    3ac0:	b6 82       	std	Z+6, r11	; 0x06
									menu_display_l[7] = ' ';
    3ac2:	47 82       	std	Z+7, r4	; 0x07
									sw[2] = 0;
    3ac4:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <sw+0x2>
    3ac8:	30 c0       	rjmp	.+96     	; 0x3b2a <menu+0x1fc6>
								}
								else if (menu_input == 1)
    3aca:	91 30       	cpi	r25, 0x01	; 1
    3acc:	41 f4       	brne	.+16     	; 0x3ade <menu+0x1f7a>
								{
									menu_display_l[5] = 'C';
    3ace:	f1 01       	movw	r30, r2
    3ad0:	b5 82       	std	Z+5, r11	; 0x05
									menu_display_l[6] = 'H';
    3ad2:	98 e4       	ldi	r25, 0x48	; 72
    3ad4:	96 83       	std	Z+6, r25	; 0x06
									menu_display_l[7] = '5';
    3ad6:	d7 82       	std	Z+7, r13	; 0x07
									sw[2] = CH5_SW;
    3ad8:	40 92 df 05 	sts	0x05DF, r4	; 0x8005df <sw+0x2>
    3adc:	26 c0       	rjmp	.+76     	; 0x3b2a <menu+0x1fc6>
								}
								else if (menu_input == 2)
    3ade:	92 30       	cpi	r25, 0x02	; 2
    3ae0:	39 f4       	brne	.+14     	; 0x3af0 <menu+0x1f8c>
								{
									menu_display_l[5] = 'D';
    3ae2:	f1 01       	movw	r30, r2
    3ae4:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3ae6:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = 'A';
    3ae8:	87 82       	std	Z+7, r8	; 0x07
									sw[2] = AIL_DR;
    3aea:	90 92 df 05 	sts	0x05DF, r9	; 0x8005df <sw+0x2>
    3aee:	1d c0       	rjmp	.+58     	; 0x3b2a <menu+0x1fc6>
								}
								else if (menu_input == 3)
    3af0:	93 30       	cpi	r25, 0x03	; 3
    3af2:	49 f4       	brne	.+18     	; 0x3b06 <menu+0x1fa2>
								{
									menu_display_l[5] = 'D';
    3af4:	f1 01       	movw	r30, r2
    3af6:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3af8:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = 'E';
    3afa:	25 e4       	ldi	r18, 0x45	; 69
    3afc:	27 83       	std	Z+7, r18	; 0x07
									sw[2] = ELE_DR;
    3afe:	32 e0       	ldi	r19, 0x02	; 2
    3b00:	30 93 df 05 	sts	0x05DF, r19	; 0x8005df <sw+0x2>
    3b04:	12 c0       	rjmp	.+36     	; 0x3b2a <menu+0x1fc6>
								}
								else if (menu_input == 4)
    3b06:	94 30       	cpi	r25, 0x04	; 4
    3b08:	41 f4       	brne	.+16     	; 0x3b1a <menu+0x1fb6>
								{
									menu_display_l[5] = 'D';
    3b0a:	f1 01       	movw	r30, r2
    3b0c:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3b0e:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = 'R';
    3b10:	f7 82       	std	Z+7, r15	; 0x07
									sw[2] = RUD_DR;
    3b12:	f8 e0       	ldi	r31, 0x08	; 8
    3b14:	f0 93 df 05 	sts	0x05DF, r31	; 0x8005df <sw+0x2>
    3b18:	08 c0       	rjmp	.+16     	; 0x3b2a <menu+0x1fc6>
								}
								else if (menu_input == 5)
    3b1a:	95 30       	cpi	r25, 0x05	; 5
    3b1c:	31 f4       	brne	.+12     	; 0x3b2a <menu+0x1fc6>
								{
									menu_display_l[5] = 'D';
    3b1e:	f1 01       	movw	r30, r2
    3b20:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3b22:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = '5';
    3b24:	d7 82       	std	Z+7, r13	; 0x07
									sw[2] = CH5_DR;
    3b26:	e0 92 df 05 	sts	0x05DF, r14	; 0x8005df <sw+0x2>
								}
								
								// Exit
								if (enter)
    3b2a:	88 23       	and	r24, r24
    3b2c:	21 f0       	breq	.+8      	; 0x3b36 <menu+0x1fd2>
								{
									menu_input = 2;
    3b2e:	82 e0       	ldi	r24, 0x02	; 2
    3b30:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    3b34:	5b c2       	rjmp	.+1206   	; 0x3fec <menu+0x2488>
								}
								
								
								// LCD drive
								LCD_home();
    3b36:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    3b3a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    3b3e:	6e 2d       	mov	r22, r14
    3b40:	c1 01       	movw	r24, r2
    3b42:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    3b46:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    3b4a:	a7 cf       	rjmp	.-178    	; 0x3a9a <menu+0x1f36>
						} // if(enter)
						
					} // else if (menu_input == 2)
					
					else if (menu_input == 3)
    3b4c:	93 30       	cpi	r25, 0x03	; 3
    3b4e:	09 f0       	breq	.+2      	; 0x3b52 <menu+0x1fee>
    3b50:	6f c0       	rjmp	.+222    	; 0x3c30 <menu+0x20cc>
					{
						// Cursor move
						menu_display_l[8] = '>';
    3b52:	9e e3       	ldi	r25, 0x3E	; 62
    3b54:	f1 01       	movw	r30, r2
    3b56:	90 87       	std	Z+8, r25	; 0x08
						menu_display_l[0] = ' ';
    3b58:	40 82       	st	Z, r4
						
						if (enter)
    3b5a:	88 23       	and	r24, r24
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <menu+0x1ffc>
    3b5e:	46 c2       	rjmp	.+1164   	; 0x3fec <menu+0x2488>
						{
							menu_input = 0;
    3b60:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								else if (menu_input == 5)
								{
									menu_display_l[13] = 'D';
									menu_display_l[14] = 'R';
									menu_display_l[15] = '5';
    3b64:	0f 2e       	mov	r0, r31
    3b66:	f5 e3       	ldi	r31, 0x35	; 53
    3b68:	df 2e       	mov	r13, r31
    3b6a:	f0 2d       	mov	r31, r0
									sw[3] = CH5_DR;
    3b6c:	68 94       	set
    3b6e:	ee 24       	eor	r14, r14
    3b70:	e4 f8       	bld	r14, 4
								}
								else if (menu_input == 2)
								{
									menu_display_l[13] = 'D';
									menu_display_l[14] = 'R';
									menu_display_l[15] = 'A';
    3b72:	0f 2e       	mov	r0, r31
    3b74:	f1 e4       	ldi	r31, 0x41	; 65
    3b76:	8f 2e       	mov	r8, r31
    3b78:	f0 2d       	mov	r31, r0
									sw[3] = AIL_DR;
    3b7a:	99 24       	eor	r9, r9
    3b7c:	93 94       	inc	r9
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    3b7e:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    3b82:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    3b86:	99 23       	and	r25, r25
    3b88:	1c f4       	brge	.+6      	; 0x3b90 <menu+0x202c>
									menu_input = 0;
    3b8a:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    3b8e:	08 c0       	rjmp	.+16     	; 0x3ba0 <menu+0x203c>
								else if (menu_input > 5)
    3b90:	96 30       	cpi	r25, 0x06	; 6
    3b92:	24 f0       	brlt	.+8      	; 0x3b9c <menu+0x2038>
									menu_input = 5;
    3b94:	95 e0       	ldi	r25, 0x05	; 5
    3b96:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    3b9a:	33 c0       	rjmp	.+102    	; 0x3c02 <menu+0x209e>
								
								
								if (menu_input == 0)
    3b9c:	91 11       	cpse	r25, r1
    3b9e:	07 c0       	rjmp	.+14     	; 0x3bae <menu+0x204a>
								{
									menu_display_l[13] = 'N';
    3ba0:	f1 01       	movw	r30, r2
    3ba2:	a5 86       	std	Z+13, r10	; 0x0d
									menu_display_l[14] = 'C';
    3ba4:	b6 86       	std	Z+14, r11	; 0x0e
									menu_display_l[15] = ' ';
    3ba6:	47 86       	std	Z+15, r4	; 0x0f
									sw[3] = 0;
    3ba8:	10 92 e0 05 	sts	0x05E0, r1	; 0x8005e0 <sw+0x3>
    3bac:	30 c0       	rjmp	.+96     	; 0x3c0e <menu+0x20aa>
								}
								else if (menu_input == 1)
    3bae:	91 30       	cpi	r25, 0x01	; 1
    3bb0:	41 f4       	brne	.+16     	; 0x3bc2 <menu+0x205e>
								{
									menu_display_l[13] = 'C';
    3bb2:	f1 01       	movw	r30, r2
    3bb4:	b5 86       	std	Z+13, r11	; 0x0d
									menu_display_l[14] = 'H';
    3bb6:	98 e4       	ldi	r25, 0x48	; 72
    3bb8:	96 87       	std	Z+14, r25	; 0x0e
									menu_display_l[15] = '5';
    3bba:	d7 86       	std	Z+15, r13	; 0x0f
									sw[3] = CH5_SW;
    3bbc:	40 92 e0 05 	sts	0x05E0, r4	; 0x8005e0 <sw+0x3>
    3bc0:	26 c0       	rjmp	.+76     	; 0x3c0e <menu+0x20aa>
								}
								else if (menu_input == 2)
    3bc2:	92 30       	cpi	r25, 0x02	; 2
    3bc4:	39 f4       	brne	.+14     	; 0x3bd4 <menu+0x2070>
								{
									menu_display_l[13] = 'D';
    3bc6:	f1 01       	movw	r30, r2
    3bc8:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3bca:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = 'A';
    3bcc:	87 86       	std	Z+15, r8	; 0x0f
									sw[3] = AIL_DR;
    3bce:	90 92 e0 05 	sts	0x05E0, r9	; 0x8005e0 <sw+0x3>
    3bd2:	1d c0       	rjmp	.+58     	; 0x3c0e <menu+0x20aa>
								}
								else if (menu_input == 3)
    3bd4:	93 30       	cpi	r25, 0x03	; 3
    3bd6:	49 f4       	brne	.+18     	; 0x3bea <menu+0x2086>
								{
									menu_display_l[13] = 'D';
    3bd8:	f1 01       	movw	r30, r2
    3bda:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3bdc:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = 'E';
    3bde:	25 e4       	ldi	r18, 0x45	; 69
    3be0:	27 87       	std	Z+15, r18	; 0x0f
									sw[3] = ELE_DR;
    3be2:	32 e0       	ldi	r19, 0x02	; 2
    3be4:	30 93 e0 05 	sts	0x05E0, r19	; 0x8005e0 <sw+0x3>
    3be8:	12 c0       	rjmp	.+36     	; 0x3c0e <menu+0x20aa>
								}
								else if (menu_input == 4)
    3bea:	94 30       	cpi	r25, 0x04	; 4
    3bec:	41 f4       	brne	.+16     	; 0x3bfe <menu+0x209a>
								{
									menu_display_l[13] = 'D';
    3bee:	f1 01       	movw	r30, r2
    3bf0:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3bf2:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = 'R';
    3bf4:	f7 86       	std	Z+15, r15	; 0x0f
									sw[3] = RUD_DR;
    3bf6:	f8 e0       	ldi	r31, 0x08	; 8
    3bf8:	f0 93 e0 05 	sts	0x05E0, r31	; 0x8005e0 <sw+0x3>
    3bfc:	08 c0       	rjmp	.+16     	; 0x3c0e <menu+0x20aa>
								}
								else if (menu_input == 5)
    3bfe:	95 30       	cpi	r25, 0x05	; 5
    3c00:	31 f4       	brne	.+12     	; 0x3c0e <menu+0x20aa>
								{
									menu_display_l[13] = 'D';
    3c02:	f1 01       	movw	r30, r2
    3c04:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3c06:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = '5';
    3c08:	d7 86       	std	Z+15, r13	; 0x0f
									sw[3] = CH5_DR;
    3c0a:	e0 92 e0 05 	sts	0x05E0, r14	; 0x8005e0 <sw+0x3>
								}
								
								// Exit
								if (enter)
    3c0e:	88 23       	and	r24, r24
    3c10:	21 f0       	breq	.+8      	; 0x3c1a <menu+0x20b6>
								{
									menu_input = 3;
    3c12:	83 e0       	ldi	r24, 0x03	; 3
    3c14:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    3c18:	e9 c1       	rjmp	.+978    	; 0x3fec <menu+0x2488>
								}
								
								
								// LCD drive
								LCD_home();
    3c1a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    3c1e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    3c22:	6e 2d       	mov	r22, r14
    3c24:	c1 01       	movw	r24, r2
    3c26:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    3c2a:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    3c2e:	a7 cf       	rjmp	.-178    	; 0x3b7e <menu+0x201a>
						} // if(enter)
						
					} // else if (menu_input == 3)
					
					else if (menu_input == 4)
    3c30:	94 30       	cpi	r25, 0x04	; 4
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <menu+0x20d2>
    3c34:	71 c0       	rjmp	.+226    	; 0x3d18 <menu+0x21b4>
					{
						// Cursor move
						menu_display_h[8] = ' ';
    3c36:	f8 01       	movw	r30, r16
    3c38:	40 86       	std	Z+8, r4	; 0x08
						menu_display_l[0] = '>';
    3c3a:	9e e3       	ldi	r25, 0x3E	; 62
    3c3c:	f1 01       	movw	r30, r2
    3c3e:	90 83       	st	Z, r25
						menu_display_l[8] = ' ';
    3c40:	40 86       	std	Z+8, r4	; 0x08
						
						if (enter)
    3c42:	88 23       	and	r24, r24
    3c44:	09 f4       	brne	.+2      	; 0x3c48 <menu+0x20e4>
    3c46:	d2 c1       	rjmp	.+932    	; 0x3fec <menu+0x2488>
						{
							menu_input = 0;
    3c48:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								else if (menu_input == 5)
								{
									menu_display_l[5] = 'D';
									menu_display_l[6] = 'R';
									menu_display_l[7] = '5';
    3c4c:	0f 2e       	mov	r0, r31
    3c4e:	f5 e3       	ldi	r31, 0x35	; 53
    3c50:	df 2e       	mov	r13, r31
    3c52:	f0 2d       	mov	r31, r0
									sw[4] = CH5_DR;
    3c54:	68 94       	set
    3c56:	ee 24       	eor	r14, r14
    3c58:	e4 f8       	bld	r14, 4
								}
								else if (menu_input == 2)
								{
									menu_display_l[5] = 'D';
									menu_display_l[6] = 'R';
									menu_display_l[7] = 'A';
    3c5a:	0f 2e       	mov	r0, r31
    3c5c:	f1 e4       	ldi	r31, 0x41	; 65
    3c5e:	8f 2e       	mov	r8, r31
    3c60:	f0 2d       	mov	r31, r0
									sw[4] = AIL_DR;
    3c62:	99 24       	eor	r9, r9
    3c64:	93 94       	inc	r9
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    3c66:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    3c6a:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    3c6e:	99 23       	and	r25, r25
    3c70:	1c f4       	brge	.+6      	; 0x3c78 <menu+0x2114>
									menu_input = 0;
    3c72:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    3c76:	08 c0       	rjmp	.+16     	; 0x3c88 <menu+0x2124>
								else if (menu_input > 5)
    3c78:	96 30       	cpi	r25, 0x06	; 6
    3c7a:	24 f0       	brlt	.+8      	; 0x3c84 <menu+0x2120>
									menu_input = 5;
    3c7c:	95 e0       	ldi	r25, 0x05	; 5
    3c7e:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    3c82:	33 c0       	rjmp	.+102    	; 0x3cea <menu+0x2186>
								
								
								if (menu_input == 0)
    3c84:	91 11       	cpse	r25, r1
    3c86:	07 c0       	rjmp	.+14     	; 0x3c96 <menu+0x2132>
								{
									menu_display_l[5] = 'N';
    3c88:	f1 01       	movw	r30, r2
    3c8a:	a5 82       	std	Z+5, r10	; 0x05
									menu_display_l[6] = 'C';
    3c8c:	b6 82       	std	Z+6, r11	; 0x06
									menu_display_l[7] = ' ';
    3c8e:	47 82       	std	Z+7, r4	; 0x07
									sw[4] = 0;
    3c90:	10 92 e1 05 	sts	0x05E1, r1	; 0x8005e1 <sw+0x4>
    3c94:	30 c0       	rjmp	.+96     	; 0x3cf6 <menu+0x2192>
								}
								else if (menu_input == 1)
    3c96:	91 30       	cpi	r25, 0x01	; 1
    3c98:	41 f4       	brne	.+16     	; 0x3caa <menu+0x2146>
								{
									menu_display_l[5] = 'C';
    3c9a:	f1 01       	movw	r30, r2
    3c9c:	b5 82       	std	Z+5, r11	; 0x05
									menu_display_l[6] = 'H';
    3c9e:	98 e4       	ldi	r25, 0x48	; 72
    3ca0:	96 83       	std	Z+6, r25	; 0x06
									menu_display_l[7] = '5';
    3ca2:	d7 82       	std	Z+7, r13	; 0x07
									sw[4] = CH5_SW;
    3ca4:	40 92 e1 05 	sts	0x05E1, r4	; 0x8005e1 <sw+0x4>
    3ca8:	26 c0       	rjmp	.+76     	; 0x3cf6 <menu+0x2192>
								}
								else if (menu_input == 2)
    3caa:	92 30       	cpi	r25, 0x02	; 2
    3cac:	39 f4       	brne	.+14     	; 0x3cbc <menu+0x2158>
								{
									menu_display_l[5] = 'D';
    3cae:	f1 01       	movw	r30, r2
    3cb0:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3cb2:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = 'A';
    3cb4:	87 82       	std	Z+7, r8	; 0x07
									sw[4] = AIL_DR;
    3cb6:	90 92 e1 05 	sts	0x05E1, r9	; 0x8005e1 <sw+0x4>
    3cba:	1d c0       	rjmp	.+58     	; 0x3cf6 <menu+0x2192>
								}
								else if (menu_input == 3)
    3cbc:	93 30       	cpi	r25, 0x03	; 3
    3cbe:	49 f4       	brne	.+18     	; 0x3cd2 <menu+0x216e>
								{
									menu_display_l[5] = 'D';
    3cc0:	f1 01       	movw	r30, r2
    3cc2:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3cc4:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = 'E';
    3cc6:	25 e4       	ldi	r18, 0x45	; 69
    3cc8:	27 83       	std	Z+7, r18	; 0x07
									sw[4] = ELE_DR;
    3cca:	32 e0       	ldi	r19, 0x02	; 2
    3ccc:	30 93 e1 05 	sts	0x05E1, r19	; 0x8005e1 <sw+0x4>
    3cd0:	12 c0       	rjmp	.+36     	; 0x3cf6 <menu+0x2192>
								}
								else if (menu_input == 4)
    3cd2:	94 30       	cpi	r25, 0x04	; 4
    3cd4:	41 f4       	brne	.+16     	; 0x3ce6 <menu+0x2182>
								{
									menu_display_l[5] = 'D';
    3cd6:	f1 01       	movw	r30, r2
    3cd8:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3cda:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = 'R';
    3cdc:	f7 82       	std	Z+7, r15	; 0x07
									sw[4] = RUD_DR;
    3cde:	f8 e0       	ldi	r31, 0x08	; 8
    3ce0:	f0 93 e1 05 	sts	0x05E1, r31	; 0x8005e1 <sw+0x4>
    3ce4:	08 c0       	rjmp	.+16     	; 0x3cf6 <menu+0x2192>
								}
								else if (menu_input == 5)
    3ce6:	95 30       	cpi	r25, 0x05	; 5
    3ce8:	31 f4       	brne	.+12     	; 0x3cf6 <menu+0x2192>
								{
									menu_display_l[5] = 'D';
    3cea:	f1 01       	movw	r30, r2
    3cec:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3cee:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = '5';
    3cf0:	d7 82       	std	Z+7, r13	; 0x07
									sw[4] = CH5_DR;
    3cf2:	e0 92 e1 05 	sts	0x05E1, r14	; 0x8005e1 <sw+0x4>
								}
								
								// Exit
								if (enter)
    3cf6:	88 23       	and	r24, r24
    3cf8:	21 f0       	breq	.+8      	; 0x3d02 <menu+0x219e>
								{
									menu_input = 4;
    3cfa:	84 e0       	ldi	r24, 0x04	; 4
    3cfc:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    3d00:	75 c1       	rjmp	.+746    	; 0x3fec <menu+0x2488>
								}
								
								
								// LCD drive
								LCD_home();
    3d02:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    3d06:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    3d0a:	6e 2d       	mov	r22, r14
    3d0c:	c1 01       	movw	r24, r2
    3d0e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    3d12:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
							} //while (1)
    3d16:	a7 cf       	rjmp	.-178    	; 0x3c66 <menu+0x2102>
						} // if(enter)
						
					} // else if (menu_input == 4)
					
					else if (menu_input == 5)
    3d18:	95 30       	cpi	r25, 0x05	; 5
    3d1a:	09 f0       	breq	.+2      	; 0x3d1e <menu+0x21ba>
    3d1c:	6f c0       	rjmp	.+222    	; 0x3dfc <menu+0x2298>
					{
						// Cursor move
						menu_display_l[8] = '>';
    3d1e:	9e e3       	ldi	r25, 0x3E	; 62
    3d20:	f1 01       	movw	r30, r2
    3d22:	90 87       	std	Z+8, r25	; 0x08
						menu_display_l[0] = ' ';
    3d24:	40 82       	st	Z, r4
						
						if (enter)
    3d26:	88 23       	and	r24, r24
    3d28:	09 f4       	brne	.+2      	; 0x3d2c <menu+0x21c8>
    3d2a:	60 c1       	rjmp	.+704    	; 0x3fec <menu+0x2488>
						{
							menu_input = 0;
    3d2c:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								else if (menu_input == 5)
								{
									menu_display_l[13] = 'D';
									menu_display_l[14] = 'R';
									menu_display_l[15] = '5';
    3d30:	0f 2e       	mov	r0, r31
    3d32:	f5 e3       	ldi	r31, 0x35	; 53
    3d34:	df 2e       	mov	r13, r31
    3d36:	f0 2d       	mov	r31, r0
									sw[5] = CH5_DR;
    3d38:	68 94       	set
    3d3a:	ee 24       	eor	r14, r14
    3d3c:	e4 f8       	bld	r14, 4
								}
								else if (menu_input == 2)
								{
									menu_display_l[13] = 'D';
									menu_display_l[14] = 'R';
									menu_display_l[15] = 'A';
    3d3e:	0f 2e       	mov	r0, r31
    3d40:	f1 e4       	ldi	r31, 0x41	; 65
    3d42:	8f 2e       	mov	r8, r31
    3d44:	f0 2d       	mov	r31, r0
									sw[5] = AIL_DR;
    3d46:	99 24       	eor	r9, r9
    3d48:	93 94       	inc	r9
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    3d4a:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    3d4e:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    3d52:	99 23       	and	r25, r25
    3d54:	1c f4       	brge	.+6      	; 0x3d5c <menu+0x21f8>
									menu_input = 0;
    3d56:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    3d5a:	08 c0       	rjmp	.+16     	; 0x3d6c <menu+0x2208>
								else if (menu_input > 5)
    3d5c:	96 30       	cpi	r25, 0x06	; 6
    3d5e:	24 f0       	brlt	.+8      	; 0x3d68 <menu+0x2204>
									menu_input = 5;
    3d60:	95 e0       	ldi	r25, 0x05	; 5
    3d62:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    3d66:	33 c0       	rjmp	.+102    	; 0x3dce <menu+0x226a>
								
								
								if (menu_input == 0)
    3d68:	91 11       	cpse	r25, r1
    3d6a:	07 c0       	rjmp	.+14     	; 0x3d7a <menu+0x2216>
								{
									menu_display_l[13] = 'N';
    3d6c:	f1 01       	movw	r30, r2
    3d6e:	a5 86       	std	Z+13, r10	; 0x0d
									menu_display_l[14] = 'C';
    3d70:	b6 86       	std	Z+14, r11	; 0x0e
									menu_display_l[15] = ' ';
    3d72:	47 86       	std	Z+15, r4	; 0x0f
									sw[5] = 0;
    3d74:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <sw+0x5>
    3d78:	30 c0       	rjmp	.+96     	; 0x3dda <menu+0x2276>
								}
								else if (menu_input == 1)
    3d7a:	91 30       	cpi	r25, 0x01	; 1
    3d7c:	41 f4       	brne	.+16     	; 0x3d8e <menu+0x222a>
								{
									menu_display_l[13] = 'C';
    3d7e:	f1 01       	movw	r30, r2
    3d80:	b5 86       	std	Z+13, r11	; 0x0d
									menu_display_l[14] = 'H';
    3d82:	98 e4       	ldi	r25, 0x48	; 72
    3d84:	96 87       	std	Z+14, r25	; 0x0e
									menu_display_l[15] = '5';
    3d86:	d7 86       	std	Z+15, r13	; 0x0f
									sw[5] = CH5_SW;
    3d88:	40 92 e2 05 	sts	0x05E2, r4	; 0x8005e2 <sw+0x5>
    3d8c:	26 c0       	rjmp	.+76     	; 0x3dda <menu+0x2276>
								}
								else if (menu_input == 2)
    3d8e:	92 30       	cpi	r25, 0x02	; 2
    3d90:	39 f4       	brne	.+14     	; 0x3da0 <menu+0x223c>
								{
									menu_display_l[13] = 'D';
    3d92:	f1 01       	movw	r30, r2
    3d94:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3d96:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = 'A';
    3d98:	87 86       	std	Z+15, r8	; 0x0f
									sw[5] = AIL_DR;
    3d9a:	90 92 e2 05 	sts	0x05E2, r9	; 0x8005e2 <sw+0x5>
    3d9e:	1d c0       	rjmp	.+58     	; 0x3dda <menu+0x2276>
								}
								else if (menu_input == 3)
    3da0:	93 30       	cpi	r25, 0x03	; 3
    3da2:	49 f4       	brne	.+18     	; 0x3db6 <menu+0x2252>
								{
									menu_display_l[13] = 'D';
    3da4:	f1 01       	movw	r30, r2
    3da6:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3da8:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = 'E';
    3daa:	25 e4       	ldi	r18, 0x45	; 69
    3dac:	27 87       	std	Z+15, r18	; 0x0f
									sw[5] = ELE_DR;
    3dae:	32 e0       	ldi	r19, 0x02	; 2
    3db0:	30 93 e2 05 	sts	0x05E2, r19	; 0x8005e2 <sw+0x5>
    3db4:	12 c0       	rjmp	.+36     	; 0x3dda <menu+0x2276>
								}
								else if (menu_input == 4)
    3db6:	94 30       	cpi	r25, 0x04	; 4
    3db8:	41 f4       	brne	.+16     	; 0x3dca <menu+0x2266>
								{
									menu_display_l[13] = 'D';
    3dba:	f1 01       	movw	r30, r2
    3dbc:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3dbe:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = 'R';
    3dc0:	f7 86       	std	Z+15, r15	; 0x0f
									sw[5] = RUD_DR;
    3dc2:	f8 e0       	ldi	r31, 0x08	; 8
    3dc4:	f0 93 e2 05 	sts	0x05E2, r31	; 0x8005e2 <sw+0x5>
    3dc8:	08 c0       	rjmp	.+16     	; 0x3dda <menu+0x2276>
								}
								else if (menu_input == 5)
    3dca:	95 30       	cpi	r25, 0x05	; 5
    3dcc:	31 f4       	brne	.+12     	; 0x3dda <menu+0x2276>
								{
									menu_display_l[13] = 'D';
    3dce:	f1 01       	movw	r30, r2
    3dd0:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3dd2:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = '5';
    3dd4:	d7 86       	std	Z+15, r13	; 0x0f
									sw[5] = CH5_DR;
    3dd6:	e0 92 e2 05 	sts	0x05E2, r14	; 0x8005e2 <sw+0x5>
								}
								
								// Exit
								if (enter)
    3dda:	88 23       	and	r24, r24
    3ddc:	21 f0       	breq	.+8      	; 0x3de6 <menu+0x2282>
								{
									menu_input = 5;
    3dde:	85 e0       	ldi	r24, 0x05	; 5
    3de0:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    3de4:	03 c1       	rjmp	.+518    	; 0x3fec <menu+0x2488>
								}
								
								
								// LCD drive
								LCD_home();
    3de6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    3dea:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    3dee:	6e 2d       	mov	r22, r14
    3df0:	c1 01       	movw	r24, r2
    3df2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    3df6:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
								
							} //while (1)
    3dfa:	a7 cf       	rjmp	.-178    	; 0x3d4a <menu+0x21e6>
						} // if(enter)
						
					} // else if (menu_input == 5)
					
					else if (menu_input == 6)
    3dfc:	96 30       	cpi	r25, 0x06	; 6
    3dfe:	09 f0       	breq	.+2      	; 0x3e02 <menu+0x229e>
    3e00:	71 c0       	rjmp	.+226    	; 0x3ee4 <menu+0x2380>
					{
						// Cursor move
						menu_display_h[8] = ' ';
    3e02:	f8 01       	movw	r30, r16
    3e04:	40 86       	std	Z+8, r4	; 0x08
						menu_display_l[0] = '>';
    3e06:	9e e3       	ldi	r25, 0x3E	; 62
    3e08:	f1 01       	movw	r30, r2
    3e0a:	90 83       	st	Z, r25
						menu_display_l[8] = ' ';
    3e0c:	40 86       	std	Z+8, r4	; 0x08
						
						if (enter)
    3e0e:	88 23       	and	r24, r24
    3e10:	09 f4       	brne	.+2      	; 0x3e14 <menu+0x22b0>
    3e12:	ec c0       	rjmp	.+472    	; 0x3fec <menu+0x2488>
						{
							menu_input = 0;
    3e14:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								else if (menu_input == 5)
								{
									menu_display_l[5] = 'D';
									menu_display_l[6] = 'R';
									menu_display_l[7] = '5';
    3e18:	0f 2e       	mov	r0, r31
    3e1a:	f5 e3       	ldi	r31, 0x35	; 53
    3e1c:	df 2e       	mov	r13, r31
    3e1e:	f0 2d       	mov	r31, r0
									sw[5] = CH5_DR;
    3e20:	68 94       	set
    3e22:	ee 24       	eor	r14, r14
    3e24:	e4 f8       	bld	r14, 4
								}
								else if (menu_input == 2)
								{
									menu_display_l[5] = 'D';
									menu_display_l[6] = 'R';
									menu_display_l[7] = 'A';
    3e26:	0f 2e       	mov	r0, r31
    3e28:	f1 e4       	ldi	r31, 0x41	; 65
    3e2a:	8f 2e       	mov	r8, r31
    3e2c:	f0 2d       	mov	r31, r0
									sw[5] = AIL_DR ;
    3e2e:	99 24       	eor	r9, r9
    3e30:	93 94       	inc	r9
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    3e32:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    3e36:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    3e3a:	99 23       	and	r25, r25
    3e3c:	1c f4       	brge	.+6      	; 0x3e44 <menu+0x22e0>
									menu_input = 0;
    3e3e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    3e42:	08 c0       	rjmp	.+16     	; 0x3e54 <menu+0x22f0>
								else if (menu_input > 5)
    3e44:	96 30       	cpi	r25, 0x06	; 6
    3e46:	24 f0       	brlt	.+8      	; 0x3e50 <menu+0x22ec>
									menu_input = 5;
    3e48:	95 e0       	ldi	r25, 0x05	; 5
    3e4a:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    3e4e:	33 c0       	rjmp	.+102    	; 0x3eb6 <menu+0x2352>
								
								
								if (menu_input == 0)
    3e50:	91 11       	cpse	r25, r1
    3e52:	07 c0       	rjmp	.+14     	; 0x3e62 <menu+0x22fe>
								{
									menu_display_l[5] = 'N';
    3e54:	f1 01       	movw	r30, r2
    3e56:	a5 82       	std	Z+5, r10	; 0x05
									menu_display_l[6] = 'C';
    3e58:	b6 82       	std	Z+6, r11	; 0x06
									menu_display_l[7] = ' ';
    3e5a:	47 82       	std	Z+7, r4	; 0x07
									sw[6] = 0;
    3e5c:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <sw+0x6>
    3e60:	30 c0       	rjmp	.+96     	; 0x3ec2 <menu+0x235e>
								}
								else if (menu_input == 1)
    3e62:	91 30       	cpi	r25, 0x01	; 1
    3e64:	41 f4       	brne	.+16     	; 0x3e76 <menu+0x2312>
								{
									menu_display_l[5] = 'C';
    3e66:	f1 01       	movw	r30, r2
    3e68:	b5 82       	std	Z+5, r11	; 0x05
									menu_display_l[6] = 'H';
    3e6a:	98 e4       	ldi	r25, 0x48	; 72
    3e6c:	96 83       	std	Z+6, r25	; 0x06
									menu_display_l[7] = '5';
    3e6e:	d7 82       	std	Z+7, r13	; 0x07
									sw[5] = CH5_SW;
    3e70:	40 92 e2 05 	sts	0x05E2, r4	; 0x8005e2 <sw+0x5>
    3e74:	26 c0       	rjmp	.+76     	; 0x3ec2 <menu+0x235e>
								}
								else if (menu_input == 2)
    3e76:	92 30       	cpi	r25, 0x02	; 2
    3e78:	39 f4       	brne	.+14     	; 0x3e88 <menu+0x2324>
								{
									menu_display_l[5] = 'D';
    3e7a:	f1 01       	movw	r30, r2
    3e7c:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3e7e:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = 'A';
    3e80:	87 82       	std	Z+7, r8	; 0x07
									sw[5] = AIL_DR ;
    3e82:	90 92 e2 05 	sts	0x05E2, r9	; 0x8005e2 <sw+0x5>
    3e86:	1d c0       	rjmp	.+58     	; 0x3ec2 <menu+0x235e>
								}
								else if (menu_input == 3)
    3e88:	93 30       	cpi	r25, 0x03	; 3
    3e8a:	49 f4       	brne	.+18     	; 0x3e9e <menu+0x233a>
								{
									menu_display_l[5] = 'D';
    3e8c:	f1 01       	movw	r30, r2
    3e8e:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3e90:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = 'E';
    3e92:	25 e4       	ldi	r18, 0x45	; 69
    3e94:	27 83       	std	Z+7, r18	; 0x07
									sw[5] = ELE_DR;
    3e96:	32 e0       	ldi	r19, 0x02	; 2
    3e98:	30 93 e2 05 	sts	0x05E2, r19	; 0x8005e2 <sw+0x5>
    3e9c:	12 c0       	rjmp	.+36     	; 0x3ec2 <menu+0x235e>
								}
								else if (menu_input == 4)
    3e9e:	94 30       	cpi	r25, 0x04	; 4
    3ea0:	41 f4       	brne	.+16     	; 0x3eb2 <menu+0x234e>
								{
									menu_display_l[5] = 'D';
    3ea2:	f1 01       	movw	r30, r2
    3ea4:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3ea6:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = 'R';
    3ea8:	f7 82       	std	Z+7, r15	; 0x07
									sw[5] = RUD_DR;
    3eaa:	f8 e0       	ldi	r31, 0x08	; 8
    3eac:	f0 93 e2 05 	sts	0x05E2, r31	; 0x8005e2 <sw+0x5>
    3eb0:	08 c0       	rjmp	.+16     	; 0x3ec2 <menu+0x235e>
								}
								else if (menu_input == 5)
    3eb2:	95 30       	cpi	r25, 0x05	; 5
    3eb4:	31 f4       	brne	.+12     	; 0x3ec2 <menu+0x235e>
								{
									menu_display_l[5] = 'D';
    3eb6:	f1 01       	movw	r30, r2
    3eb8:	c5 82       	std	Z+5, r12	; 0x05
									menu_display_l[6] = 'R';
    3eba:	f6 82       	std	Z+6, r15	; 0x06
									menu_display_l[7] = '5';
    3ebc:	d7 82       	std	Z+7, r13	; 0x07
									sw[5] = CH5_DR;
    3ebe:	e0 92 e2 05 	sts	0x05E2, r14	; 0x8005e2 <sw+0x5>
								}
								
								// Exit
								if (enter)
    3ec2:	88 23       	and	r24, r24
    3ec4:	21 f0       	breq	.+8      	; 0x3ece <menu+0x236a>
								{
									menu_input = 6;
    3ec6:	86 e0       	ldi	r24, 0x06	; 6
    3ec8:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    3ecc:	8f c0       	rjmp	.+286    	; 0x3fec <menu+0x2488>
								}
								
								
								// LCD drive
								LCD_home();
    3ece:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    3ed2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    3ed6:	6e 2d       	mov	r22, r14
    3ed8:	c1 01       	movw	r24, r2
    3eda:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    3ede:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
								
							} //while (1)
    3ee2:	a7 cf       	rjmp	.-178    	; 0x3e32 <menu+0x22ce>
						} // if(enter)
						
					} // else if (menu_input == 6)
					
					else if (menu_input == 7)
    3ee4:	97 30       	cpi	r25, 0x07	; 7
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <menu+0x2386>
    3ee8:	6f c0       	rjmp	.+222    	; 0x3fc8 <menu+0x2464>
					{
						// Cursor move
						menu_display_l[8] = '>';
    3eea:	9e e3       	ldi	r25, 0x3E	; 62
    3eec:	f1 01       	movw	r30, r2
    3eee:	90 87       	std	Z+8, r25	; 0x08
						menu_display_l[0] = ' ';
    3ef0:	40 82       	st	Z, r4
						
						if (enter)
    3ef2:	88 23       	and	r24, r24
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <menu+0x2394>
    3ef6:	7a c0       	rjmp	.+244    	; 0x3fec <menu+0x2488>
						{
							menu_input = 0;
    3ef8:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
								}
								else if (menu_input == 5)
								{
									menu_display_l[13] = 'D';
									menu_display_l[14] = 'R';
									menu_display_l[15] = '5';
    3efc:	0f 2e       	mov	r0, r31
    3efe:	f5 e3       	ldi	r31, 0x35	; 53
    3f00:	df 2e       	mov	r13, r31
    3f02:	f0 2d       	mov	r31, r0
									sw[7] = CH5_DR;
    3f04:	68 94       	set
    3f06:	ee 24       	eor	r14, r14
    3f08:	e4 f8       	bld	r14, 4
								}
								else if (menu_input == 2)
								{
									menu_display_l[13] = 'D';
									menu_display_l[14] = 'R';
									menu_display_l[15] = 'A';
    3f0a:	0f 2e       	mov	r0, r31
    3f0c:	f1 e4       	ldi	r31, 0x41	; 65
    3f0e:	8f 2e       	mov	r8, r31
    3f10:	f0 2d       	mov	r31, r0
									sw[7] = AIL_DR;
    3f12:	99 24       	eor	r9, r9
    3f14:	93 94       	inc	r9
						{
							menu_input = 0;
							
							while (1)
							{
								enter = menu_read();
    3f16:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
								if (menu_input < 0)
    3f1a:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    3f1e:	99 23       	and	r25, r25
    3f20:	1c f4       	brge	.+6      	; 0x3f28 <menu+0x23c4>
									menu_input = 0;
    3f22:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    3f26:	08 c0       	rjmp	.+16     	; 0x3f38 <menu+0x23d4>
								else if (menu_input > 5)
    3f28:	96 30       	cpi	r25, 0x06	; 6
    3f2a:	24 f0       	brlt	.+8      	; 0x3f34 <menu+0x23d0>
									menu_input = 5;
    3f2c:	95 e0       	ldi	r25, 0x05	; 5
    3f2e:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menu_input>
    3f32:	33 c0       	rjmp	.+102    	; 0x3f9a <menu+0x2436>
								
								
								if (menu_input == 0)
    3f34:	91 11       	cpse	r25, r1
    3f36:	07 c0       	rjmp	.+14     	; 0x3f46 <menu+0x23e2>
								{
									menu_display_l[13] = 'N';
    3f38:	f1 01       	movw	r30, r2
    3f3a:	a5 86       	std	Z+13, r10	; 0x0d
									menu_display_l[14] = 'C';
    3f3c:	b6 86       	std	Z+14, r11	; 0x0e
									menu_display_l[15] = ' ';
    3f3e:	47 86       	std	Z+15, r4	; 0x0f
									sw[7] = 0;
    3f40:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <sw+0x7>
    3f44:	30 c0       	rjmp	.+96     	; 0x3fa6 <menu+0x2442>
								}
								else if (menu_input == 1)
    3f46:	91 30       	cpi	r25, 0x01	; 1
    3f48:	41 f4       	brne	.+16     	; 0x3f5a <menu+0x23f6>
								{
									menu_display_l[13] = 'C';
    3f4a:	f1 01       	movw	r30, r2
    3f4c:	b5 86       	std	Z+13, r11	; 0x0d
									menu_display_l[14] = 'H';
    3f4e:	98 e4       	ldi	r25, 0x48	; 72
    3f50:	96 87       	std	Z+14, r25	; 0x0e
									menu_display_l[15] = '5';
    3f52:	d7 86       	std	Z+15, r13	; 0x0f
									sw[7] = CH5_SW;
    3f54:	40 92 e4 05 	sts	0x05E4, r4	; 0x8005e4 <sw+0x7>
    3f58:	26 c0       	rjmp	.+76     	; 0x3fa6 <menu+0x2442>
								}
								else if (menu_input == 2)
    3f5a:	92 30       	cpi	r25, 0x02	; 2
    3f5c:	39 f4       	brne	.+14     	; 0x3f6c <menu+0x2408>
								{
									menu_display_l[13] = 'D';
    3f5e:	f1 01       	movw	r30, r2
    3f60:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3f62:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = 'A';
    3f64:	87 86       	std	Z+15, r8	; 0x0f
									sw[7] = AIL_DR;
    3f66:	90 92 e4 05 	sts	0x05E4, r9	; 0x8005e4 <sw+0x7>
    3f6a:	1d c0       	rjmp	.+58     	; 0x3fa6 <menu+0x2442>
								}
								else if (menu_input == 3)
    3f6c:	93 30       	cpi	r25, 0x03	; 3
    3f6e:	49 f4       	brne	.+18     	; 0x3f82 <menu+0x241e>
								{
									menu_display_l[13] = 'D';
    3f70:	f1 01       	movw	r30, r2
    3f72:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3f74:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = 'E';
    3f76:	25 e4       	ldi	r18, 0x45	; 69
    3f78:	27 87       	std	Z+15, r18	; 0x0f
									sw[7] = ELE_DR;
    3f7a:	32 e0       	ldi	r19, 0x02	; 2
    3f7c:	30 93 e4 05 	sts	0x05E4, r19	; 0x8005e4 <sw+0x7>
    3f80:	12 c0       	rjmp	.+36     	; 0x3fa6 <menu+0x2442>
								}
								else if (menu_input == 4)
    3f82:	94 30       	cpi	r25, 0x04	; 4
    3f84:	41 f4       	brne	.+16     	; 0x3f96 <menu+0x2432>
								{
									menu_display_l[13] = 'D';
    3f86:	f1 01       	movw	r30, r2
    3f88:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3f8a:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = 'R';
    3f8c:	f7 86       	std	Z+15, r15	; 0x0f
									sw[7] = RUD_DR;
    3f8e:	f8 e0       	ldi	r31, 0x08	; 8
    3f90:	f0 93 e4 05 	sts	0x05E4, r31	; 0x8005e4 <sw+0x7>
    3f94:	08 c0       	rjmp	.+16     	; 0x3fa6 <menu+0x2442>
								}
								else if (menu_input == 5)
    3f96:	95 30       	cpi	r25, 0x05	; 5
    3f98:	31 f4       	brne	.+12     	; 0x3fa6 <menu+0x2442>
								{
									menu_display_l[13] = 'D';
    3f9a:	f1 01       	movw	r30, r2
    3f9c:	c5 86       	std	Z+13, r12	; 0x0d
									menu_display_l[14] = 'R';
    3f9e:	f6 86       	std	Z+14, r15	; 0x0e
									menu_display_l[15] = '5';
    3fa0:	d7 86       	std	Z+15, r13	; 0x0f
									sw[7] = CH5_DR;
    3fa2:	e0 92 e4 05 	sts	0x05E4, r14	; 0x8005e4 <sw+0x7>
								}
								
								// Exit
								if (enter)
    3fa6:	88 23       	and	r24, r24
    3fa8:	21 f0       	breq	.+8      	; 0x3fb2 <menu+0x244e>
								{
									menu_input = 7;
    3faa:	87 e0       	ldi	r24, 0x07	; 7
    3fac:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
									break;
    3fb0:	1d c0       	rjmp	.+58     	; 0x3fec <menu+0x2488>
								}
								
								
								// LCD drive
								LCD_home();
    3fb2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
								LCD_NWL();
    3fb6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
								LCD_string(menu_display_l, 16);
    3fba:	6e 2d       	mov	r22, r14
    3fbc:	c1 01       	movw	r24, r2
    3fbe:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
								
								// Buzzer drive
								buzzer_switch();
    3fc2:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
								
								
							} //while (1)
    3fc6:	a7 cf       	rjmp	.-178    	; 0x3f16 <menu+0x23b2>
						} // if(enter)
						
					} // else if (menu_input == 7)
					
					// Exit
					if (menu_input == 8)
    3fc8:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    3fcc:	98 30       	cpi	r25, 0x08	; 8
    3fce:	71 f4       	brne	.+28     	; 0x3fec <menu+0x2488>
					{
						// Cursor move
						menu_display_h[8] = ' ';
    3fd0:	f8 01       	movw	r30, r16
    3fd2:	40 86       	std	Z+8, r4	; 0x08
						menu_display_l[0] = '>';
    3fd4:	9e e3       	ldi	r25, 0x3E	; 62
    3fd6:	f1 01       	movw	r30, r2
    3fd8:	90 83       	st	Z, r25
						menu_display_l[8] = ' ';
    3fda:	40 86       	std	Z+8, r4	; 0x08
						
						if (enter)
    3fdc:	88 23       	and	r24, r24
    3fde:	31 f0       	breq	.+12     	; 0x3fec <menu+0x2488>
    3fe0:	89 80       	ldd	r8, Y+1	; 0x01
    3fe2:	9a 80       	ldd	r9, Y+2	; 0x02
						{
							menu_input = menu_input_temp;
    3fe4:	8b e0       	ldi	r24, 0x0B	; 11
    3fe6:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menu_input>
							break;
    3fea:	8a c0       	rjmp	.+276    	; 0x4100 <menu+0x259c>
						}
					}
					
					
					// LCD drive
					LCD_home();
    3fec:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
					LCD_string(menu_display_h, 16);
    3ff0:	60 e1       	ldi	r22, 0x10	; 16
    3ff2:	c8 01       	movw	r24, r16
    3ff4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					LCD_NWL();
    3ff8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
					LCD_string(menu_display_l, 16);
    3ffc:	60 e1       	ldi	r22, 0x10	; 16
    3ffe:	c1 01       	movw	r24, r2
    4000:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
					
					// Buzzer drive
					buzzer_switch();
    4004:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
					
					
				} // while (1)
    4008:	b9 c9       	rjmp	.-3214   	; 0x337c <menu+0x1818>
			} //if (enter)
		} //else if (menu_input == MENU_NUM)
		
		////////// Exit //////////////////////////////////////////////////////////
		else if (menu_input == MENU_NUM)
    400a:	9c 30       	cpi	r25, 0x0C	; 12
    400c:	09 f0       	breq	.+2      	; 0x4010 <menu+0x24ac>
    400e:	78 c0       	rjmp	.+240    	; 0x4100 <menu+0x259c>
			// Display
			menu_display_h = " Switch allocate";
			menu_display_l = ">Exit           ";
			
			// Key input
			if (enter)
    4010:	88 23       	and	r24, r24
    4012:	09 f4       	brne	.+2      	; 0x4016 <menu+0x24b2>
    4014:	6d c0       	rjmp	.+218    	; 0x40f0 <menu+0x258c>
    4016:	e6 c0       	rjmp	.+460    	; 0x41e4 <menu+0x2680>
		////////// Set model number //////////////////////////////////////////////
		if (menu_input == 0)
		{
			// Display code 
			menu_display_h = ">Model Number   ";
			menu_display_l = " Mixing         ";
    4018:	0f 2e       	mov	r0, r31
    401a:	fa ec       	ldi	r31, 0xCA	; 202
    401c:	2f 2e       	mov	r2, r31
    401e:	f3 e0       	ldi	r31, 0x03	; 3
    4020:	3f 2e       	mov	r3, r31
    4022:	f0 2d       	mov	r31, r0

		////////// Set model number //////////////////////////////////////////////
		if (menu_input == 0)
		{
			// Display code 
			menu_display_h = ">Model Number   ";
    4024:	0b ed       	ldi	r16, 0xDB	; 219
    4026:	13 e0       	ldi	r17, 0x03	; 3
    4028:	6b c0       	rjmp	.+214    	; 0x4100 <menu+0x259c>
		////////// Mixing setting ////////////////////////////////////////////////
		else if (menu_input == 1)
		{
			// Display code
			menu_display_h = " Model Number   ";
			menu_display_l = ">Mixing         ";
    402a:	0f 2e       	mov	r0, r31
    402c:	f7 e6       	ldi	r31, 0x67	; 103
    402e:	2f 2e       	mov	r2, r31
    4030:	f1 e0       	ldi	r31, 0x01	; 1
    4032:	3f 2e       	mov	r3, r31
    4034:	f0 2d       	mov	r31, r0
		
		////////// Mixing setting ////////////////////////////////////////////////
		else if (menu_input == 1)
		{
			// Display code
			menu_display_h = " Model Number   ";
    4036:	08 e7       	ldi	r16, 0x78	; 120
    4038:	11 e0       	ldi	r17, 0x01	; 1
    403a:	62 c0       	rjmp	.+196    	; 0x4100 <menu+0x259c>
		////////// Channel Reverse ///////////////////////////////////////////////
		else if (menu_input == 2)
		{
			// Display
			menu_display_h = " Mixing         ";
			menu_display_l = ">Reverse        ";
    403c:	0f 2e       	mov	r0, r31
    403e:	fc ee       	ldi	r31, 0xEC	; 236
    4040:	2f 2e       	mov	r2, r31
    4042:	f3 e0       	ldi	r31, 0x03	; 3
    4044:	3f 2e       	mov	r3, r31
    4046:	f0 2d       	mov	r31, r0
		
		////////// Channel Reverse ///////////////////////////////////////////////
		else if (menu_input == 2)
		{
			// Display
			menu_display_h = " Mixing         ";
    4048:	0a ec       	ldi	r16, 0xCA	; 202
    404a:	13 e0       	ldi	r17, 0x03	; 3
    404c:	59 c0       	rjmp	.+178    	; 0x4100 <menu+0x259c>
		////////// Dual Rate /////////////////////////////////////////////////////
		else if (menu_input == 3)
		{
			// Display
			menu_display_h = " Reverse        ";
			menu_display_l = ">Dual Rate      ";
    404e:	0f 2e       	mov	r0, r31
    4050:	fd ef       	ldi	r31, 0xFD	; 253
    4052:	2f 2e       	mov	r2, r31
    4054:	f3 e0       	ldi	r31, 0x03	; 3
    4056:	3f 2e       	mov	r3, r31
    4058:	f0 2d       	mov	r31, r0
		
		////////// Dual Rate /////////////////////////////////////////////////////
		else if (menu_input == 3)
		{
			// Display
			menu_display_h = " Reverse        ";
    405a:	0e e0       	ldi	r16, 0x0E	; 14
    405c:	14 e0       	ldi	r17, 0x04	; 4
    405e:	50 c0       	rjmp	.+160    	; 0x4100 <menu+0x259c>
		////////// Trim //////////////////////////////////////////////////////////
		else if (menu_input == 4)
		{
			// Display
			menu_display_h = " Dual Rate      ";
			menu_display_l = ">Trim           ";
    4060:	0f 2e       	mov	r0, r31
    4062:	ff e1       	ldi	r31, 0x1F	; 31
    4064:	2f 2e       	mov	r2, r31
    4066:	f4 e0       	ldi	r31, 0x04	; 4
    4068:	3f 2e       	mov	r3, r31
    406a:	f0 2d       	mov	r31, r0
		
		////////// Trim //////////////////////////////////////////////////////////
		else if (menu_input == 4)
		{
			// Display
			menu_display_h = " Dual Rate      ";
    406c:	00 e3       	ldi	r16, 0x30	; 48
    406e:	14 e0       	ldi	r17, 0x04	; 4
    4070:	47 c0       	rjmp	.+142    	; 0x4100 <menu+0x259c>
		////////// Servo delay ///////////////////////////////////////////////////
		else if (menu_input == 5)
		{
			// Display
			menu_display_h = " Trim           ";
			menu_display_l = ">Servo Delay    ";
    4072:	0f 2e       	mov	r0, r31
    4074:	f1 e4       	ldi	r31, 0x41	; 65
    4076:	2f 2e       	mov	r2, r31
    4078:	f4 e0       	ldi	r31, 0x04	; 4
    407a:	3f 2e       	mov	r3, r31
    407c:	f0 2d       	mov	r31, r0
		
		////////// Servo delay ///////////////////////////////////////////////////
		else if (menu_input == 5)
		{
			// Display
			menu_display_h = " Trim           ";
    407e:	02 e5       	ldi	r16, 0x52	; 82
    4080:	14 e0       	ldi	r17, 0x04	; 4
    4082:	3e c0       	rjmp	.+124    	; 0x4100 <menu+0x259c>
		////////// On board airplane battery charger control /////////////////////
		else if (menu_input == 6)
		{
			// Display
			menu_display_h = " Servo Delay    ";
			menu_display_l = ">Bat Charger    ";
    4084:	0f 2e       	mov	r0, r31
    4086:	f3 e6       	ldi	r31, 0x63	; 99
    4088:	2f 2e       	mov	r2, r31
    408a:	f4 e0       	ldi	r31, 0x04	; 4
    408c:	3f 2e       	mov	r3, r31
    408e:	f0 2d       	mov	r31, r0
		
		////////// On board airplane battery charger control /////////////////////
		else if (menu_input == 6)
		{
			// Display
			menu_display_h = " Servo Delay    ";
    4090:	04 e7       	ldi	r16, 0x74	; 116
    4092:	14 e0       	ldi	r17, 0x04	; 4
    4094:	35 c0       	rjmp	.+106    	; 0x4100 <menu+0x259c>
		////////// Servo/Actuator tester /////////////////////////////////////////
		else if (menu_input == 7)
		{
			// Display
			menu_display_h = " Bat Charger    ";
			menu_display_l = ">Servo Test     ";
    4096:	0f 2e       	mov	r0, r31
    4098:	f3 e5       	ldi	r31, 0x53	; 83
    409a:	2f 2e       	mov	r2, r31
    409c:	f3 e0       	ldi	r31, 0x03	; 3
    409e:	3f 2e       	mov	r3, r31
    40a0:	f0 2d       	mov	r31, r0
		
		////////// Servo/Actuator tester /////////////////////////////////////////
		else if (menu_input == 7)
		{
			// Display
			menu_display_h = " Bat Charger    ";
    40a2:	05 e8       	ldi	r16, 0x85	; 133
    40a4:	14 e0       	ldi	r17, 0x04	; 4
    40a6:	2c c0       	rjmp	.+88     	; 0x4100 <menu+0x259c>
		////////// Mute //////////////////////////////////////////////////////////
		else if (menu_input == 8)
		{
			// Display
			menu_display_h = " Servo Test     ";
			menu_display_l = ">Speaker Mute   ";
    40a8:	0f 2e       	mov	r0, r31
    40aa:	f6 e9       	ldi	r31, 0x96	; 150
    40ac:	2f 2e       	mov	r2, r31
    40ae:	f4 e0       	ldi	r31, 0x04	; 4
    40b0:	3f 2e       	mov	r3, r31
    40b2:	f0 2d       	mov	r31, r0
		
		////////// Mute //////////////////////////////////////////////////////////
		else if (menu_input == 8)
		{
			// Display
			menu_display_h = " Servo Test     ";
    40b4:	07 ea       	ldi	r16, 0xA7	; 167
    40b6:	14 e0       	ldi	r17, 0x04	; 4
    40b8:	23 c0       	rjmp	.+70     	; 0x4100 <menu+0x259c>
		////////// Power saving mode time set ////////////////////////////////////
		else if (menu_input == 9)
		{
			// Display
			menu_display_h = " Speaker Mute   ";
			menu_display_l = ">Power off time ";
    40ba:	0f 2e       	mov	r0, r31
    40bc:	f8 eb       	ldi	r31, 0xB8	; 184
    40be:	2f 2e       	mov	r2, r31
    40c0:	f4 e0       	ldi	r31, 0x04	; 4
    40c2:	3f 2e       	mov	r3, r31
    40c4:	f0 2d       	mov	r31, r0
		
		////////// Power saving mode time set ////////////////////////////////////
		else if (menu_input == 9)
		{
			// Display
			menu_display_h = " Speaker Mute   ";
    40c6:	09 ec       	ldi	r16, 0xC9	; 201
    40c8:	14 e0       	ldi	r17, 0x04	; 4
    40ca:	1a c0       	rjmp	.+52     	; 0x4100 <menu+0x259c>
		{
			uint8_t mixing_val_3_temp;
			mixing_val_3_temp = (mixing_val_3 & (~RF_MODE_MASK));
			// Display
			menu_display_h = " Power off time ";
			menu_display_l = ">Output mode    ";
    40cc:	0f 2e       	mov	r0, r31
    40ce:	fa ed       	ldi	r31, 0xDA	; 218
    40d0:	2f 2e       	mov	r2, r31
    40d2:	f4 e0       	ldi	r31, 0x04	; 4
    40d4:	3f 2e       	mov	r3, r31
    40d6:	f0 2d       	mov	r31, r0
		else if (menu_input == 10)
		{
			uint8_t mixing_val_3_temp;
			mixing_val_3_temp = (mixing_val_3 & (~RF_MODE_MASK));
			// Display
			menu_display_h = " Power off time ";
    40d8:	08 ea       	ldi	r16, 0xA8	; 168
    40da:	13 e0       	ldi	r17, 0x03	; 3
    40dc:	11 c0       	rjmp	.+34     	; 0x4100 <menu+0x259c>
		////////// Switch allocation /////////////////////////////////////////////
		else if (menu_input == 11)
		{
			// Display
			menu_display_h = " Output mode    ";
			menu_display_l = ">Switch allocate";
    40de:	0f 2e       	mov	r0, r31
    40e0:	fb ee       	ldi	r31, 0xEB	; 235
    40e2:	2f 2e       	mov	r2, r31
    40e4:	f4 e0       	ldi	r31, 0x04	; 4
    40e6:	3f 2e       	mov	r3, r31
    40e8:	f0 2d       	mov	r31, r0
		
		////////// Switch allocation /////////////////////////////////////////////
		else if (menu_input == 11)
		{
			// Display
			menu_display_h = " Output mode    ";
    40ea:	0c ef       	ldi	r16, 0xFC	; 252
    40ec:	14 e0       	ldi	r17, 0x04	; 4
    40ee:	08 c0       	rjmp	.+16     	; 0x4100 <menu+0x259c>
		////////// Exit //////////////////////////////////////////////////////////
		else if (menu_input == MENU_NUM)
		{
			// Display
			menu_display_h = " Switch allocate";
			menu_display_l = ">Exit           ";
    40f0:	0f 2e       	mov	r0, r31
    40f2:	f2 e2       	ldi	r31, 0x22	; 34
    40f4:	2f 2e       	mov	r2, r31
    40f6:	f2 e0       	ldi	r31, 0x02	; 2
    40f8:	3f 2e       	mov	r3, r31
    40fa:	f0 2d       	mov	r31, r0
		
		////////// Exit //////////////////////////////////////////////////////////
		else if (menu_input == MENU_NUM)
		{
			// Display
			menu_display_h = " Switch allocate";
    40fc:	09 eb       	ldi	r16, 0xB9	; 185
    40fe:	13 e0       	ldi	r17, 0x03	; 3
		} // else if (menu_input == MENU_NUM)
		
		
		////////// Power & Interface /////////////////////////////////////////////
		// Power off
		if (!(PINC & PWRDET) && (power_sw_toggle == OFF))
    4100:	32 99       	sbic	0x06, 2	; 6
    4102:	0a c0       	rjmp	.+20     	; 0x4118 <menu+0x25b4>
    4104:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <power_sw_toggle>
    4108:	81 11       	cpse	r24, r1
    410a:	06 c0       	rjmp	.+12     	; 0x4118 <menu+0x25b4>
		{
			power_sw_toggle = ON;
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <power_sw_toggle>
			timer_8ms_power = 0;
    4112:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <timer_8ms_power>
    4116:	0f c0       	rjmp	.+30     	; 0x4136 <menu+0x25d2>
		}
		else if ((timer_8ms_power > 125) && (power_sw_toggle == ON))
    4118:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <timer_8ms_power>
    411c:	8e 37       	cpi	r24, 0x7E	; 126
    411e:	58 f0       	brcs	.+22     	; 0x4136 <menu+0x25d2>
    4120:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <power_sw_toggle>
    4124:	81 30       	cpi	r24, 0x01	; 1
    4126:	39 f4       	brne	.+14     	; 0x4136 <menu+0x25d2>
		{
			// Power off only if button is pressed for 1 s
			if (PINC & PWRDET)
    4128:	32 9b       	sbis	0x06, 2	; 6
    412a:	03 c0       	rjmp	.+6      	; 0x4132 <menu+0x25ce>
				power_sw_toggle = OFF;
    412c:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <power_sw_toggle>
    4130:	02 c0       	rjmp	.+4      	; 0x4136 <menu+0x25d2>
			else
				power_off();
    4132:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <power_off>
			
		}
		
		// Speaker
		buzzer_switch();
    4136:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
		
		// LCD
		LCD_home();
    413a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
		LCD_string(menu_display_h, 16);
    413e:	60 e1       	ldi	r22, 0x10	; 16
    4140:	c8 01       	movw	r24, r16
    4142:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
		LCD_NWL();
    4146:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
		LCD_string(menu_display_l, 16);
    414a:	60 e1       	ldi	r22, 0x10	; 16
    414c:	c1 01       	movw	r24, r2
    414e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
		
		
	} // while (1)
    4152:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <menu+0x4a>
							else
								mixing_val_1 |= REVERSE_ELE;
						}
					}
					else
						menu_display_h[8] = ' ';
    4156:	f8 01       	movw	r30, r16
    4158:	b0 86       	std	Z+8, r11	; 0x08
    415a:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <menu+0x754>
							else
								mixing_val_1 |= REVERSE_RUD;
						}
					}
					else
						menu_display_l[0] = ' ';
    415e:	f1 01       	movw	r30, r2
    4160:	b0 82       	st	Z, r11
    4162:	0c 94 6f 11 	jmp	0x22de	; 0x22de <menu+0x77a>
							else
								mixing_val_1 |= REVERSE_CH5;
						}
					}
					else
						menu_display_l[8] = ' ';
    4166:	f1 01       	movw	r30, r2
    4168:	b0 86       	std	Z+8, r11	; 0x08
    416a:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <menu+0x798>
							else
								mixing_val_2 |= ELE_DR;
						}
					}
					else
						menu_display_h[8] = ' ';
    416e:	f8 01       	movw	r30, r16
    4170:	b0 86       	std	Z+8, r11	; 0x08
    4172:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <menu+0x94e>
							else
								mixing_val_2 |= RUD_DR;
						}
					}
					else
						menu_display_l[0] = ' ';
    4176:	f1 01       	movw	r30, r2
    4178:	b0 82       	st	Z, r11
    417a:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <menu+0x974>
							else
								mixing_val_2 |= CH5_DR;
						}
					}
					else
						menu_display_l[8] = ' ';
    417e:	f1 01       	movw	r30, r2
    4180:	b0 86       	std	Z+8, r11	; 0x08
    4182:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <menu+0x992>
					
					// Elevator
					if (menu_input == 1)
					{
						// Cursor move
						menu_display_h[8] = '>';
    4186:	8e e3       	ldi	r24, 0x3E	; 62
    4188:	f8 01       	movw	r30, r16
    418a:	80 87       	std	Z+8, r24	; 0x08
    418c:	0c 94 93 13 	jmp	0x2726	; 0x2726 <menu+0xbc2>
					} //if (menu_input == 0)
					else
						menu_display_h[0] = ' ';
					
					// Elevator
					if (menu_input == 1)
    4190:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    4194:	91 30       	cpi	r25, 0x01	; 1
    4196:	79 f4       	brne	.+30     	; 0x41b6 <menu+0x2652>
    4198:	f6 cf       	rjmp	.-20     	; 0x4186 <menu+0x2622>
						{
							mixing_val_3 = NRF|mixing_val_3_temp;
						}
					}
					else
						menu_display_h[8] = ' ';
    419a:	f8 01       	movw	r30, r16
    419c:	b0 86       	std	Z+8, r11	; 0x08
    419e:	a5 c8       	rjmp	.-3766   	; 0x32ea <menu+0x1786>
						{
							mixing_val_3 = UART|mixing_val_3_temp;
						}
					}
					else
						menu_display_l[0] = ' ';
    41a0:	f1 01       	movw	r30, r2
    41a2:	b0 82       	st	Z, r11
    41a4:	ad c8       	rjmp	.-3750   	; 0x3300 <menu+0x179c>
						{
							mixing_val_3 = BLE|mixing_val_3_temp;
						}
					}
					else
						menu_display_l[8] = ' ';
    41a6:	f1 01       	movw	r30, r2
    41a8:	b0 86       	std	Z+8, r11	; 0x08
    41aa:	b8 c8       	rjmp	.-3728   	; 0x331c <menu+0x17b8>
					
					// Throttle
					if (menu_input == 2)
					{
						// Cursor move
						menu_display_l[0] = '>';
    41ac:	8e e3       	ldi	r24, 0x3E	; 62
    41ae:	f1 01       	movw	r30, r2
    41b0:	80 83       	st	Z, r24
    41b2:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <menu+0xc56>
							} //while (1)
							
						} //if(enter)
					}
					else
						menu_display_h[8] = ' ';
    41b6:	f8 01       	movw	r30, r16
    41b8:	b0 86       	std	Z+8, r11	; 0x08
					
					// Throttle
					if (menu_input == 2)
    41ba:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    41be:	92 30       	cpi	r25, 0x02	; 2
    41c0:	11 f0       	breq	.+4      	; 0x41c6 <menu+0x2662>
    41c2:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <menu+0xcd4>
    41c6:	f2 cf       	rjmp	.-28     	; 0x41ac <menu+0x2648>
					{
						// Cursor move
						menu_display_l[0] = '>';
    41c8:	9e e3       	ldi	r25, 0x3E	; 62
    41ca:	f1 01       	movw	r30, r2
    41cc:	90 83       	st	Z, r25
    41ce:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <menu+0xd6a>
							} //while (1)
							
						} //if(enter)
					}
					else
						menu_display_h[8] = ' ';
    41d2:	f8 01       	movw	r30, r16
    41d4:	b0 86       	std	Z+8, r11	; 0x08
					
					// Throttle
					if (menu_input == 2)
    41d6:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menu_input>
    41da:	92 30       	cpi	r25, 0x02	; 2
    41dc:	11 f0       	breq	.+4      	; 0x41e2 <menu+0x267e>
    41de:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <menu+0xcd4>
    41e2:	f2 cf       	rjmp	.-28     	; 0x41c8 <menu+0x2664>
				uint8_t addr_temp;
				
				// Save settings
				addr_temp = cur_model * 15 + 1;
				
				eeprom_update_byte((uint8_t*)addr_temp,       trim[AILERON]);
    41e4:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <cur_model>
    41e8:	f8 2f       	mov	r31, r24
    41ea:	ff 0f       	add	r31, r31
    41ec:	f8 0f       	add	r31, r24
    41ee:	8f 2f       	mov	r24, r31
    41f0:	88 0f       	add	r24, r24
    41f2:	88 0f       	add	r24, r24
    41f4:	f8 0f       	add	r31, r24
    41f6:	ff 5f       	subi	r31, 0xFF	; 255
    41f8:	2f 2f       	mov	r18, r31
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	3a 83       	std	Y+2, r19	; 0x02
    41fe:	29 83       	std	Y+1, r18	; 0x01
    4200:	07 eb       	ldi	r16, 0xB7	; 183
    4202:	15 e0       	ldi	r17, 0x05	; 5
    4204:	f8 01       	movw	r30, r16
    4206:	60 81       	ld	r22, Z
    4208:	c9 01       	movw	r24, r18
    420a:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 1), trim[ELEVATOR]);
    420e:	f8 01       	movw	r30, r16
    4210:	61 81       	ldd	r22, Z+1	; 0x01
    4212:	89 81       	ldd	r24, Y+1	; 0x01
    4214:	9a 81       	ldd	r25, Y+2	; 0x02
    4216:	01 96       	adiw	r24, 0x01	; 1
    4218:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 2), trim[RUDDER]);
    421c:	f8 01       	movw	r30, r16
    421e:	63 81       	ldd	r22, Z+3	; 0x03
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	9a 81       	ldd	r25, Y+2	; 0x02
    4224:	02 96       	adiw	r24, 0x02	; 2
    4226:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 3), trim[CH5]);
    422a:	f8 01       	movw	r30, r16
    422c:	64 81       	ldd	r22, Z+4	; 0x04
    422e:	89 81       	ldd	r24, Y+1	; 0x01
    4230:	9a 81       	ldd	r25, Y+2	; 0x02
    4232:	03 96       	adiw	r24, 0x03	; 3
    4234:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				
				eeprom_update_byte((uint8_t*)(addr_temp + 4), mixing_val_1);
    4238:	60 91 db 05 	lds	r22, 0x05DB	; 0x8005db <mixing_val_1>
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	9a 81       	ldd	r25, Y+2	; 0x02
    4240:	04 96       	adiw	r24, 0x04	; 4
    4242:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 5), mixing_val_2);
    4246:	60 91 cd 05 	lds	r22, 0x05CD	; 0x8005cd <mixing_val_2>
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	05 96       	adiw	r24, 0x05	; 5
    4250:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 6), mixing_val_3);
    4254:	60 91 d6 05 	lds	r22, 0x05D6	; 0x8005d6 <mixing_val_3>
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	9a 81       	ldd	r25, Y+2	; 0x02
    425c:	06 96       	adiw	r24, 0x06	; 6
    425e:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				
				eeprom_update_byte((uint8_t*)(addr_temp + 7),  sw[0]);
    4262:	0d ed       	ldi	r16, 0xDD	; 221
    4264:	15 e0       	ldi	r17, 0x05	; 5
    4266:	f8 01       	movw	r30, r16
    4268:	60 81       	ld	r22, Z
    426a:	89 81       	ldd	r24, Y+1	; 0x01
    426c:	9a 81       	ldd	r25, Y+2	; 0x02
    426e:	07 96       	adiw	r24, 0x07	; 7
    4270:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 8),  sw[1]);
    4274:	f8 01       	movw	r30, r16
    4276:	61 81       	ldd	r22, Z+1	; 0x01
    4278:	89 81       	ldd	r24, Y+1	; 0x01
    427a:	9a 81       	ldd	r25, Y+2	; 0x02
    427c:	08 96       	adiw	r24, 0x08	; 8
    427e:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 9),  sw[2]);
    4282:	f8 01       	movw	r30, r16
    4284:	62 81       	ldd	r22, Z+2	; 0x02
    4286:	89 81       	ldd	r24, Y+1	; 0x01
    4288:	9a 81       	ldd	r25, Y+2	; 0x02
    428a:	09 96       	adiw	r24, 0x09	; 9
    428c:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 10), sw[3]);
    4290:	f8 01       	movw	r30, r16
    4292:	63 81       	ldd	r22, Z+3	; 0x03
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	9a 81       	ldd	r25, Y+2	; 0x02
    4298:	0a 96       	adiw	r24, 0x0a	; 10
    429a:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 11), sw[4]);
    429e:	f8 01       	movw	r30, r16
    42a0:	64 81       	ldd	r22, Z+4	; 0x04
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	9a 81       	ldd	r25, Y+2	; 0x02
    42a6:	0b 96       	adiw	r24, 0x0b	; 11
    42a8:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 12), sw[5]);
    42ac:	f8 01       	movw	r30, r16
    42ae:	65 81       	ldd	r22, Z+5	; 0x05
    42b0:	89 81       	ldd	r24, Y+1	; 0x01
    42b2:	9a 81       	ldd	r25, Y+2	; 0x02
    42b4:	0c 96       	adiw	r24, 0x0c	; 12
    42b6:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 13), sw[6]);
    42ba:	f8 01       	movw	r30, r16
    42bc:	66 81       	ldd	r22, Z+6	; 0x06
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	9a 81       	ldd	r25, Y+2	; 0x02
    42c2:	0d 96       	adiw	r24, 0x0d	; 13
    42c4:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)(addr_temp + 14), sw[7]);
    42c8:	f8 01       	movw	r30, r16
    42ca:	67 81       	ldd	r22, Z+7	; 0x07
    42cc:	89 81       	ldd	r24, Y+1	; 0x01
    42ce:	9a 81       	ldd	r25, Y+2	; 0x02
    42d0:	0e 96       	adiw	r24, 0x0e	; 14
    42d2:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				
				eeprom_update_byte((uint8_t*)121, cur_model);
    42d6:	60 91 cf 05 	lds	r22, 0x05CF	; 0x8005cf <cur_model>
    42da:	89 e7       	ldi	r24, 0x79	; 121
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_byte((uint8_t*)122, buzzer_volume);
    42e2:	60 91 da 05 	lds	r22, 0x05DA	; 0x8005da <buzzer_volume>
    42e6:	8a e7       	ldi	r24, 0x7A	; 122
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	0e 94 35 28 	call	0x506a	; 0x506a <eeprom_update_byte>
				eeprom_update_word((uint16_t*)123, runtime_set);
    42ee:	60 91 d0 05 	lds	r22, 0x05D0	; 0x8005d0 <runtime_set>
    42f2:	70 91 d1 05 	lds	r23, 0x05D1	; 0x8005d1 <runtime_set+0x1>
    42f6:	8b e7       	ldi	r24, 0x7B	; 123
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	0e 94 47 28 	call	0x508e	; 0x508e <eeprom_update_word>
				
				menu_input = 0;
    42fe:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
		LCD_NWL();
		LCD_string(menu_display_l, 16);
		
		
	} // while (1)
} // void menu()
    4302:	80 e0       	ldi	r24, 0x00	; 0
    4304:	26 96       	adiw	r28, 0x06	; 6
    4306:	0f b6       	in	r0, 0x3f	; 63
    4308:	f8 94       	cli
    430a:	de bf       	out	0x3e, r29	; 62
    430c:	0f be       	out	0x3f, r0	; 63
    430e:	cd bf       	out	0x3d, r28	; 61
    4310:	df 91       	pop	r29
    4312:	cf 91       	pop	r28
    4314:	1f 91       	pop	r17
    4316:	0f 91       	pop	r16
    4318:	ff 90       	pop	r15
    431a:	ef 90       	pop	r14
    431c:	df 90       	pop	r13
    431e:	cf 90       	pop	r12
    4320:	bf 90       	pop	r11
    4322:	af 90       	pop	r10
    4324:	9f 90       	pop	r9
    4326:	8f 90       	pop	r8
    4328:	7f 90       	pop	r7
    432a:	6f 90       	pop	r6
    432c:	5f 90       	pop	r5
    432e:	4f 90       	pop	r4
    4330:	3f 90       	pop	r3
    4332:	2f 90       	pop	r2
    4334:	08 95       	ret

00004336 <main>:
/****************************************************/
/*     Main											*/
/*													*/
/****************************************************/
int main(void)
{
    4336:	cf 93       	push	r28
    4338:	df 93       	push	r29
    433a:	00 d0       	rcall	.+0      	; 0x433c <main+0x6>
    433c:	00 d0       	rcall	.+0      	; 0x433e <main+0x8>
    433e:	cd b7       	in	r28, 0x3d	; 61
    4340:	de b7       	in	r29, 0x3e	; 62
	////////// Read EEPROM Setting Data //////////////////////////////////////
	model_sel();
    4342:	0e 94 04 03 	call	0x608	; 0x608 <model_sel>
	
	
	////////// Initialize ////////////////////////////////////////////////////
	init();
    4346:	0e 94 df 02 	call	0x5be	; 0x5be <init>
	
	LCD_init();
    434a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_init>
	LCD_custom_character(lcd_guage0, 0);
    434e:	60 e0       	ldi	r22, 0x00	; 0
    4350:	88 e3       	ldi	r24, 0x38	; 56
    4352:	91 e0       	ldi	r25, 0x01	; 1
    4354:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_custom_character>
	LCD_custom_character(lcd_guage1, 1);
    4358:	61 e0       	ldi	r22, 0x01	; 1
    435a:	80 e3       	ldi	r24, 0x30	; 48
    435c:	91 e0       	ldi	r25, 0x01	; 1
    435e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_custom_character>
	LCD_custom_character(lcd_guage2, 2);
    4362:	62 e0       	ldi	r22, 0x02	; 2
    4364:	88 e2       	ldi	r24, 0x28	; 40
    4366:	91 e0       	ldi	r25, 0x01	; 1
    4368:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_custom_character>
	LCD_custom_character(lcd_guage3, 3);
    436c:	63 e0       	ldi	r22, 0x03	; 3
    436e:	80 e2       	ldi	r24, 0x20	; 32
    4370:	91 e0       	ldi	r25, 0x01	; 1
    4372:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_custom_character>
	LCD_custom_character(lcd_guage4, 4);
    4376:	64 e0       	ldi	r22, 0x04	; 4
    4378:	88 e1       	ldi	r24, 0x18	; 24
    437a:	91 e0       	ldi	r25, 0x01	; 1
    437c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_custom_character>
	LCD_custom_character(lcd_guage5, 5);
    4380:	65 e0       	ldi	r22, 0x05	; 5
    4382:	80 e1       	ldi	r24, 0x10	; 16
    4384:	91 e0       	ldi	r25, 0x01	; 1
    4386:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_custom_character>
	LCD_custom_character(lcd_guage6, 6);
    438a:	66 e0       	ldi	r22, 0x06	; 6
    438c:	88 e0       	ldi	r24, 0x08	; 8
    438e:	91 e0       	ldi	r25, 0x01	; 1
    4390:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_custom_character>
	LCD_custom_character(lcd_guage7, 7);
    4394:	67 e0       	ldi	r22, 0x07	; 7
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	91 e0       	ldi	r25, 0x01	; 1
    439a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_custom_character>
	
	UART_init(BAUD_14k, TXRX);
    439e:	63 e0       	ldi	r22, 0x03	; 3
    43a0:	82 e0       	ldi	r24, 0x02	; 2
    43a2:	0e 94 52 25 	call	0x4aa4	; 0x4aa4 <UART_init>
	
	sei();
    43a6:	78 94       	sei
	
	
	////////// Power On //////////////////////////////////////////////////////
	// Turn Transmitter on if button is pressed for 0.5 s
	LCD_home();
    43a8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
	LCD_string("    PATA TX     ", 16);
    43ac:	60 e1       	ldi	r22, 0x10	; 16
    43ae:	8e e1       	ldi	r24, 0x1E	; 30
    43b0:	95 e0       	ldi	r25, 0x05	; 5
    43b2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
	LCD_NWL();
    43b6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
    43ba:	20 e1       	ldi	r18, 0x10	; 16
    43bc:	29 83       	std	Y+1, r18	; 0x01
	for (uint8_t i = 0; i < 16; i++)
	{
		LCD_write(0xFF);
    43be:	8f ef       	ldi	r24, 0xFF	; 255
    43c0:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_write>
    43c4:	8f e2       	ldi	r24, 0x2F	; 47
    43c6:	92 ef       	ldi	r25, 0xF2	; 242
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <main+0x92>
    43cc:	00 c0       	rjmp	.+0      	; 0x43ce <main+0x98>
    43ce:	00 00       	nop
		_delay_ms(31);
		
		if (PINC & PWRDET)
    43d0:	32 99       	sbic	0x06, 2	; 6
			power_off();
    43d2:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <power_off>
    43d6:	99 81       	ldd	r25, Y+1	; 0x01
    43d8:	91 50       	subi	r25, 0x01	; 1
    43da:	99 83       	std	Y+1, r25	; 0x01
	////////// Power On //////////////////////////////////////////////////////
	// Turn Transmitter on if button is pressed for 0.5 s
	LCD_home();
	LCD_string("    PATA TX     ", 16);
	LCD_NWL();
	for (uint8_t i = 0; i < 16; i++)
    43dc:	91 11       	cpse	r25, r1
    43de:	ef cf       	rjmp	.-34     	; 0x43be <main+0x88>
		_delay_ms(31);
		
		if (PINC & PWRDET)
			power_off();
	}
	power_sw_toggle = STBY;
    43e0:	82 e0       	ldi	r24, 0x02	; 2
    43e2:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <power_sw_toggle>
	PORTD |= PWRTOGL;
    43e6:	5c 9a       	sbi	0x0b, 4	; 11
	LCD_CLEAR();
    43e8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
	////////// Throttle Safety Check//////////////////////////////////////////
	// If Throttle is not 0 (>5), do not boot the transmitter
	while (1)
	{
		stick_read();
		if (channel[THROTTLE] < THROTTLE_MIN)
    43ec:	0c eb       	ldi	r16, 0xBC	; 188
    43ee:	15 e0       	ldi	r17, 0x05	; 5
		else
		{
			LCD_string(" THROTTLE HIGH! ", 16);
			LCD_NWL();
			LCD_string(" MENU TO IGNORE ", 16);
			buzzer_freq = 1000;
    43f0:	0f 2e       	mov	r0, r31
    43f2:	f8 ee       	ldi	r31, 0xE8	; 232
    43f4:	ef 2e       	mov	r14, r31
    43f6:	f3 e0       	ldi	r31, 0x03	; 3
    43f8:	ff 2e       	mov	r15, r31
    43fa:	f0 2d       	mov	r31, r0
			buzzer_setting[PERIOD] = 50;
    43fc:	0f 2e       	mov	r0, r31
    43fe:	f2 e3       	ldi	r31, 0x32	; 50
    4400:	df 2e       	mov	r13, r31
    4402:	f0 2d       	mov	r31, r0
			power_sw_toggle = OFF;
			
		// Power off
		if (!(PINC & PWRDET) && (power_sw_toggle == OFF))
		{
			power_sw_toggle = ON;
    4404:	cc 24       	eor	r12, r12
    4406:	c3 94       	inc	r12
	
	////////// Throttle Safety Check//////////////////////////////////////////
	// If Throttle is not 0 (>5), do not boot the transmitter
	while (1)
	{
		stick_read();
    4408:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <stick_read>
		if (channel[THROTTLE] < THROTTLE_MIN)
    440c:	f8 01       	movw	r30, r16
    440e:	82 81       	ldd	r24, Z+2	; 0x02
    4410:	82 33       	cpi	r24, 0x32	; 50
    4412:	20 f4       	brcc	.+8      	; 0x441c <main+0xe6>
		{
			power_sw_toggle = STBY;
    4414:	82 e0       	ldi	r24, 0x02	; 2
    4416:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <power_sw_toggle>
			break;
    441a:	47 c0       	rjmp	.+142    	; 0x44aa <main+0x174>
		}
		else
		{
			LCD_string(" THROTTLE HIGH! ", 16);
    441c:	60 e1       	ldi	r22, 0x10	; 16
    441e:	8f e2       	ldi	r24, 0x2F	; 47
    4420:	95 e0       	ldi	r25, 0x05	; 5
    4422:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
			LCD_NWL();
    4426:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
			LCD_string(" MENU TO IGNORE ", 16);
    442a:	60 e1       	ldi	r22, 0x10	; 16
    442c:	80 e4       	ldi	r24, 0x40	; 64
    442e:	95 e0       	ldi	r25, 0x05	; 5
    4430:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
			buzzer_freq = 1000;
    4434:	f0 92 e6 05 	sts	0x05E6, r15	; 0x8005e6 <buzzer_freq+0x1>
    4438:	e0 92 e5 05 	sts	0x05E5, r14	; 0x8005e5 <buzzer_freq>
			buzzer_setting[PERIOD] = 50;
    443c:	eb ea       	ldi	r30, 0xAB	; 171
    443e:	f5 e0       	ldi	r31, 0x05	; 5
    4440:	d0 82       	st	Z, r13
			buzzer_setting[SETTING] |= BUZZER_SET;
    4442:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <buzzer_setting+0x1>
    4446:	88 60       	ori	r24, 0x08	; 8
    4448:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <buzzer_setting+0x1>
			
		}
		// If menu buttons are pressed, ignore throttle lock
		if (menu_read())
    444c:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
    4450:	88 23       	and	r24, r24
    4452:	21 f0       	breq	.+8      	; 0x445c <main+0x126>
		{
			power_sw_toggle = STBY;
    4454:	82 e0       	ldi	r24, 0x02	; 2
    4456:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <power_sw_toggle>
			break;
    445a:	27 c0       	rjmp	.+78     	; 0x44aa <main+0x174>
		}		
		
		////////// Power Off//////////////////////////////////////////////////////
		// Button release detect
		// Without this, transmitter would be turned on and turned off immediately
		if ((power_sw_toggle == STBY) && (PINC & PWRDET))
    445c:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <power_sw_toggle>
    4460:	82 30       	cpi	r24, 0x02	; 2
    4462:	39 f4       	brne	.+14     	; 0x4472 <main+0x13c>
    4464:	32 9b       	sbis	0x06, 2	; 6
    4466:	e5 c2       	rjmp	.+1482   	; 0x4a32 <main+0x6fc>
			power_sw_toggle = OFF;
    4468:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <power_sw_toggle>
			
		// Power off
		if (!(PINC & PWRDET) && (power_sw_toggle == OFF))
    446c:	32 9b       	sbis	0x06, 2	; 6
    446e:	05 c0       	rjmp	.+10     	; 0x447a <main+0x144>
    4470:	e4 c2       	rjmp	.+1480   	; 0x4a3a <main+0x704>
    4472:	32 99       	sbic	0x06, 2	; 6
    4474:	07 c0       	rjmp	.+14     	; 0x4484 <main+0x14e>
    4476:	81 11       	cpse	r24, r1
    4478:	05 c0       	rjmp	.+10     	; 0x4484 <main+0x14e>
		{
			power_sw_toggle = ON;
    447a:	c0 92 aa 05 	sts	0x05AA, r12	; 0x8005aa <power_sw_toggle>
			timer_8ms_power = 0;
    447e:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <timer_8ms_power>
    4482:	0f c0       	rjmp	.+30     	; 0x44a2 <main+0x16c>
		}
		else if ((timer_8ms_power > 125) && (power_sw_toggle == ON))
    4484:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <timer_8ms_power>
    4488:	8e 37       	cpi	r24, 0x7E	; 126
    448a:	58 f0       	brcs	.+22     	; 0x44a2 <main+0x16c>
    448c:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <power_sw_toggle>
    4490:	81 30       	cpi	r24, 0x01	; 1
    4492:	39 f4       	brne	.+14     	; 0x44a2 <main+0x16c>
		{
			// Power off only if button is pressed for 1 s
			if (PINC & PWRDET)
    4494:	32 9b       	sbis	0x06, 2	; 6
    4496:	03 c0       	rjmp	.+6      	; 0x449e <main+0x168>
				power_sw_toggle = OFF;
    4498:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <power_sw_toggle>
    449c:	02 c0       	rjmp	.+4      	; 0x44a2 <main+0x16c>
			else
				power_off();
    449e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <power_off>
			
		}
		
		buzzer_switch();
    44a2:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
		PORTD |= PWRTOGL;
    44a6:	5c 9a       	sbi	0x0b, 4	; 11
		
	} // while (1)
    44a8:	af cf       	rjmp	.-162    	; 0x4408 <main+0xd2>
	
	
	////////// Booting Music /////////////////////////////////////////////////
	buzzer(0);
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    44b2:	ff ef       	ldi	r31, 0xFF	; 255
    44b4:	20 e7       	ldi	r18, 0x70	; 112
    44b6:	82 e0       	ldi	r24, 0x02	; 2
    44b8:	f1 50       	subi	r31, 0x01	; 1
    44ba:	20 40       	sbci	r18, 0x00	; 0
    44bc:	80 40       	sbci	r24, 0x00	; 0
    44be:	e1 f7       	brne	.-8      	; 0x44b8 <main+0x182>
    44c0:	00 c0       	rjmp	.+0      	; 0x44c2 <main+0x18c>
    44c2:	00 00       	nop
	_delay_ms(100);
	buzzer(1000);
    44c4:	88 ee       	ldi	r24, 0xE8	; 232
    44c6:	93 e0       	ldi	r25, 0x03	; 3
    44c8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    44cc:	9f ef       	ldi	r25, 0xFF	; 255
    44ce:	e0 e7       	ldi	r30, 0x70	; 112
    44d0:	f2 e0       	ldi	r31, 0x02	; 2
    44d2:	91 50       	subi	r25, 0x01	; 1
    44d4:	e0 40       	sbci	r30, 0x00	; 0
    44d6:	f0 40       	sbci	r31, 0x00	; 0
    44d8:	e1 f7       	brne	.-8      	; 0x44d2 <main+0x19c>
    44da:	00 c0       	rjmp	.+0      	; 0x44dc <main+0x1a6>
    44dc:	00 00       	nop
	_delay_ms(100);
	buzzer(0);
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    44e6:	2f e7       	ldi	r18, 0x7F	; 127
    44e8:	88 e3       	ldi	r24, 0x38	; 56
    44ea:	91 e0       	ldi	r25, 0x01	; 1
    44ec:	21 50       	subi	r18, 0x01	; 1
    44ee:	80 40       	sbci	r24, 0x00	; 0
    44f0:	90 40       	sbci	r25, 0x00	; 0
    44f2:	e1 f7       	brne	.-8      	; 0x44ec <main+0x1b6>
    44f4:	00 c0       	rjmp	.+0      	; 0x44f6 <main+0x1c0>
    44f6:	00 00       	nop
	_delay_ms(50);
	buzzer(1000);
    44f8:	88 ee       	ldi	r24, 0xE8	; 232
    44fa:	93 e0       	ldi	r25, 0x03	; 3
    44fc:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    4500:	ef ef       	ldi	r30, 0xFF	; 255
    4502:	f0 e7       	ldi	r31, 0x70	; 112
    4504:	22 e0       	ldi	r18, 0x02	; 2
    4506:	e1 50       	subi	r30, 0x01	; 1
    4508:	f0 40       	sbci	r31, 0x00	; 0
    450a:	20 40       	sbci	r18, 0x00	; 0
    450c:	e1 f7       	brne	.-8      	; 0x4506 <main+0x1d0>
    450e:	00 c0       	rjmp	.+0      	; 0x4510 <main+0x1da>
    4510:	00 00       	nop
	_delay_ms(100);
	buzzer(0);
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
	
	
	// TX battery check
	//TX_Bat_est = transmitter_bat_chk();
	TX_Bat_est = transmitter_bat_chk();
    451a:	0e 94 93 06 	call	0xd26	; 0xd26 <transmitter_bat_chk>
    451e:	68 2f       	mov	r22, r24
    4520:	70 e0       	ldi	r23, 0x00	; 0
    4522:	80 e0       	ldi	r24, 0x00	; 0
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <__floatunsisf>
    452a:	60 93 d2 05 	sts	0x05D2, r22	; 0x8005d2 <TX_Bat_est>
    452e:	70 93 d3 05 	sts	0x05D3, r23	; 0x8005d3 <TX_Bat_est+0x1>
    4532:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <TX_Bat_est+0x2>
    4536:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <TX_Bat_est+0x3>
	
	// Main loop
	LCD_CLEAR();
    453a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_CLEAR>
			{
				battery_alarm &= ~ALARM_TOGL;
				
				// buzzer setting
				buzzer_freq = 2000;
				buzzer_setting[PERIOD] = 50;
    453e:	0f 2e       	mov	r0, r31
    4540:	fb ea       	ldi	r31, 0xAB	; 171
    4542:	4f 2e       	mov	r4, r31
    4544:	f5 e0       	ldi	r31, 0x05	; 5
    4546:	5f 2e       	mov	r5, r31
    4548:	f0 2d       	mov	r31, r0
		////////// LCD ///////////////////////////////////////////////////////////
		// Main Page //////////////////////
		if (menu_input == 0)
		{
			lcd1 = "MODELX  X  X.XXV";
			lcd2 = "A   E   R       ";
    454a:	0f 2e       	mov	r0, r31
    454c:	f2 e6       	ldi	r31, 0x62	; 98
    454e:	6f 2e       	mov	r6, r31
    4550:	f5 e0       	ldi	r31, 0x05	; 5
    4552:	7f 2e       	mov	r7, r31
    4554:	f0 2d       	mov	r31, r0
			
			// TX battery voltage - calculate each digit
			uint8_t temp_TX_Bat_est;
			temp_TX_Bat_est = (uint8_t)TX_Bat_est;
			
			lcd_bat[0] = (5*temp_TX_Bat_est)>>8;
    4556:	0f 2e       	mov	r0, r31
    4558:	f7 ed       	ldi	r31, 0xD7	; 215
    455a:	cf 2e       	mov	r12, r31
    455c:	f5 e0       	ldi	r31, 0x05	; 5
    455e:	df 2e       	mov	r13, r31
    4560:	f0 2d       	mov	r31, r0
			lcd1[13] = lcd_bat[1] + 48;
			lcd1[14] = lcd_bat[2] + 48;
			
			
			// Second line
			if (trim[AILERON] >= 0)
    4562:	0f 2e       	mov	r0, r31
    4564:	f7 eb       	ldi	r31, 0xB7	; 183
    4566:	2f 2e       	mov	r2, r31
    4568:	f5 e0       	ldi	r31, 0x05	; 5
    456a:	3f 2e       	mov	r3, r31
    456c:	f0 2d       	mov	r31, r0
	while (1)
	{
		////////// Enter Menu Setting Mode ///////////////////////////////////////
		// If M1 & M2 is pressed together, enter menu setting mode
		// Since there are two display modes, limit input to two
		if (menu_read())
    456e:	0e 94 01 06 	call	0xc02	; 0xc02 <menu_read>
    4572:	88 23       	and	r24, r24
    4574:	99 f0       	breq	.+38     	; 0x459c <main+0x266>
		{
			buzzer(1500);
    4576:	8c ed       	ldi	r24, 0xDC	; 220
    4578:	95 e0       	ldi	r25, 0x05	; 5
    457a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    457e:	8f e7       	ldi	r24, 0x7F	; 127
    4580:	99 ea       	ldi	r25, 0xA9	; 169
    4582:	e3 e0       	ldi	r30, 0x03	; 3
    4584:	81 50       	subi	r24, 0x01	; 1
    4586:	90 40       	sbci	r25, 0x00	; 0
    4588:	e0 40       	sbci	r30, 0x00	; 0
    458a:	e1 f7       	brne	.-8      	; 0x4584 <main+0x24e>
    458c:	00 c0       	rjmp	.+0      	; 0x458e <main+0x258>
    458e:	00 00       	nop
			_delay_ms(150);
			buzzer(0);
    4590:	80 e0       	ldi	r24, 0x00	; 0
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
			menu();
    4598:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <menu>
		}
		// Menu input limit
		// 0: main page
		// 1: Monitor page - (aileron, elevator, throttle, rudder)
		// 2: Monitor page - (throttle, rudder, CH5)
		if (menu_input < 0)
    459c:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_input>
    45a0:	88 23       	and	r24, r24
    45a2:	1c f4       	brge	.+6      	; 0x45aa <main+0x274>
			menu_input = 0;
    45a4:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menu_input>
    45a8:	05 c0       	rjmp	.+10     	; 0x45b4 <main+0x27e>
		else if (menu_input > 2)
    45aa:	83 30       	cpi	r24, 0x03	; 3
    45ac:	1c f0       	brlt	.+6      	; 0x45b4 <main+0x27e>
			menu_input = 2;
    45ae:	f2 e0       	ldi	r31, 0x02	; 2
    45b0:	f0 93 ce 05 	sts	0x05CE, r31	; 0x8005ce <menu_input>
			
		
		////////// Power managing ////////////////////////////////////////////////
		// If power switch is off, save trim values and turn transmitter off
		if ((power_sw_toggle == STBY) && (PINC & PWRDET))
    45b4:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <power_sw_toggle>
    45b8:	82 30       	cpi	r24, 0x02	; 2
    45ba:	39 f4       	brne	.+14     	; 0x45ca <main+0x294>
    45bc:	32 9b       	sbis	0x06, 2	; 6
    45be:	3b c2       	rjmp	.+1142   	; 0x4a36 <main+0x700>
			power_sw_toggle = OFF;
    45c0:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <power_sw_toggle>
		if (!(PINC & PWRDET) && (power_sw_toggle == OFF))
    45c4:	32 9b       	sbis	0x06, 2	; 6
    45c6:	05 c0       	rjmp	.+10     	; 0x45d2 <main+0x29c>
    45c8:	3b c2       	rjmp	.+1142   	; 0x4a40 <main+0x70a>
    45ca:	32 99       	sbic	0x06, 2	; 6
    45cc:	08 c0       	rjmp	.+16     	; 0x45de <main+0x2a8>
    45ce:	81 11       	cpse	r24, r1
    45d0:	06 c0       	rjmp	.+12     	; 0x45de <main+0x2a8>
		{
			power_sw_toggle = ON;
    45d2:	21 e0       	ldi	r18, 0x01	; 1
    45d4:	20 93 aa 05 	sts	0x05AA, r18	; 0x8005aa <power_sw_toggle>
			timer_8ms_power = 0;
    45d8:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <timer_8ms_power>
    45dc:	0f c0       	rjmp	.+30     	; 0x45fc <main+0x2c6>
		}
		else if ((timer_8ms_power > 125) && (power_sw_toggle == ON))
    45de:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <timer_8ms_power>
    45e2:	8e 37       	cpi	r24, 0x7E	; 126
    45e4:	58 f0       	brcs	.+22     	; 0x45fc <main+0x2c6>
    45e6:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <power_sw_toggle>
    45ea:	81 30       	cpi	r24, 0x01	; 1
    45ec:	39 f4       	brne	.+14     	; 0x45fc <main+0x2c6>
		{
			// Power off only if button is pressed for 1 s
			if (PINC & PWRDET)
    45ee:	32 9b       	sbis	0x06, 2	; 6
    45f0:	03 c0       	rjmp	.+6      	; 0x45f8 <main+0x2c2>
				power_sw_toggle = OFF;
    45f2:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <power_sw_toggle>
    45f6:	02 c0       	rjmp	.+4      	; 0x45fc <main+0x2c6>
			else
				power_off();
    45f8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <power_off>
		}
		
		// Low Battery Shutdown
		// If battery is lower than 3.7 V, ring buzzer 5 times
		// If battery is lower than 3.5 V, the device is powered off.
		TX_bat_cnt_1++;
    45fc:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <TX_bat_cnt_1>
    4600:	8f 5f       	subi	r24, 0xFF	; 255
		if (TX_bat_cnt_1 > 50)
    4602:	83 33       	cpi	r24, 0x33	; 51
    4604:	18 f4       	brcc	.+6      	; 0x460c <main+0x2d6>
		}
		
		// Low Battery Shutdown
		// If battery is lower than 3.7 V, ring buzzer 5 times
		// If battery is lower than 3.5 V, the device is powered off.
		TX_bat_cnt_1++;
    4606:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <TX_bat_cnt_1>
    460a:	69 c0       	rjmp	.+210    	; 0x46de <main+0x3a8>
		if (TX_bat_cnt_1 > 50)
		{
			TX_bat_cnt_1 = 0;
    460c:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <TX_bat_cnt_1>
			TX_bat_mes = transmitter_bat_chk();
    4610:	0e 94 93 06 	call	0xd26	; 0xd26 <transmitter_bat_chk>
    4614:	18 2f       	mov	r17, r24
    4616:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <TX_bat_mes>
			TX_Bat_est = ALPHA*TX_Bat_est + (1-ALPHA)*TX_bat_mes;	// Exponentially weighted moving average filter
    461a:	2c ee       	ldi	r18, 0xEC	; 236
    461c:	31 e5       	ldi	r19, 0x51	; 81
    461e:	48 e7       	ldi	r20, 0x78	; 120
    4620:	5f e3       	ldi	r21, 0x3F	; 63
    4622:	60 91 d2 05 	lds	r22, 0x05D2	; 0x8005d2 <TX_Bat_est>
    4626:	70 91 d3 05 	lds	r23, 0x05D3	; 0x8005d3 <TX_Bat_est+0x1>
    462a:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <TX_Bat_est+0x2>
    462e:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <TX_Bat_est+0x3>
    4632:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <__mulsf3>
    4636:	4b 01       	movw	r8, r22
    4638:	5c 01       	movw	r10, r24
    463a:	61 2f       	mov	r22, r17
    463c:	70 e0       	ldi	r23, 0x00	; 0
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__floatsisf>
    4646:	20 e8       	ldi	r18, 0x80	; 128
    4648:	32 ec       	ldi	r19, 0xC2	; 194
    464a:	45 ef       	ldi	r20, 0xF5	; 245
    464c:	5c e3       	ldi	r21, 0x3C	; 60
    464e:	0e 94 73 27 	call	0x4ee6	; 0x4ee6 <__mulsf3>
    4652:	9b 01       	movw	r18, r22
    4654:	ac 01       	movw	r20, r24
    4656:	c5 01       	movw	r24, r10
    4658:	b4 01       	movw	r22, r8
    465a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__addsf3>
    465e:	4b 01       	movw	r8, r22
    4660:	5c 01       	movw	r10, r24
    4662:	60 93 d2 05 	sts	0x05D2, r22	; 0x8005d2 <TX_Bat_est>
    4666:	70 93 d3 05 	sts	0x05D3, r23	; 0x8005d3 <TX_Bat_est+0x1>
    466a:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <TX_Bat_est+0x2>
    466e:	90 93 d5 05 	sts	0x05D5, r25	; 0x8005d5 <TX_Bat_est+0x3>
			
			// Battery 3.7 V, alarm 4 times
			if (((TX_Bat_est) < LOW) && (battery_alarm & ALARM_TOGL))
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	4e e3       	ldi	r20, 0x3E	; 62
    4678:	53 e4       	ldi	r21, 0x43	; 67
    467a:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__cmpsf2>
    467e:	88 23       	and	r24, r24
    4680:	9c f4       	brge	.+38     	; 0x46a8 <main+0x372>
    4682:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <battery_alarm>
    4686:	82 ff       	sbrs	r24, 2
    4688:	0f c0       	rjmp	.+30     	; 0x46a8 <main+0x372>
			{
				battery_alarm &= ~ALARM_TOGL;
    468a:	8b 7f       	andi	r24, 0xFB	; 251
    468c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <battery_alarm>
				
				// buzzer setting
				buzzer_freq = 2000;
    4690:	80 ed       	ldi	r24, 0xD0	; 208
    4692:	97 e0       	ldi	r25, 0x07	; 7
    4694:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
    4698:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
				buzzer_setting[PERIOD] = 50;
    469c:	22 e3       	ldi	r18, 0x32	; 50
    469e:	f2 01       	movw	r30, r4
    46a0:	20 83       	st	Z, r18
				buzzer_setting[SETTING] = BUZZER_SET|4;	// Repeat 5 times
    46a2:	8c e0       	ldi	r24, 0x0C	; 12
    46a4:	81 83       	std	Z+1, r24	; 0x01
    46a6:	1b c0       	rjmp	.+54     	; 0x46de <main+0x3a8>
					
			}
			// Battery 3.5 V, turn off
			else if ((TX_Bat_est) < CRIT)
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	44 e3       	ldi	r20, 0x34	; 52
    46ae:	53 e4       	ldi	r21, 0x43	; 67
    46b0:	c5 01       	movw	r24, r10
    46b2:	b4 01       	movw	r22, r8
    46b4:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <__cmpsf2>
    46b8:	88 23       	and	r24, r24
    46ba:	8c f4       	brge	.+34     	; 0x46de <main+0x3a8>
			{
				buzzer(2000);
    46bc:	80 ed       	ldi	r24, 0xD0	; 208
    46be:	97 e0       	ldi	r25, 0x07	; 7
    46c0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
    46c4:	9f ef       	ldi	r25, 0xFF	; 255
    46c6:	e9 e6       	ldi	r30, 0x69	; 105
    46c8:	f8 e1       	ldi	r31, 0x18	; 24
    46ca:	91 50       	subi	r25, 0x01	; 1
    46cc:	e0 40       	sbci	r30, 0x00	; 0
    46ce:	f0 40       	sbci	r31, 0x00	; 0
    46d0:	e1 f7       	brne	.-8      	; 0x46ca <main+0x394>
    46d2:	00 c0       	rjmp	.+0      	; 0x46d4 <main+0x39e>
    46d4:	00 00       	nop
				_delay_ms(1000);
				buzzer(0);
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <buzzer>
		
		// If runtime > RUMTIME, ring buzzer 2 times
		// If runtime is longer than 15 min, turn the device off
// 		if (runtime > runtime_set)
// 			power_off();
		if ((runtime > RUNTIME10) && (buzzer_flg == OFF))
    46de:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <runtime>
    46e2:	90 91 c7 05 	lds	r25, 0x05C7	; 0x8005c7 <runtime+0x1>
    46e6:	89 35       	cpi	r24, 0x59	; 89
    46e8:	92 40       	sbci	r25, 0x02	; 2
    46ea:	98 f0       	brcs	.+38     	; 0x4712 <main+0x3dc>
    46ec:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <__data_end>
    46f0:	81 11       	cpse	r24, r1
    46f2:	0f c0       	rjmp	.+30     	; 0x4712 <main+0x3dc>
		{
			buzzer_flg = ON;			
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <__data_end>
			buzzer_freq = 2000;
    46fa:	80 ed       	ldi	r24, 0xD0	; 208
    46fc:	97 e0       	ldi	r25, 0x07	; 7
    46fe:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <buzzer_freq+0x1>
    4702:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <buzzer_freq>
			buzzer_setting[PERIOD] = 31;
    4706:	2f e1       	ldi	r18, 0x1F	; 31
    4708:	f2 01       	movw	r30, r4
    470a:	20 83       	st	Z, r18
			buzzer_setting[SETTING] |= BUZZER_SET|1;	// Repeat 2 times
    470c:	81 81       	ldd	r24, Z+1	; 0x01
    470e:	89 60       	ori	r24, 0x09	; 9
    4710:	81 83       	std	Z+1, r24	; 0x01
		}
		
		
		////////// Read Inputs & Process Data ////////////////////////////////////
		stick_read();
    4712:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <stick_read>
		switch_read();
    4716:	0e 94 86 05 	call	0xb0c	; 0xb0c <switch_read>
		trim_read();
    471a:	0e 94 25 04 	call	0x84a	; 0x84a <trim_read>
		set_switch();
    471e:	0e 94 a3 06 	call	0xd46	; 0xd46 <set_switch>
		make_val();
    4722:	0e 94 55 07 	call	0xeaa	; 0xeaa <make_val>
		
		
		////////// Transmit Data /////////////////////////////////////////////////
		// PPM mode
		if ((mixing_val_3 & RF_MODE_MASK) == JF24)
    4726:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    472a:	8f 70       	andi	r24, 0x0F	; 15
    472c:	81 30       	cpi	r24, 0x01	; 1
    472e:	19 f4       	brne	.+6      	; 0x4736 <main+0x400>
		{
			JF24_RF();
    4730:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <JF24_RF>
    4734:	24 c0       	rjmp	.+72     	; 0x477e <main+0x448>
		}
		// Debug mode (UART mode)
		else if ((mixing_val_3 & RF_MODE_MASK) == UART)
    4736:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    473a:	8f 70       	andi	r24, 0x0F	; 15
    473c:	83 30       	cpi	r24, 0x03	; 3
    473e:	81 f4       	brne	.+32     	; 0x4760 <main+0x42a>
		{
			UART_NWL();
    4740:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <UART_NWL>
			UART_NWL();
    4744:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <UART_NWL>
			UART_tx_m(channel, 5);
    4748:	65 e0       	ldi	r22, 0x05	; 5
    474a:	8c eb       	ldi	r24, 0xBC	; 188
    474c:	95 e0       	ldi	r25, 0x05	; 5
    474e:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <UART_tx_m>
    4752:	8f e1       	ldi	r24, 0x1F	; 31
    4754:	9e e4       	ldi	r25, 0x4E	; 78
    4756:	01 97       	sbiw	r24, 0x01	; 1
    4758:	f1 f7       	brne	.-4      	; 0x4756 <main+0x420>
    475a:	00 c0       	rjmp	.+0      	; 0x475c <main+0x426>
    475c:	00 00       	nop
    475e:	0f c0       	rjmp	.+30     	; 0x477e <main+0x448>
			_delay_ms(10);
		}
		// NRF24l01 module mode
		else if ((mixing_val_3 & RF_MODE_MASK) == NRF)
    4760:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    4764:	8f 70       	andi	r24, 0x0F	; 15
    4766:	82 30       	cpi	r24, 0x02	; 2
    4768:	11 f4       	brne	.+4      	; 0x476e <main+0x438>
		{
			asm("nop"); // Todo
    476a:	00 00       	nop
    476c:	08 c0       	rjmp	.+16     	; 0x477e <main+0x448>
		}
		// BLE module mode
		else if ((mixing_val_3 & RF_MODE_MASK) == BLE)
    476e:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    4772:	8f 70       	andi	r24, 0x0F	; 15
    4774:	84 30       	cpi	r24, 0x04	; 4
    4776:	11 f4       	brne	.+4      	; 0x477c <main+0x446>
		{
			asm("nop"); // Todo
    4778:	00 00       	nop
    477a:	01 c0       	rjmp	.+2      	; 0x477e <main+0x448>
		}
		else
		{
			asm("nop");
    477c:	00 00       	nop
		}
		
		
		////////// LCD ///////////////////////////////////////////////////////////
		// Main Page //////////////////////
		if (menu_input == 0)
    477e:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menu_input>
    4782:	81 11       	cpse	r24, r1
    4784:	fd c0       	rjmp	.+506    	; 0x4980 <main+0x64a>
		{
			lcd1 = "MODELX  X  X.XXV";
    4786:	e1 e5       	ldi	r30, 0x51	; 81
    4788:	f5 e0       	ldi	r31, 0x05	; 5
    478a:	f0 93 43 01 	sts	0x0143, r31	; 0x800143 <lcd1+0x1>
    478e:	e0 93 42 01 	sts	0x0142, r30	; 0x800142 <lcd1>
			lcd2 = "A   E   R       ";
    4792:	70 92 41 01 	sts	0x0141, r7	; 0x800141 <lcd2+0x1>
    4796:	60 92 40 01 	sts	0x0140, r6	; 0x800140 <lcd2>
			
			// First line
			lcd1[5] = cur_model + 49;
    479a:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <cur_model>
    479e:	8f 5c       	subi	r24, 0xCF	; 207
    47a0:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <battery_alarm+0x412>
			switch (mixing_val_3 & RF_MODE_MASK)
    47a4:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <mixing_val_3>
    47a8:	8f 70       	andi	r24, 0x0F	; 15
    47aa:	82 30       	cpi	r24, 0x02	; 2
    47ac:	89 f0       	breq	.+34     	; 0x47d0 <main+0x49a>
    47ae:	18 f4       	brcc	.+6      	; 0x47b6 <main+0x480>
    47b0:	81 30       	cpi	r24, 0x01	; 1
    47b2:	31 f0       	breq	.+12     	; 0x47c0 <main+0x48a>
    47b4:	15 c0       	rjmp	.+42     	; 0x47e0 <main+0x4aa>
    47b6:	83 30       	cpi	r24, 0x03	; 3
    47b8:	39 f0       	breq	.+14     	; 0x47c8 <main+0x492>
    47ba:	84 30       	cpi	r24, 0x04	; 4
    47bc:	69 f0       	breq	.+26     	; 0x47d8 <main+0x4a2>
    47be:	10 c0       	rjmp	.+32     	; 0x47e0 <main+0x4aa>
			{
				case JF24:
					lcd1[8] = 'J';
    47c0:	8a e4       	ldi	r24, 0x4A	; 74
    47c2:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <battery_alarm+0x415>
					break;
    47c6:	0f c0       	rjmp	.+30     	; 0x47e6 <main+0x4b0>
				
				case UART:
					lcd1[8] = 'U';
    47c8:	85 e5       	ldi	r24, 0x55	; 85
    47ca:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <battery_alarm+0x415>
					break;
    47ce:	0b c0       	rjmp	.+22     	; 0x47e6 <main+0x4b0>
				
				case NRF:
					lcd1[8] = 'N';
    47d0:	8e e4       	ldi	r24, 0x4E	; 78
    47d2:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <battery_alarm+0x415>
					break;
    47d6:	07 c0       	rjmp	.+14     	; 0x47e6 <main+0x4b0>
				
				case BLE:
					lcd1[8] = 'B';
    47d8:	82 e4       	ldi	r24, 0x42	; 66
    47da:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <battery_alarm+0x415>
					break;
    47de:	03 c0       	rjmp	.+6      	; 0x47e6 <main+0x4b0>
				
				default:
					lcd1[8] = 'D';
    47e0:	84 e4       	ldi	r24, 0x44	; 68
    47e2:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <battery_alarm+0x415>
			
			// TX battery voltage - calculate each digit
			uint8_t temp_TX_Bat_est;
			temp_TX_Bat_est = (uint8_t)TX_Bat_est;
			
			lcd_bat[0] = (5*temp_TX_Bat_est)>>8;
    47e6:	60 91 d2 05 	lds	r22, 0x05D2	; 0x8005d2 <TX_Bat_est>
    47ea:	70 91 d3 05 	lds	r23, 0x05D3	; 0x8005d3 <TX_Bat_est+0x1>
    47ee:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <TX_Bat_est+0x2>
    47f2:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <TX_Bat_est+0x3>
    47f6:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__fixunssfsi>
    47fa:	70 e0       	ldi	r23, 0x00	; 0
    47fc:	cb 01       	movw	r24, r22
    47fe:	88 0f       	add	r24, r24
    4800:	99 1f       	adc	r25, r25
    4802:	88 0f       	add	r24, r24
    4804:	99 1f       	adc	r25, r25
    4806:	68 0f       	add	r22, r24
    4808:	79 1f       	adc	r23, r25
    480a:	07 2f       	mov	r16, r23
    480c:	11 27       	eor	r17, r17
    480e:	07 fd       	sbrc	r16, 7
    4810:	1a 95       	dec	r17
    4812:	f6 01       	movw	r30, r12
    4814:	00 83       	st	Z, r16
			lcd_bat[1] = 5*temp_TX_Bat_est/25.6 - lcd_bat[0]*10;
    4816:	07 2e       	mov	r0, r23
    4818:	00 0c       	add	r0, r0
    481a:	88 0b       	sbc	r24, r24
    481c:	99 0b       	sbc	r25, r25
    481e:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__floatsisf>
    4822:	4b 01       	movw	r8, r22
    4824:	5c 01       	movw	r10, r24
    4826:	78 01       	movw	r14, r16
    4828:	ff 24       	eor	r15, r15
    482a:	2d ec       	ldi	r18, 0xCD	; 205
    482c:	3c ec       	ldi	r19, 0xCC	; 204
    482e:	4c ec       	ldi	r20, 0xCC	; 204
    4830:	51 e4       	ldi	r21, 0x41	; 65
    4832:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__divsf3>
    4836:	69 83       	std	Y+1, r22	; 0x01
    4838:	7a 83       	std	Y+2, r23	; 0x02
    483a:	8b 83       	std	Y+3, r24	; 0x03
    483c:	9c 83       	std	Y+4, r25	; 0x04
    483e:	b7 01       	movw	r22, r14
    4840:	66 0f       	add	r22, r22
    4842:	77 1f       	adc	r23, r23
    4844:	c7 01       	movw	r24, r14
    4846:	88 0f       	add	r24, r24
    4848:	99 1f       	adc	r25, r25
    484a:	88 0f       	add	r24, r24
    484c:	99 1f       	adc	r25, r25
    484e:	88 0f       	add	r24, r24
    4850:	99 1f       	adc	r25, r25
    4852:	68 0f       	add	r22, r24
    4854:	79 1f       	adc	r23, r25
    4856:	07 2e       	mov	r0, r23
    4858:	00 0c       	add	r0, r0
    485a:	88 0b       	sbc	r24, r24
    485c:	99 0b       	sbc	r25, r25
    485e:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__floatsisf>
    4862:	9b 01       	movw	r18, r22
    4864:	ac 01       	movw	r20, r24
    4866:	69 81       	ldd	r22, Y+1	; 0x01
    4868:	7a 81       	ldd	r23, Y+2	; 0x02
    486a:	8b 81       	ldd	r24, Y+3	; 0x03
    486c:	9c 81       	ldd	r25, Y+4	; 0x04
    486e:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <__subsf3>
    4872:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__fixunssfsi>
    4876:	16 2f       	mov	r17, r22
    4878:	f6 01       	movw	r30, r12
    487a:	61 83       	std	Z+1, r22	; 0x01
			lcd_bat[2] = (float)(5*temp_TX_Bat_est/2.56 - lcd_bat[1]*10 - lcd_bat[0]*100);
    487c:	2a e0       	ldi	r18, 0x0A	; 10
    487e:	37 ed       	ldi	r19, 0xD7	; 215
    4880:	43 e2       	ldi	r20, 0x23	; 35
    4882:	50 e4       	ldi	r21, 0x40	; 64
    4884:	c5 01       	movw	r24, r10
    4886:	b4 01       	movw	r22, r8
    4888:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__divsf3>
    488c:	4b 01       	movw	r8, r22
    488e:	5c 01       	movw	r10, r24
    4890:	81 2f       	mov	r24, r17
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	9c 01       	movw	r18, r24
    4896:	22 0f       	add	r18, r18
    4898:	33 1f       	adc	r19, r19
    489a:	bc 01       	movw	r22, r24
    489c:	66 0f       	add	r22, r22
    489e:	77 1f       	adc	r23, r23
    48a0:	66 0f       	add	r22, r22
    48a2:	77 1f       	adc	r23, r23
    48a4:	66 0f       	add	r22, r22
    48a6:	77 1f       	adc	r23, r23
    48a8:	62 0f       	add	r22, r18
    48aa:	73 1f       	adc	r23, r19
    48ac:	07 2e       	mov	r0, r23
    48ae:	00 0c       	add	r0, r0
    48b0:	88 0b       	sbc	r24, r24
    48b2:	99 0b       	sbc	r25, r25
    48b4:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__floatsisf>
    48b8:	9b 01       	movw	r18, r22
    48ba:	ac 01       	movw	r20, r24
    48bc:	c5 01       	movw	r24, r10
    48be:	b4 01       	movw	r22, r8
    48c0:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <__subsf3>
    48c4:	4b 01       	movw	r8, r22
    48c6:	5c 01       	movw	r10, r24
    48c8:	84 e6       	ldi	r24, 0x64	; 100
    48ca:	8e 9d       	mul	r24, r14
    48cc:	b0 01       	movw	r22, r0
    48ce:	8f 9d       	mul	r24, r15
    48d0:	70 0d       	add	r23, r0
    48d2:	11 24       	eor	r1, r1
    48d4:	07 2e       	mov	r0, r23
    48d6:	00 0c       	add	r0, r0
    48d8:	88 0b       	sbc	r24, r24
    48da:	99 0b       	sbc	r25, r25
    48dc:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__floatsisf>
    48e0:	9b 01       	movw	r18, r22
    48e2:	ac 01       	movw	r20, r24
    48e4:	c5 01       	movw	r24, r10
    48e6:	b4 01       	movw	r22, r8
    48e8:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <__subsf3>
    48ec:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__fixunssfsi>
    48f0:	f6 01       	movw	r30, r12
    48f2:	62 83       	std	Z+2, r22	; 0x02
			
			lcd1[11] = lcd_bat[0] + 48;
    48f4:	00 5d       	subi	r16, 0xD0	; 208
    48f6:	00 93 5c 05 	sts	0x055C, r16	; 0x80055c <battery_alarm+0x418>
			lcd1[13] = lcd_bat[1] + 48;
    48fa:	10 5d       	subi	r17, 0xD0	; 208
    48fc:	10 93 5e 05 	sts	0x055E, r17	; 0x80055e <battery_alarm+0x41a>
			lcd1[14] = lcd_bat[2] + 48;
    4900:	60 5d       	subi	r22, 0xD0	; 208
    4902:	60 93 5f 05 	sts	0x055F, r22	; 0x80055f <battery_alarm+0x41b>
			
			
			// Second line
			if (trim[AILERON] >= 0)
    4906:	f1 01       	movw	r30, r2
    4908:	80 81       	ld	r24, Z
    490a:	88 23       	and	r24, r24
    490c:	34 f0       	brlt	.+12     	; 0x491a <main+0x5e4>
			{
				lcd2[1] = trim[AILERON] + 48;
    490e:	80 5d       	subi	r24, 0xD0	; 208
    4910:	f3 01       	movw	r30, r6
    4912:	81 83       	std	Z+1, r24	; 0x01
				lcd2[2] = ' ';
    4914:	80 e2       	ldi	r24, 0x20	; 32
    4916:	82 83       	std	Z+2, r24	; 0x02
    4918:	06 c0       	rjmp	.+12     	; 0x4926 <main+0x5f0>
			}
			else
			{
				lcd2[1] = '-';
    491a:	9d e2       	ldi	r25, 0x2D	; 45
    491c:	f3 01       	movw	r30, r6
    491e:	91 83       	std	Z+1, r25	; 0x01
				lcd2[2] = 48 - trim[AILERON];
    4920:	90 e3       	ldi	r25, 0x30	; 48
    4922:	98 1b       	sub	r25, r24
    4924:	92 83       	std	Z+2, r25	; 0x02
			}
			
			if (trim[ELEVATOR] >= 0)
    4926:	f1 01       	movw	r30, r2
    4928:	81 81       	ldd	r24, Z+1	; 0x01
    492a:	88 23       	and	r24, r24
    492c:	4c f0       	brlt	.+18     	; 0x4940 <main+0x60a>
			{
				lcd2[5] = trim[ELEVATOR] + 48;
    492e:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <lcd2>
    4932:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <lcd2+0x1>
    4936:	80 5d       	subi	r24, 0xD0	; 208
    4938:	85 83       	std	Z+5, r24	; 0x05
				lcd2[6] = ' ';
    493a:	80 e2       	ldi	r24, 0x20	; 32
    493c:	86 83       	std	Z+6, r24	; 0x06
    493e:	09 c0       	rjmp	.+18     	; 0x4952 <main+0x61c>
			}
			else
			{
				lcd2[5] = '-';
    4940:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <lcd2>
    4944:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <lcd2+0x1>
    4948:	9d e2       	ldi	r25, 0x2D	; 45
    494a:	95 83       	std	Z+5, r25	; 0x05
				lcd2[6] = 48 - trim[ELEVATOR];
    494c:	90 e3       	ldi	r25, 0x30	; 48
    494e:	98 1b       	sub	r25, r24
    4950:	96 83       	std	Z+6, r25	; 0x06
			}
			
			if (trim[RUDDER] >= 0)
    4952:	f1 01       	movw	r30, r2
    4954:	83 81       	ldd	r24, Z+3	; 0x03
    4956:	88 23       	and	r24, r24
    4958:	4c f0       	brlt	.+18     	; 0x496c <main+0x636>
			{
				lcd2[9] = trim[RUDDER] + 48;
    495a:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <lcd2>
    495e:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <lcd2+0x1>
    4962:	80 5d       	subi	r24, 0xD0	; 208
    4964:	81 87       	std	Z+9, r24	; 0x09
				lcd2[10] = ' ';
    4966:	80 e2       	ldi	r24, 0x20	; 32
    4968:	82 87       	std	Z+10, r24	; 0x0a
    496a:	4e c0       	rjmp	.+156    	; 0x4a08 <main+0x6d2>
			}
			else
			{
				lcd2[9] = '-';
    496c:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <lcd2>
    4970:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <lcd2+0x1>
    4974:	9d e2       	ldi	r25, 0x2D	; 45
    4976:	91 87       	std	Z+9, r25	; 0x09
				lcd2[10] = 48 - trim[RUDDER];
    4978:	90 e3       	ldi	r25, 0x30	; 48
    497a:	98 1b       	sub	r25, r24
    497c:	92 87       	std	Z+10, r25	; 0x0a
    497e:	44 c0       	rjmp	.+136    	; 0x4a08 <main+0x6d2>
			}
		}
		
		// Channel Monitor Page ///////////
		else if (menu_input == 1)
    4980:	81 30       	cpi	r24, 0x01	; 1
    4982:	19 f5       	brne	.+70     	; 0x49ca <main+0x694>
		{
			lcd1 = "A       E       ";
    4984:	83 e7       	ldi	r24, 0x73	; 115
    4986:	95 e0       	ldi	r25, 0x05	; 5
    4988:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <lcd1+0x1>
    498c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <lcd1>
			lcd2 = "T       R       ";
    4990:	e4 e8       	ldi	r30, 0x84	; 132
    4992:	f5 e0       	ldi	r31, 0x05	; 5
    4994:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <lcd2+0x1>
    4998:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <lcd2>
			
			// Aileron
			LCD_guage(channel[AILERON],  0);
    499c:	0c eb       	ldi	r16, 0xBC	; 188
    499e:	15 e0       	ldi	r17, 0x05	; 5
    49a0:	60 e0       	ldi	r22, 0x00	; 0
    49a2:	f8 01       	movw	r30, r16
    49a4:	80 81       	ld	r24, Z
    49a6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_guage>
			LCD_guage(channel[ELEVATOR], 1);
    49aa:	61 e0       	ldi	r22, 0x01	; 1
    49ac:	f8 01       	movw	r30, r16
    49ae:	81 81       	ldd	r24, Z+1	; 0x01
    49b0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_guage>
			LCD_guage(channel[THROTTLE], 2);
    49b4:	62 e0       	ldi	r22, 0x02	; 2
    49b6:	f8 01       	movw	r30, r16
    49b8:	82 81       	ldd	r24, Z+2	; 0x02
    49ba:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_guage>
			LCD_guage(channel[RUDDER],   3);
    49be:	63 e0       	ldi	r22, 0x03	; 3
    49c0:	f8 01       	movw	r30, r16
    49c2:	83 81       	ldd	r24, Z+3	; 0x03
    49c4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_guage>
    49c8:	1f c0       	rjmp	.+62     	; 0x4a08 <main+0x6d2>
			
		}
		else if (menu_input == 2)
    49ca:	82 30       	cpi	r24, 0x02	; 2
    49cc:	e9 f4       	brne	.+58     	; 0x4a08 <main+0x6d2>
		{
			lcd1 = "T       R       ";
    49ce:	84 e8       	ldi	r24, 0x84	; 132
    49d0:	95 e0       	ldi	r25, 0x05	; 5
    49d2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <lcd1+0x1>
    49d6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <lcd1>
			lcd2 = "G               ";
    49da:	e5 e9       	ldi	r30, 0x95	; 149
    49dc:	f5 e0       	ldi	r31, 0x05	; 5
    49de:	f0 93 41 01 	sts	0x0141, r31	; 0x800141 <lcd2+0x1>
    49e2:	e0 93 40 01 	sts	0x0140, r30	; 0x800140 <lcd2>
			
			// Aileron
			LCD_guage(channel[THROTTLE], 0);
    49e6:	0c eb       	ldi	r16, 0xBC	; 188
    49e8:	15 e0       	ldi	r17, 0x05	; 5
    49ea:	60 e0       	ldi	r22, 0x00	; 0
    49ec:	f8 01       	movw	r30, r16
    49ee:	82 81       	ldd	r24, Z+2	; 0x02
    49f0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_guage>
			LCD_guage(channel[RUDDER],   1);
    49f4:	61 e0       	ldi	r22, 0x01	; 1
    49f6:	f8 01       	movw	r30, r16
    49f8:	83 81       	ldd	r24, Z+3	; 0x03
    49fa:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_guage>
			LCD_guage(channel[CH5],     2);
    49fe:	62 e0       	ldi	r22, 0x02	; 2
    4a00:	f8 01       	movw	r30, r16
    4a02:	84 81       	ldd	r24, Z+4	; 0x04
    4a04:	0e 94 63 09 	call	0x12c6	; 0x12c6 <LCD_guage>
		}
		
		
		
		// Print
		LCD_home();
    4a08:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_home>
		LCD_string(lcd1, 16);
    4a0c:	60 e1       	ldi	r22, 0x10	; 16
    4a0e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <lcd1>
    4a12:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <lcd1+0x1>
    4a16:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
		LCD_NWL();
    4a1a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_NWL>
		LCD_string(lcd2, 16);
    4a1e:	60 e1       	ldi	r22, 0x10	; 16
    4a20:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <lcd2>
    4a24:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <lcd2+0x1>
    4a28:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_string>
		
		
		////////// Buzzer ////////////////////////////////////////////////////////
		buzzer_switch();
    4a2c:	0e 94 23 09 	call	0x1246	; 0x1246 <buzzer_switch>
	
	}//while(1)
    4a30:	9e cd       	rjmp	.-1220   	; 0x456e <main+0x238>
		// Without this, transmitter would be turned on and turned off immediately
		if ((power_sw_toggle == STBY) && (PINC & PWRDET))
			power_sw_toggle = OFF;
			
		// Power off
		if (!(PINC & PWRDET) && (power_sw_toggle == OFF))
    4a32:	86 b1       	in	r24, 0x06	; 6
    4a34:	02 c0       	rjmp	.+4      	; 0x4a3a <main+0x704>
		
		////////// Power managing ////////////////////////////////////////////////
		// If power switch is off, save trim values and turn transmitter off
		if ((power_sw_toggle == STBY) && (PINC & PWRDET))
			power_sw_toggle = OFF;
		if (!(PINC & PWRDET) && (power_sw_toggle == OFF))
    4a36:	86 b1       	in	r24, 0x06	; 6
    4a38:	03 c0       	rjmp	.+6      	; 0x4a40 <main+0x70a>
		if (!(PINC & PWRDET) && (power_sw_toggle == OFF))
		{
			power_sw_toggle = ON;
			timer_8ms_power = 0;
		}
		else if ((timer_8ms_power > 125) && (power_sw_toggle == ON))
    4a3a:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <timer_8ms_power>
    4a3e:	31 cd       	rjmp	.-1438   	; 0x44a2 <main+0x16c>
		if (!(PINC & PWRDET) && (power_sw_toggle == OFF))
		{
			power_sw_toggle = ON;
			timer_8ms_power = 0;
		}
		else if ((timer_8ms_power > 125) && (power_sw_toggle == ON))
    4a40:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <timer_8ms_power>
    4a44:	db cd       	rjmp	.-1098   	; 0x45fc <main+0x2c6>

00004a46 <i2c_init>:
    4a46:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4a4a:	8c e0       	ldi	r24, 0x0C	; 12
    4a4c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    4a50:	08 95       	ret

00004a52 <i2c_start>:
    4a52:	94 ea       	ldi	r25, 0xA4	; 164
    4a54:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4a58:	ec eb       	ldi	r30, 0xBC	; 188
    4a5a:	f0 e0       	ldi	r31, 0x00	; 0
    4a5c:	90 81       	ld	r25, Z
    4a5e:	99 23       	and	r25, r25
    4a60:	ec f7       	brge	.-6      	; 0x4a5c <i2c_start+0xa>
    4a62:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4a66:	84 e8       	ldi	r24, 0x84	; 132
    4a68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4a6c:	ec eb       	ldi	r30, 0xBC	; 188
    4a6e:	f0 e0       	ldi	r31, 0x00	; 0
    4a70:	80 81       	ld	r24, Z
    4a72:	88 23       	and	r24, r24
    4a74:	ec f7       	brge	.-6      	; 0x4a70 <i2c_start+0x1e>
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	08 95       	ret

00004a7a <i2c_write>:
    4a7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4a7e:	84 e8       	ldi	r24, 0x84	; 132
    4a80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4a84:	ec eb       	ldi	r30, 0xBC	; 188
    4a86:	f0 e0       	ldi	r31, 0x00	; 0
    4a88:	80 81       	ld	r24, Z
    4a8a:	88 23       	and	r24, r24
    4a8c:	ec f7       	brge	.-6      	; 0x4a88 <i2c_write+0xe>
    4a8e:	80 e0       	ldi	r24, 0x00	; 0
    4a90:	08 95       	ret

00004a92 <i2c_stop>:
    4a92:	84 e9       	ldi	r24, 0x94	; 148
    4a94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4a98:	ec eb       	ldi	r30, 0xBC	; 188
    4a9a:	f0 e0       	ldi	r31, 0x00	; 0
    4a9c:	80 81       	ld	r24, Z
    4a9e:	84 fd       	sbrc	r24, 4
    4aa0:	fd cf       	rjmp	.-6      	; 0x4a9c <i2c_stop+0xa>
    4aa2:	08 95       	ret

00004aa4 <UART_init>:
    4aa4:	82 30       	cpi	r24, 0x02	; 2
    4aa6:	69 f0       	breq	.+26     	; 0x4ac2 <UART_init+0x1e>
    4aa8:	18 f4       	brcc	.+6      	; 0x4ab0 <UART_init+0xc>
    4aaa:	81 30       	cpi	r24, 0x01	; 1
    4aac:	31 f0       	breq	.+12     	; 0x4aba <UART_init+0x16>
    4aae:	14 c0       	rjmp	.+40     	; 0x4ad8 <UART_init+0x34>
    4ab0:	83 30       	cpi	r24, 0x03	; 3
    4ab2:	59 f0       	breq	.+22     	; 0x4aca <UART_init+0x26>
    4ab4:	84 30       	cpi	r24, 0x04	; 4
    4ab6:	69 f0       	breq	.+26     	; 0x4ad2 <UART_init+0x2e>
    4ab8:	0f c0       	rjmp	.+30     	; 0x4ad8 <UART_init+0x34>
    4aba:	83 e3       	ldi	r24, 0x33	; 51
    4abc:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <ubrr>
    4ac0:	0b c0       	rjmp	.+22     	; 0x4ad8 <UART_init+0x34>
    4ac2:	82 e2       	ldi	r24, 0x22	; 34
    4ac4:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <ubrr>
    4ac8:	07 c0       	rjmp	.+14     	; 0x4ad8 <UART_init+0x34>
    4aca:	89 e1       	ldi	r24, 0x19	; 25
    4acc:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <ubrr>
    4ad0:	03 c0       	rjmp	.+6      	; 0x4ad8 <UART_init+0x34>
    4ad2:	8c e0       	ldi	r24, 0x0C	; 12
    4ad4:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <ubrr>
    4ad8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    4adc:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <ubrr>
    4ae0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    4ae4:	60 ff       	sbrs	r22, 0
    4ae6:	03 c0       	rjmp	.+6      	; 0x4aee <UART_init+0x4a>
    4ae8:	88 e0       	ldi	r24, 0x08	; 8
    4aea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    4aee:	96 2f       	mov	r25, r22
    4af0:	94 70       	andi	r25, 0x04	; 4
    4af2:	66 70       	andi	r22, 0x06	; 6
    4af4:	29 f0       	breq	.+10     	; 0x4b00 <UART_init+0x5c>
    4af6:	e1 ec       	ldi	r30, 0xC1	; 193
    4af8:	f0 e0       	ldi	r31, 0x00	; 0
    4afa:	80 81       	ld	r24, Z
    4afc:	80 61       	ori	r24, 0x10	; 16
    4afe:	80 83       	st	Z, r24
    4b00:	99 23       	and	r25, r25
    4b02:	29 f0       	breq	.+10     	; 0x4b0e <UART_init+0x6a>
    4b04:	e1 ec       	ldi	r30, 0xC1	; 193
    4b06:	f0 e0       	ldi	r31, 0x00	; 0
    4b08:	80 81       	ld	r24, Z
    4b0a:	80 68       	ori	r24, 0x80	; 128
    4b0c:	80 83       	st	Z, r24
    4b0e:	50 98       	cbi	0x0a, 0	; 10
    4b10:	51 9a       	sbi	0x0a, 1	; 10
    4b12:	08 95       	ret

00004b14 <UART_tx_m>:
    4b14:	cf 93       	push	r28
    4b16:	df 93       	push	r29
    4b18:	66 23       	and	r22, r22
    4b1a:	a1 f0       	breq	.+40     	; 0x4b44 <UART_tx_m+0x30>
    4b1c:	dc 01       	movw	r26, r24
    4b1e:	61 50       	subi	r22, 0x01	; 1
    4b20:	26 2f       	mov	r18, r22
    4b22:	30 e0       	ldi	r19, 0x00	; 0
    4b24:	2f 5f       	subi	r18, 0xFF	; 255
    4b26:	3f 4f       	sbci	r19, 0xFF	; 255
    4b28:	28 0f       	add	r18, r24
    4b2a:	39 1f       	adc	r19, r25
    4b2c:	e0 ec       	ldi	r30, 0xC0	; 192
    4b2e:	f0 e0       	ldi	r31, 0x00	; 0
    4b30:	c6 ec       	ldi	r28, 0xC6	; 198
    4b32:	d0 e0       	ldi	r29, 0x00	; 0
    4b34:	90 81       	ld	r25, Z
    4b36:	95 ff       	sbrs	r25, 5
    4b38:	fd cf       	rjmp	.-6      	; 0x4b34 <UART_tx_m+0x20>
    4b3a:	9d 91       	ld	r25, X+
    4b3c:	98 83       	st	Y, r25
    4b3e:	a2 17       	cp	r26, r18
    4b40:	b3 07       	cpc	r27, r19
    4b42:	c1 f7       	brne	.-16     	; 0x4b34 <UART_tx_m+0x20>
    4b44:	df 91       	pop	r29
    4b46:	cf 91       	pop	r28
    4b48:	08 95       	ret

00004b4a <UART_NWL>:
    4b4a:	e0 ec       	ldi	r30, 0xC0	; 192
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	80 81       	ld	r24, Z
    4b50:	85 ff       	sbrs	r24, 5
    4b52:	fd cf       	rjmp	.-6      	; 0x4b4e <UART_NWL+0x4>
    4b54:	8a e0       	ldi	r24, 0x0A	; 10
    4b56:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    4b5a:	08 95       	ret

00004b5c <__subsf3>:
    4b5c:	50 58       	subi	r21, 0x80	; 128

00004b5e <__addsf3>:
    4b5e:	bb 27       	eor	r27, r27
    4b60:	aa 27       	eor	r26, r26
    4b62:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__addsf3x>
    4b66:	0c 94 39 27 	jmp	0x4e72	; 0x4e72 <__fp_round>
    4b6a:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__fp_pscA>
    4b6e:	38 f0       	brcs	.+14     	; 0x4b7e <__addsf3+0x20>
    4b70:	0e 94 32 27 	call	0x4e64	; 0x4e64 <__fp_pscB>
    4b74:	20 f0       	brcs	.+8      	; 0x4b7e <__addsf3+0x20>
    4b76:	39 f4       	brne	.+14     	; 0x4b86 <__addsf3+0x28>
    4b78:	9f 3f       	cpi	r25, 0xFF	; 255
    4b7a:	19 f4       	brne	.+6      	; 0x4b82 <__addsf3+0x24>
    4b7c:	26 f4       	brtc	.+8      	; 0x4b86 <__addsf3+0x28>
    4b7e:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__fp_nan>
    4b82:	0e f4       	brtc	.+2      	; 0x4b86 <__addsf3+0x28>
    4b84:	e0 95       	com	r30
    4b86:	e7 fb       	bst	r30, 7
    4b88:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_inf>

00004b8c <__addsf3x>:
    4b8c:	e9 2f       	mov	r30, r25
    4b8e:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__fp_split3>
    4b92:	58 f3       	brcs	.-42     	; 0x4b6a <__addsf3+0xc>
    4b94:	ba 17       	cp	r27, r26
    4b96:	62 07       	cpc	r22, r18
    4b98:	73 07       	cpc	r23, r19
    4b9a:	84 07       	cpc	r24, r20
    4b9c:	95 07       	cpc	r25, r21
    4b9e:	20 f0       	brcs	.+8      	; 0x4ba8 <__addsf3x+0x1c>
    4ba0:	79 f4       	brne	.+30     	; 0x4bc0 <__addsf3x+0x34>
    4ba2:	a6 f5       	brtc	.+104    	; 0x4c0c <__addsf3x+0x80>
    4ba4:	0c 94 6c 27 	jmp	0x4ed8	; 0x4ed8 <__fp_zero>
    4ba8:	0e f4       	brtc	.+2      	; 0x4bac <__addsf3x+0x20>
    4baa:	e0 95       	com	r30
    4bac:	0b 2e       	mov	r0, r27
    4bae:	ba 2f       	mov	r27, r26
    4bb0:	a0 2d       	mov	r26, r0
    4bb2:	0b 01       	movw	r0, r22
    4bb4:	b9 01       	movw	r22, r18
    4bb6:	90 01       	movw	r18, r0
    4bb8:	0c 01       	movw	r0, r24
    4bba:	ca 01       	movw	r24, r20
    4bbc:	a0 01       	movw	r20, r0
    4bbe:	11 24       	eor	r1, r1
    4bc0:	ff 27       	eor	r31, r31
    4bc2:	59 1b       	sub	r21, r25
    4bc4:	99 f0       	breq	.+38     	; 0x4bec <__addsf3x+0x60>
    4bc6:	59 3f       	cpi	r21, 0xF9	; 249
    4bc8:	50 f4       	brcc	.+20     	; 0x4bde <__addsf3x+0x52>
    4bca:	50 3e       	cpi	r21, 0xE0	; 224
    4bcc:	68 f1       	brcs	.+90     	; 0x4c28 <__addsf3x+0x9c>
    4bce:	1a 16       	cp	r1, r26
    4bd0:	f0 40       	sbci	r31, 0x00	; 0
    4bd2:	a2 2f       	mov	r26, r18
    4bd4:	23 2f       	mov	r18, r19
    4bd6:	34 2f       	mov	r19, r20
    4bd8:	44 27       	eor	r20, r20
    4bda:	58 5f       	subi	r21, 0xF8	; 248
    4bdc:	f3 cf       	rjmp	.-26     	; 0x4bc4 <__addsf3x+0x38>
    4bde:	46 95       	lsr	r20
    4be0:	37 95       	ror	r19
    4be2:	27 95       	ror	r18
    4be4:	a7 95       	ror	r26
    4be6:	f0 40       	sbci	r31, 0x00	; 0
    4be8:	53 95       	inc	r21
    4bea:	c9 f7       	brne	.-14     	; 0x4bde <__addsf3x+0x52>
    4bec:	7e f4       	brtc	.+30     	; 0x4c0c <__addsf3x+0x80>
    4bee:	1f 16       	cp	r1, r31
    4bf0:	ba 0b       	sbc	r27, r26
    4bf2:	62 0b       	sbc	r22, r18
    4bf4:	73 0b       	sbc	r23, r19
    4bf6:	84 0b       	sbc	r24, r20
    4bf8:	ba f0       	brmi	.+46     	; 0x4c28 <__addsf3x+0x9c>
    4bfa:	91 50       	subi	r25, 0x01	; 1
    4bfc:	a1 f0       	breq	.+40     	; 0x4c26 <__addsf3x+0x9a>
    4bfe:	ff 0f       	add	r31, r31
    4c00:	bb 1f       	adc	r27, r27
    4c02:	66 1f       	adc	r22, r22
    4c04:	77 1f       	adc	r23, r23
    4c06:	88 1f       	adc	r24, r24
    4c08:	c2 f7       	brpl	.-16     	; 0x4bfa <__addsf3x+0x6e>
    4c0a:	0e c0       	rjmp	.+28     	; 0x4c28 <__addsf3x+0x9c>
    4c0c:	ba 0f       	add	r27, r26
    4c0e:	62 1f       	adc	r22, r18
    4c10:	73 1f       	adc	r23, r19
    4c12:	84 1f       	adc	r24, r20
    4c14:	48 f4       	brcc	.+18     	; 0x4c28 <__addsf3x+0x9c>
    4c16:	87 95       	ror	r24
    4c18:	77 95       	ror	r23
    4c1a:	67 95       	ror	r22
    4c1c:	b7 95       	ror	r27
    4c1e:	f7 95       	ror	r31
    4c20:	9e 3f       	cpi	r25, 0xFE	; 254
    4c22:	08 f0       	brcs	.+2      	; 0x4c26 <__addsf3x+0x9a>
    4c24:	b0 cf       	rjmp	.-160    	; 0x4b86 <__addsf3+0x28>
    4c26:	93 95       	inc	r25
    4c28:	88 0f       	add	r24, r24
    4c2a:	08 f0       	brcs	.+2      	; 0x4c2e <__addsf3x+0xa2>
    4c2c:	99 27       	eor	r25, r25
    4c2e:	ee 0f       	add	r30, r30
    4c30:	97 95       	ror	r25
    4c32:	87 95       	ror	r24
    4c34:	08 95       	ret

00004c36 <__cmpsf2>:
    4c36:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <__fp_cmp>
    4c3a:	08 f4       	brcc	.+2      	; 0x4c3e <__cmpsf2+0x8>
    4c3c:	81 e0       	ldi	r24, 0x01	; 1
    4c3e:	08 95       	ret

00004c40 <__divsf3>:
    4c40:	0e 94 34 26 	call	0x4c68	; 0x4c68 <__divsf3x>
    4c44:	0c 94 39 27 	jmp	0x4e72	; 0x4e72 <__fp_round>
    4c48:	0e 94 32 27 	call	0x4e64	; 0x4e64 <__fp_pscB>
    4c4c:	58 f0       	brcs	.+22     	; 0x4c64 <__divsf3+0x24>
    4c4e:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__fp_pscA>
    4c52:	40 f0       	brcs	.+16     	; 0x4c64 <__divsf3+0x24>
    4c54:	29 f4       	brne	.+10     	; 0x4c60 <__divsf3+0x20>
    4c56:	5f 3f       	cpi	r21, 0xFF	; 255
    4c58:	29 f0       	breq	.+10     	; 0x4c64 <__divsf3+0x24>
    4c5a:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_inf>
    4c5e:	51 11       	cpse	r21, r1
    4c60:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__fp_szero>
    4c64:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__fp_nan>

00004c68 <__divsf3x>:
    4c68:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__fp_split3>
    4c6c:	68 f3       	brcs	.-38     	; 0x4c48 <__divsf3+0x8>

00004c6e <__divsf3_pse>:
    4c6e:	99 23       	and	r25, r25
    4c70:	b1 f3       	breq	.-20     	; 0x4c5e <__divsf3+0x1e>
    4c72:	55 23       	and	r21, r21
    4c74:	91 f3       	breq	.-28     	; 0x4c5a <__divsf3+0x1a>
    4c76:	95 1b       	sub	r25, r21
    4c78:	55 0b       	sbc	r21, r21
    4c7a:	bb 27       	eor	r27, r27
    4c7c:	aa 27       	eor	r26, r26
    4c7e:	62 17       	cp	r22, r18
    4c80:	73 07       	cpc	r23, r19
    4c82:	84 07       	cpc	r24, r20
    4c84:	38 f0       	brcs	.+14     	; 0x4c94 <__divsf3_pse+0x26>
    4c86:	9f 5f       	subi	r25, 0xFF	; 255
    4c88:	5f 4f       	sbci	r21, 0xFF	; 255
    4c8a:	22 0f       	add	r18, r18
    4c8c:	33 1f       	adc	r19, r19
    4c8e:	44 1f       	adc	r20, r20
    4c90:	aa 1f       	adc	r26, r26
    4c92:	a9 f3       	breq	.-22     	; 0x4c7e <__divsf3_pse+0x10>
    4c94:	35 d0       	rcall	.+106    	; 0x4d00 <__divsf3_pse+0x92>
    4c96:	0e 2e       	mov	r0, r30
    4c98:	3a f0       	brmi	.+14     	; 0x4ca8 <__divsf3_pse+0x3a>
    4c9a:	e0 e8       	ldi	r30, 0x80	; 128
    4c9c:	32 d0       	rcall	.+100    	; 0x4d02 <__divsf3_pse+0x94>
    4c9e:	91 50       	subi	r25, 0x01	; 1
    4ca0:	50 40       	sbci	r21, 0x00	; 0
    4ca2:	e6 95       	lsr	r30
    4ca4:	00 1c       	adc	r0, r0
    4ca6:	ca f7       	brpl	.-14     	; 0x4c9a <__divsf3_pse+0x2c>
    4ca8:	2b d0       	rcall	.+86     	; 0x4d00 <__divsf3_pse+0x92>
    4caa:	fe 2f       	mov	r31, r30
    4cac:	29 d0       	rcall	.+82     	; 0x4d00 <__divsf3_pse+0x92>
    4cae:	66 0f       	add	r22, r22
    4cb0:	77 1f       	adc	r23, r23
    4cb2:	88 1f       	adc	r24, r24
    4cb4:	bb 1f       	adc	r27, r27
    4cb6:	26 17       	cp	r18, r22
    4cb8:	37 07       	cpc	r19, r23
    4cba:	48 07       	cpc	r20, r24
    4cbc:	ab 07       	cpc	r26, r27
    4cbe:	b0 e8       	ldi	r27, 0x80	; 128
    4cc0:	09 f0       	breq	.+2      	; 0x4cc4 <__divsf3_pse+0x56>
    4cc2:	bb 0b       	sbc	r27, r27
    4cc4:	80 2d       	mov	r24, r0
    4cc6:	bf 01       	movw	r22, r30
    4cc8:	ff 27       	eor	r31, r31
    4cca:	93 58       	subi	r25, 0x83	; 131
    4ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    4cce:	3a f0       	brmi	.+14     	; 0x4cde <__divsf3_pse+0x70>
    4cd0:	9e 3f       	cpi	r25, 0xFE	; 254
    4cd2:	51 05       	cpc	r21, r1
    4cd4:	78 f0       	brcs	.+30     	; 0x4cf4 <__divsf3_pse+0x86>
    4cd6:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_inf>
    4cda:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__fp_szero>
    4cde:	5f 3f       	cpi	r21, 0xFF	; 255
    4ce0:	e4 f3       	brlt	.-8      	; 0x4cda <__divsf3_pse+0x6c>
    4ce2:	98 3e       	cpi	r25, 0xE8	; 232
    4ce4:	d4 f3       	brlt	.-12     	; 0x4cda <__divsf3_pse+0x6c>
    4ce6:	86 95       	lsr	r24
    4ce8:	77 95       	ror	r23
    4cea:	67 95       	ror	r22
    4cec:	b7 95       	ror	r27
    4cee:	f7 95       	ror	r31
    4cf0:	9f 5f       	subi	r25, 0xFF	; 255
    4cf2:	c9 f7       	brne	.-14     	; 0x4ce6 <__divsf3_pse+0x78>
    4cf4:	88 0f       	add	r24, r24
    4cf6:	91 1d       	adc	r25, r1
    4cf8:	96 95       	lsr	r25
    4cfa:	87 95       	ror	r24
    4cfc:	97 f9       	bld	r25, 7
    4cfe:	08 95       	ret
    4d00:	e1 e0       	ldi	r30, 0x01	; 1
    4d02:	66 0f       	add	r22, r22
    4d04:	77 1f       	adc	r23, r23
    4d06:	88 1f       	adc	r24, r24
    4d08:	bb 1f       	adc	r27, r27
    4d0a:	62 17       	cp	r22, r18
    4d0c:	73 07       	cpc	r23, r19
    4d0e:	84 07       	cpc	r24, r20
    4d10:	ba 07       	cpc	r27, r26
    4d12:	20 f0       	brcs	.+8      	; 0x4d1c <__divsf3_pse+0xae>
    4d14:	62 1b       	sub	r22, r18
    4d16:	73 0b       	sbc	r23, r19
    4d18:	84 0b       	sbc	r24, r20
    4d1a:	ba 0b       	sbc	r27, r26
    4d1c:	ee 1f       	adc	r30, r30
    4d1e:	88 f7       	brcc	.-30     	; 0x4d02 <__divsf3_pse+0x94>
    4d20:	e0 95       	com	r30
    4d22:	08 95       	ret

00004d24 <__fixunssfsi>:
    4d24:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <__fp_splitA>
    4d28:	88 f0       	brcs	.+34     	; 0x4d4c <__fixunssfsi+0x28>
    4d2a:	9f 57       	subi	r25, 0x7F	; 127
    4d2c:	98 f0       	brcs	.+38     	; 0x4d54 <__fixunssfsi+0x30>
    4d2e:	b9 2f       	mov	r27, r25
    4d30:	99 27       	eor	r25, r25
    4d32:	b7 51       	subi	r27, 0x17	; 23
    4d34:	b0 f0       	brcs	.+44     	; 0x4d62 <__fixunssfsi+0x3e>
    4d36:	e1 f0       	breq	.+56     	; 0x4d70 <__fixunssfsi+0x4c>
    4d38:	66 0f       	add	r22, r22
    4d3a:	77 1f       	adc	r23, r23
    4d3c:	88 1f       	adc	r24, r24
    4d3e:	99 1f       	adc	r25, r25
    4d40:	1a f0       	brmi	.+6      	; 0x4d48 <__fixunssfsi+0x24>
    4d42:	ba 95       	dec	r27
    4d44:	c9 f7       	brne	.-14     	; 0x4d38 <__fixunssfsi+0x14>
    4d46:	14 c0       	rjmp	.+40     	; 0x4d70 <__fixunssfsi+0x4c>
    4d48:	b1 30       	cpi	r27, 0x01	; 1
    4d4a:	91 f0       	breq	.+36     	; 0x4d70 <__fixunssfsi+0x4c>
    4d4c:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__fp_zero>
    4d50:	b1 e0       	ldi	r27, 0x01	; 1
    4d52:	08 95       	ret
    4d54:	0c 94 6c 27 	jmp	0x4ed8	; 0x4ed8 <__fp_zero>
    4d58:	67 2f       	mov	r22, r23
    4d5a:	78 2f       	mov	r23, r24
    4d5c:	88 27       	eor	r24, r24
    4d5e:	b8 5f       	subi	r27, 0xF8	; 248
    4d60:	39 f0       	breq	.+14     	; 0x4d70 <__fixunssfsi+0x4c>
    4d62:	b9 3f       	cpi	r27, 0xF9	; 249
    4d64:	cc f3       	brlt	.-14     	; 0x4d58 <__fixunssfsi+0x34>
    4d66:	86 95       	lsr	r24
    4d68:	77 95       	ror	r23
    4d6a:	67 95       	ror	r22
    4d6c:	b3 95       	inc	r27
    4d6e:	d9 f7       	brne	.-10     	; 0x4d66 <__fixunssfsi+0x42>
    4d70:	3e f4       	brtc	.+14     	; 0x4d80 <__fixunssfsi+0x5c>
    4d72:	90 95       	com	r25
    4d74:	80 95       	com	r24
    4d76:	70 95       	com	r23
    4d78:	61 95       	neg	r22
    4d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7c:	8f 4f       	sbci	r24, 0xFF	; 255
    4d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d80:	08 95       	ret

00004d82 <__floatunsisf>:
    4d82:	e8 94       	clt
    4d84:	09 c0       	rjmp	.+18     	; 0x4d98 <__floatsisf+0x12>

00004d86 <__floatsisf>:
    4d86:	97 fb       	bst	r25, 7
    4d88:	3e f4       	brtc	.+14     	; 0x4d98 <__floatsisf+0x12>
    4d8a:	90 95       	com	r25
    4d8c:	80 95       	com	r24
    4d8e:	70 95       	com	r23
    4d90:	61 95       	neg	r22
    4d92:	7f 4f       	sbci	r23, 0xFF	; 255
    4d94:	8f 4f       	sbci	r24, 0xFF	; 255
    4d96:	9f 4f       	sbci	r25, 0xFF	; 255
    4d98:	99 23       	and	r25, r25
    4d9a:	a9 f0       	breq	.+42     	; 0x4dc6 <__floatsisf+0x40>
    4d9c:	f9 2f       	mov	r31, r25
    4d9e:	96 e9       	ldi	r25, 0x96	; 150
    4da0:	bb 27       	eor	r27, r27
    4da2:	93 95       	inc	r25
    4da4:	f6 95       	lsr	r31
    4da6:	87 95       	ror	r24
    4da8:	77 95       	ror	r23
    4daa:	67 95       	ror	r22
    4dac:	b7 95       	ror	r27
    4dae:	f1 11       	cpse	r31, r1
    4db0:	f8 cf       	rjmp	.-16     	; 0x4da2 <__floatsisf+0x1c>
    4db2:	fa f4       	brpl	.+62     	; 0x4df2 <__floatsisf+0x6c>
    4db4:	bb 0f       	add	r27, r27
    4db6:	11 f4       	brne	.+4      	; 0x4dbc <__floatsisf+0x36>
    4db8:	60 ff       	sbrs	r22, 0
    4dba:	1b c0       	rjmp	.+54     	; 0x4df2 <__floatsisf+0x6c>
    4dbc:	6f 5f       	subi	r22, 0xFF	; 255
    4dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc0:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc4:	16 c0       	rjmp	.+44     	; 0x4df2 <__floatsisf+0x6c>
    4dc6:	88 23       	and	r24, r24
    4dc8:	11 f0       	breq	.+4      	; 0x4dce <__floatsisf+0x48>
    4dca:	96 e9       	ldi	r25, 0x96	; 150
    4dcc:	11 c0       	rjmp	.+34     	; 0x4df0 <__floatsisf+0x6a>
    4dce:	77 23       	and	r23, r23
    4dd0:	21 f0       	breq	.+8      	; 0x4dda <__floatsisf+0x54>
    4dd2:	9e e8       	ldi	r25, 0x8E	; 142
    4dd4:	87 2f       	mov	r24, r23
    4dd6:	76 2f       	mov	r23, r22
    4dd8:	05 c0       	rjmp	.+10     	; 0x4de4 <__floatsisf+0x5e>
    4dda:	66 23       	and	r22, r22
    4ddc:	71 f0       	breq	.+28     	; 0x4dfa <__floatsisf+0x74>
    4dde:	96 e8       	ldi	r25, 0x86	; 134
    4de0:	86 2f       	mov	r24, r22
    4de2:	70 e0       	ldi	r23, 0x00	; 0
    4de4:	60 e0       	ldi	r22, 0x00	; 0
    4de6:	2a f0       	brmi	.+10     	; 0x4df2 <__floatsisf+0x6c>
    4de8:	9a 95       	dec	r25
    4dea:	66 0f       	add	r22, r22
    4dec:	77 1f       	adc	r23, r23
    4dee:	88 1f       	adc	r24, r24
    4df0:	da f7       	brpl	.-10     	; 0x4de8 <__floatsisf+0x62>
    4df2:	88 0f       	add	r24, r24
    4df4:	96 95       	lsr	r25
    4df6:	87 95       	ror	r24
    4df8:	97 f9       	bld	r25, 7
    4dfa:	08 95       	ret

00004dfc <__fp_cmp>:
    4dfc:	99 0f       	add	r25, r25
    4dfe:	00 08       	sbc	r0, r0
    4e00:	55 0f       	add	r21, r21
    4e02:	aa 0b       	sbc	r26, r26
    4e04:	e0 e8       	ldi	r30, 0x80	; 128
    4e06:	fe ef       	ldi	r31, 0xFE	; 254
    4e08:	16 16       	cp	r1, r22
    4e0a:	17 06       	cpc	r1, r23
    4e0c:	e8 07       	cpc	r30, r24
    4e0e:	f9 07       	cpc	r31, r25
    4e10:	c0 f0       	brcs	.+48     	; 0x4e42 <__fp_cmp+0x46>
    4e12:	12 16       	cp	r1, r18
    4e14:	13 06       	cpc	r1, r19
    4e16:	e4 07       	cpc	r30, r20
    4e18:	f5 07       	cpc	r31, r21
    4e1a:	98 f0       	brcs	.+38     	; 0x4e42 <__fp_cmp+0x46>
    4e1c:	62 1b       	sub	r22, r18
    4e1e:	73 0b       	sbc	r23, r19
    4e20:	84 0b       	sbc	r24, r20
    4e22:	95 0b       	sbc	r25, r21
    4e24:	39 f4       	brne	.+14     	; 0x4e34 <__fp_cmp+0x38>
    4e26:	0a 26       	eor	r0, r26
    4e28:	61 f0       	breq	.+24     	; 0x4e42 <__fp_cmp+0x46>
    4e2a:	23 2b       	or	r18, r19
    4e2c:	24 2b       	or	r18, r20
    4e2e:	25 2b       	or	r18, r21
    4e30:	21 f4       	brne	.+8      	; 0x4e3a <__fp_cmp+0x3e>
    4e32:	08 95       	ret
    4e34:	0a 26       	eor	r0, r26
    4e36:	09 f4       	brne	.+2      	; 0x4e3a <__fp_cmp+0x3e>
    4e38:	a1 40       	sbci	r26, 0x01	; 1
    4e3a:	a6 95       	lsr	r26
    4e3c:	8f ef       	ldi	r24, 0xFF	; 255
    4e3e:	81 1d       	adc	r24, r1
    4e40:	81 1d       	adc	r24, r1
    4e42:	08 95       	ret

00004e44 <__fp_inf>:
    4e44:	97 f9       	bld	r25, 7
    4e46:	9f 67       	ori	r25, 0x7F	; 127
    4e48:	80 e8       	ldi	r24, 0x80	; 128
    4e4a:	70 e0       	ldi	r23, 0x00	; 0
    4e4c:	60 e0       	ldi	r22, 0x00	; 0
    4e4e:	08 95       	ret

00004e50 <__fp_nan>:
    4e50:	9f ef       	ldi	r25, 0xFF	; 255
    4e52:	80 ec       	ldi	r24, 0xC0	; 192
    4e54:	08 95       	ret

00004e56 <__fp_pscA>:
    4e56:	00 24       	eor	r0, r0
    4e58:	0a 94       	dec	r0
    4e5a:	16 16       	cp	r1, r22
    4e5c:	17 06       	cpc	r1, r23
    4e5e:	18 06       	cpc	r1, r24
    4e60:	09 06       	cpc	r0, r25
    4e62:	08 95       	ret

00004e64 <__fp_pscB>:
    4e64:	00 24       	eor	r0, r0
    4e66:	0a 94       	dec	r0
    4e68:	12 16       	cp	r1, r18
    4e6a:	13 06       	cpc	r1, r19
    4e6c:	14 06       	cpc	r1, r20
    4e6e:	05 06       	cpc	r0, r21
    4e70:	08 95       	ret

00004e72 <__fp_round>:
    4e72:	09 2e       	mov	r0, r25
    4e74:	03 94       	inc	r0
    4e76:	00 0c       	add	r0, r0
    4e78:	11 f4       	brne	.+4      	; 0x4e7e <__fp_round+0xc>
    4e7a:	88 23       	and	r24, r24
    4e7c:	52 f0       	brmi	.+20     	; 0x4e92 <__fp_round+0x20>
    4e7e:	bb 0f       	add	r27, r27
    4e80:	40 f4       	brcc	.+16     	; 0x4e92 <__fp_round+0x20>
    4e82:	bf 2b       	or	r27, r31
    4e84:	11 f4       	brne	.+4      	; 0x4e8a <__fp_round+0x18>
    4e86:	60 ff       	sbrs	r22, 0
    4e88:	04 c0       	rjmp	.+8      	; 0x4e92 <__fp_round+0x20>
    4e8a:	6f 5f       	subi	r22, 0xFF	; 255
    4e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e8e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e90:	9f 4f       	sbci	r25, 0xFF	; 255
    4e92:	08 95       	ret

00004e94 <__fp_split3>:
    4e94:	57 fd       	sbrc	r21, 7
    4e96:	90 58       	subi	r25, 0x80	; 128
    4e98:	44 0f       	add	r20, r20
    4e9a:	55 1f       	adc	r21, r21
    4e9c:	59 f0       	breq	.+22     	; 0x4eb4 <__fp_splitA+0x10>
    4e9e:	5f 3f       	cpi	r21, 0xFF	; 255
    4ea0:	71 f0       	breq	.+28     	; 0x4ebe <__fp_splitA+0x1a>
    4ea2:	47 95       	ror	r20

00004ea4 <__fp_splitA>:
    4ea4:	88 0f       	add	r24, r24
    4ea6:	97 fb       	bst	r25, 7
    4ea8:	99 1f       	adc	r25, r25
    4eaa:	61 f0       	breq	.+24     	; 0x4ec4 <__fp_splitA+0x20>
    4eac:	9f 3f       	cpi	r25, 0xFF	; 255
    4eae:	79 f0       	breq	.+30     	; 0x4ece <__fp_splitA+0x2a>
    4eb0:	87 95       	ror	r24
    4eb2:	08 95       	ret
    4eb4:	12 16       	cp	r1, r18
    4eb6:	13 06       	cpc	r1, r19
    4eb8:	14 06       	cpc	r1, r20
    4eba:	55 1f       	adc	r21, r21
    4ebc:	f2 cf       	rjmp	.-28     	; 0x4ea2 <__fp_split3+0xe>
    4ebe:	46 95       	lsr	r20
    4ec0:	f1 df       	rcall	.-30     	; 0x4ea4 <__fp_splitA>
    4ec2:	08 c0       	rjmp	.+16     	; 0x4ed4 <__fp_splitA+0x30>
    4ec4:	16 16       	cp	r1, r22
    4ec6:	17 06       	cpc	r1, r23
    4ec8:	18 06       	cpc	r1, r24
    4eca:	99 1f       	adc	r25, r25
    4ecc:	f1 cf       	rjmp	.-30     	; 0x4eb0 <__fp_splitA+0xc>
    4ece:	86 95       	lsr	r24
    4ed0:	71 05       	cpc	r23, r1
    4ed2:	61 05       	cpc	r22, r1
    4ed4:	08 94       	sec
    4ed6:	08 95       	ret

00004ed8 <__fp_zero>:
    4ed8:	e8 94       	clt

00004eda <__fp_szero>:
    4eda:	bb 27       	eor	r27, r27
    4edc:	66 27       	eor	r22, r22
    4ede:	77 27       	eor	r23, r23
    4ee0:	cb 01       	movw	r24, r22
    4ee2:	97 f9       	bld	r25, 7
    4ee4:	08 95       	ret

00004ee6 <__mulsf3>:
    4ee6:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <__mulsf3x>
    4eea:	0c 94 39 27 	jmp	0x4e72	; 0x4e72 <__fp_round>
    4eee:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <__fp_pscA>
    4ef2:	38 f0       	brcs	.+14     	; 0x4f02 <__mulsf3+0x1c>
    4ef4:	0e 94 32 27 	call	0x4e64	; 0x4e64 <__fp_pscB>
    4ef8:	20 f0       	brcs	.+8      	; 0x4f02 <__mulsf3+0x1c>
    4efa:	95 23       	and	r25, r21
    4efc:	11 f0       	breq	.+4      	; 0x4f02 <__mulsf3+0x1c>
    4efe:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_inf>
    4f02:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__fp_nan>
    4f06:	11 24       	eor	r1, r1
    4f08:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__fp_szero>

00004f0c <__mulsf3x>:
    4f0c:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__fp_split3>
    4f10:	70 f3       	brcs	.-36     	; 0x4eee <__mulsf3+0x8>

00004f12 <__mulsf3_pse>:
    4f12:	95 9f       	mul	r25, r21
    4f14:	c1 f3       	breq	.-16     	; 0x4f06 <__mulsf3+0x20>
    4f16:	95 0f       	add	r25, r21
    4f18:	50 e0       	ldi	r21, 0x00	; 0
    4f1a:	55 1f       	adc	r21, r21
    4f1c:	62 9f       	mul	r22, r18
    4f1e:	f0 01       	movw	r30, r0
    4f20:	72 9f       	mul	r23, r18
    4f22:	bb 27       	eor	r27, r27
    4f24:	f0 0d       	add	r31, r0
    4f26:	b1 1d       	adc	r27, r1
    4f28:	63 9f       	mul	r22, r19
    4f2a:	aa 27       	eor	r26, r26
    4f2c:	f0 0d       	add	r31, r0
    4f2e:	b1 1d       	adc	r27, r1
    4f30:	aa 1f       	adc	r26, r26
    4f32:	64 9f       	mul	r22, r20
    4f34:	66 27       	eor	r22, r22
    4f36:	b0 0d       	add	r27, r0
    4f38:	a1 1d       	adc	r26, r1
    4f3a:	66 1f       	adc	r22, r22
    4f3c:	82 9f       	mul	r24, r18
    4f3e:	22 27       	eor	r18, r18
    4f40:	b0 0d       	add	r27, r0
    4f42:	a1 1d       	adc	r26, r1
    4f44:	62 1f       	adc	r22, r18
    4f46:	73 9f       	mul	r23, r19
    4f48:	b0 0d       	add	r27, r0
    4f4a:	a1 1d       	adc	r26, r1
    4f4c:	62 1f       	adc	r22, r18
    4f4e:	83 9f       	mul	r24, r19
    4f50:	a0 0d       	add	r26, r0
    4f52:	61 1d       	adc	r22, r1
    4f54:	22 1f       	adc	r18, r18
    4f56:	74 9f       	mul	r23, r20
    4f58:	33 27       	eor	r19, r19
    4f5a:	a0 0d       	add	r26, r0
    4f5c:	61 1d       	adc	r22, r1
    4f5e:	23 1f       	adc	r18, r19
    4f60:	84 9f       	mul	r24, r20
    4f62:	60 0d       	add	r22, r0
    4f64:	21 1d       	adc	r18, r1
    4f66:	82 2f       	mov	r24, r18
    4f68:	76 2f       	mov	r23, r22
    4f6a:	6a 2f       	mov	r22, r26
    4f6c:	11 24       	eor	r1, r1
    4f6e:	9f 57       	subi	r25, 0x7F	; 127
    4f70:	50 40       	sbci	r21, 0x00	; 0
    4f72:	9a f0       	brmi	.+38     	; 0x4f9a <__mulsf3_pse+0x88>
    4f74:	f1 f0       	breq	.+60     	; 0x4fb2 <__mulsf3_pse+0xa0>
    4f76:	88 23       	and	r24, r24
    4f78:	4a f0       	brmi	.+18     	; 0x4f8c <__mulsf3_pse+0x7a>
    4f7a:	ee 0f       	add	r30, r30
    4f7c:	ff 1f       	adc	r31, r31
    4f7e:	bb 1f       	adc	r27, r27
    4f80:	66 1f       	adc	r22, r22
    4f82:	77 1f       	adc	r23, r23
    4f84:	88 1f       	adc	r24, r24
    4f86:	91 50       	subi	r25, 0x01	; 1
    4f88:	50 40       	sbci	r21, 0x00	; 0
    4f8a:	a9 f7       	brne	.-22     	; 0x4f76 <__mulsf3_pse+0x64>
    4f8c:	9e 3f       	cpi	r25, 0xFE	; 254
    4f8e:	51 05       	cpc	r21, r1
    4f90:	80 f0       	brcs	.+32     	; 0x4fb2 <__mulsf3_pse+0xa0>
    4f92:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__fp_inf>
    4f96:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__fp_szero>
    4f9a:	5f 3f       	cpi	r21, 0xFF	; 255
    4f9c:	e4 f3       	brlt	.-8      	; 0x4f96 <__mulsf3_pse+0x84>
    4f9e:	98 3e       	cpi	r25, 0xE8	; 232
    4fa0:	d4 f3       	brlt	.-12     	; 0x4f96 <__mulsf3_pse+0x84>
    4fa2:	86 95       	lsr	r24
    4fa4:	77 95       	ror	r23
    4fa6:	67 95       	ror	r22
    4fa8:	b7 95       	ror	r27
    4faa:	f7 95       	ror	r31
    4fac:	e7 95       	ror	r30
    4fae:	9f 5f       	subi	r25, 0xFF	; 255
    4fb0:	c1 f7       	brne	.-16     	; 0x4fa2 <__mulsf3_pse+0x90>
    4fb2:	fe 2b       	or	r31, r30
    4fb4:	88 0f       	add	r24, r24
    4fb6:	91 1d       	adc	r25, r1
    4fb8:	96 95       	lsr	r25
    4fba:	87 95       	ror	r24
    4fbc:	97 f9       	bld	r25, 7
    4fbe:	08 95       	ret

00004fc0 <__divmodsi4>:
    4fc0:	05 2e       	mov	r0, r21
    4fc2:	97 fb       	bst	r25, 7
    4fc4:	1e f4       	brtc	.+6      	; 0x4fcc <__divmodsi4+0xc>
    4fc6:	00 94       	com	r0
    4fc8:	0e 94 f7 27 	call	0x4fee	; 0x4fee <__negsi2>
    4fcc:	57 fd       	sbrc	r21, 7
    4fce:	07 d0       	rcall	.+14     	; 0x4fde <__divmodsi4_neg2>
    4fd0:	0e 94 05 28 	call	0x500a	; 0x500a <__udivmodsi4>
    4fd4:	07 fc       	sbrc	r0, 7
    4fd6:	03 d0       	rcall	.+6      	; 0x4fde <__divmodsi4_neg2>
    4fd8:	4e f4       	brtc	.+18     	; 0x4fec <__divmodsi4_exit>
    4fda:	0c 94 f7 27 	jmp	0x4fee	; 0x4fee <__negsi2>

00004fde <__divmodsi4_neg2>:
    4fde:	50 95       	com	r21
    4fe0:	40 95       	com	r20
    4fe2:	30 95       	com	r19
    4fe4:	21 95       	neg	r18
    4fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe8:	4f 4f       	sbci	r20, 0xFF	; 255
    4fea:	5f 4f       	sbci	r21, 0xFF	; 255

00004fec <__divmodsi4_exit>:
    4fec:	08 95       	ret

00004fee <__negsi2>:
    4fee:	90 95       	com	r25
    4ff0:	80 95       	com	r24
    4ff2:	70 95       	com	r23
    4ff4:	61 95       	neg	r22
    4ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    4ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    4ffc:	08 95       	ret

00004ffe <__tablejump2__>:
    4ffe:	ee 0f       	add	r30, r30
    5000:	ff 1f       	adc	r31, r31
    5002:	05 90       	lpm	r0, Z+
    5004:	f4 91       	lpm	r31, Z
    5006:	e0 2d       	mov	r30, r0
    5008:	09 94       	ijmp

0000500a <__udivmodsi4>:
    500a:	a1 e2       	ldi	r26, 0x21	; 33
    500c:	1a 2e       	mov	r1, r26
    500e:	aa 1b       	sub	r26, r26
    5010:	bb 1b       	sub	r27, r27
    5012:	fd 01       	movw	r30, r26
    5014:	0d c0       	rjmp	.+26     	; 0x5030 <__udivmodsi4_ep>

00005016 <__udivmodsi4_loop>:
    5016:	aa 1f       	adc	r26, r26
    5018:	bb 1f       	adc	r27, r27
    501a:	ee 1f       	adc	r30, r30
    501c:	ff 1f       	adc	r31, r31
    501e:	a2 17       	cp	r26, r18
    5020:	b3 07       	cpc	r27, r19
    5022:	e4 07       	cpc	r30, r20
    5024:	f5 07       	cpc	r31, r21
    5026:	20 f0       	brcs	.+8      	; 0x5030 <__udivmodsi4_ep>
    5028:	a2 1b       	sub	r26, r18
    502a:	b3 0b       	sbc	r27, r19
    502c:	e4 0b       	sbc	r30, r20
    502e:	f5 0b       	sbc	r31, r21

00005030 <__udivmodsi4_ep>:
    5030:	66 1f       	adc	r22, r22
    5032:	77 1f       	adc	r23, r23
    5034:	88 1f       	adc	r24, r24
    5036:	99 1f       	adc	r25, r25
    5038:	1a 94       	dec	r1
    503a:	69 f7       	brne	.-38     	; 0x5016 <__udivmodsi4_loop>
    503c:	60 95       	com	r22
    503e:	70 95       	com	r23
    5040:	80 95       	com	r24
    5042:	90 95       	com	r25
    5044:	9b 01       	movw	r18, r22
    5046:	ac 01       	movw	r20, r24
    5048:	bd 01       	movw	r22, r26
    504a:	cf 01       	movw	r24, r30
    504c:	08 95       	ret

0000504e <eeprom_read_byte>:
    504e:	f9 99       	sbic	0x1f, 1	; 31
    5050:	fe cf       	rjmp	.-4      	; 0x504e <eeprom_read_byte>
    5052:	92 bd       	out	0x22, r25	; 34
    5054:	81 bd       	out	0x21, r24	; 33
    5056:	f8 9a       	sbi	0x1f, 0	; 31
    5058:	99 27       	eor	r25, r25
    505a:	80 b5       	in	r24, 0x20	; 32
    505c:	08 95       	ret

0000505e <eeprom_read_word>:
    505e:	a8 e1       	ldi	r26, 0x18	; 24
    5060:	b0 e0       	ldi	r27, 0x00	; 0
    5062:	42 e0       	ldi	r20, 0x02	; 2
    5064:	50 e0       	ldi	r21, 0x00	; 0
    5066:	0c 94 4f 28 	jmp	0x509e	; 0x509e <eeprom_read_blraw>

0000506a <eeprom_update_byte>:
    506a:	26 2f       	mov	r18, r22

0000506c <eeprom_update_r18>:
    506c:	f9 99       	sbic	0x1f, 1	; 31
    506e:	fe cf       	rjmp	.-4      	; 0x506c <eeprom_update_r18>
    5070:	92 bd       	out	0x22, r25	; 34
    5072:	81 bd       	out	0x21, r24	; 33
    5074:	f8 9a       	sbi	0x1f, 0	; 31
    5076:	01 97       	sbiw	r24, 0x01	; 1
    5078:	00 b4       	in	r0, 0x20	; 32
    507a:	02 16       	cp	r0, r18
    507c:	39 f0       	breq	.+14     	; 0x508c <eeprom_update_r18+0x20>
    507e:	1f ba       	out	0x1f, r1	; 31
    5080:	20 bd       	out	0x20, r18	; 32
    5082:	0f b6       	in	r0, 0x3f	; 63
    5084:	f8 94       	cli
    5086:	fa 9a       	sbi	0x1f, 2	; 31
    5088:	f9 9a       	sbi	0x1f, 1	; 31
    508a:	0f be       	out	0x3f, r0	; 63
    508c:	08 95       	ret

0000508e <eeprom_update_word>:
    508e:	01 96       	adiw	r24, 0x01	; 1
    5090:	27 2f       	mov	r18, r23
    5092:	0e 94 36 28 	call	0x506c	; 0x506c <eeprom_update_r18>
    5096:	0c 94 35 28 	jmp	0x506a	; 0x506a <eeprom_update_byte>

0000509a <eeprom_read_block>:
    509a:	dc 01       	movw	r26, r24
    509c:	cb 01       	movw	r24, r22

0000509e <eeprom_read_blraw>:
    509e:	fc 01       	movw	r30, r24
    50a0:	f9 99       	sbic	0x1f, 1	; 31
    50a2:	fe cf       	rjmp	.-4      	; 0x50a0 <eeprom_read_blraw+0x2>
    50a4:	06 c0       	rjmp	.+12     	; 0x50b2 <eeprom_read_blraw+0x14>
    50a6:	f2 bd       	out	0x22, r31	; 34
    50a8:	e1 bd       	out	0x21, r30	; 33
    50aa:	f8 9a       	sbi	0x1f, 0	; 31
    50ac:	31 96       	adiw	r30, 0x01	; 1
    50ae:	00 b4       	in	r0, 0x20	; 32
    50b0:	0d 92       	st	X+, r0
    50b2:	41 50       	subi	r20, 0x01	; 1
    50b4:	50 40       	sbci	r21, 0x00	; 0
    50b6:	b8 f7       	brcc	.-18     	; 0x50a6 <eeprom_read_blraw+0x8>
    50b8:	08 95       	ret

000050ba <_exit>:
    50ba:	f8 94       	cli

000050bc <__stop_program>:
    50bc:	ff cf       	rjmp	.-2      	; 0x50bc <__stop_program>
